{
  "components": {
    "schemas": {
      "AccessGroupAssignDoor": {
        "additionalProperties": false,
        "properties": {
          "doors": {
            "items": {
              "$ref": "#/components/schemas/AccessGroupAssignDoorDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "AccessGroupAssignDoorDetail": {
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "doorId": {
            "format": "int32",
            "type": "integer"
          },
          "tzId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AccessGroupModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isDefault": {
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccessSettingModel": {
        "additionalProperties": false,
        "properties": {
          "allLocationWarning": {
            "nullable": true,
            "type": "string"
          },
          "allowDeleteRecord": {
            "type": "boolean"
          },
          "approvalStepNumber": {
            "format": "int32",
            "type": "integer"
          },
          "deviceIdCheckIn": {
            "format": "int32",
            "type": "integer"
          },
          "enableAutoApproval": {
            "type": "boolean"
          },
          "firstApproverAccounts": {
            "nullable": true,
            "type": "string"
          },
          "listFieldsEnable": {
            "additionalProperties": {
              "type": "boolean"
            },
            "nullable": true,
            "type": "object"
          },
          "secondApproverAccounts": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccessTimeModel": {
        "additionalProperties": false,
        "properties": {
          "createdBy": {
            "format": "int32",
            "type": "integer"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "friday": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "holidayType1": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "holidayType2": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "holidayType3": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "monday": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "remarks": {
            "nullable": true,
            "type": "string"
          },
          "saturday": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "sunday": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "thursday": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "tuesday": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "updatedBy": {
            "format": "int32",
            "type": "integer"
          },
          "updatedOn": {
            "format": "date-time",
            "type": "string"
          },
          "wednesday": {
            "items": {
              "$ref": "#/components/schemas/DayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "AccidentTypeModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountAvatarModel": {
        "additionalProperties": false,
        "properties": {
          "avatar": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountGetTokenModel": {
        "additionalProperties": false,
        "properties": {
          "hash": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountModel": {
        "additionalProperties": false,
        "properties": {
          "allLanguage": {
            "items": {
              "$ref": "#/components/schemas/LanguageDetailModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "companyId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "confirmPassword": {
            "nullable": true,
            "type": "string"
          },
          "firstName": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "lastName": {
            "nullable": true,
            "type": "string"
          },
          "password": {
            "nullable": true,
            "type": "string"
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string"
          },
          "preferredSystem": {
            "format": "int32",
            "type": "integer"
          },
          "role": {
            "type": "integer"
          },
          "rootFlag": {
            "type": "boolean"
          },
          "status": {
            "type": "integer"
          },
          "timeZone": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountTimeZoneModel": {
        "additionalProperties": false,
        "properties": {
          "timeZone": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionApproval": {
        "additionalProperties": false,
        "properties": {
          "isAccept": {
            "type": "boolean"
          },
          "rejectReason": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActiveFaceSetting": {
        "additionalProperties": false,
        "properties": {
          "activationCode": {
            "nullable": true,
            "type": "string"
          },
          "key": {
            "nullable": true,
            "type": "string"
          },
          "serial": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddCornerSettingModel": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "nullable": true,
            "type": "string"
          },
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddExceptionalMealModel": {
        "additionalProperties": false,
        "properties": {
          "end": {
            "format": "date-time",
            "type": "string"
          },
          "fromMealTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "icuDeviceId": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "price": {
            "format": "decimal",
            "type": "number"
          },
          "start": {
            "format": "date-time",
            "type": "string"
          },
          "toMealTypeId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AddMealSettingModel": {
        "additionalProperties": false,
        "properties": {
          "cornerId": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "mealTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "price": {
            "format": "decimal",
            "type": "number"
          }
        },
        "type": "object"
      },
      "AddUserDiscountModel": {
        "additionalProperties": false,
        "properties": {
          "amount": {
            "format": "decimal",
            "type": "number"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "end": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "start": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "userId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApprovedModel": {
        "additionalProperties": false,
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssignAccessTime": {
        "additionalProperties": false,
        "properties": {
          "accessTimeId": {
            "format": "int32",
            "type": "integer"
          },
          "deviceList": {
            "items": {
              "$ref": "#/components/schemas/DeviceAssignModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "userCodes": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "AttendanceModel": {
        "additionalProperties": false,
        "properties": {
          "clockInD": {
            "format": "date-time",
            "type": "string"
          },
          "clockOutD": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AttendanceRegister": {
        "additionalProperties": false,
        "properties": {
          "endD": {
            "format": "date-time",
            "type": "string"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          },
          "startD": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AttendanceSettingModel": {
        "additionalProperties": false,
        "properties": {
          "approvarAccounts": {
            "nullable": true,
            "type": "string"
          },
          "enableNotifyCheckinLate": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "timeFormatId": {
            "format": "int32",
            "type": "integer"
          },
          "timeFormatList": {
            "items": {
              "$ref": "#/components/schemas/TimeformatTypeModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "AvatarModel": {
        "additionalProperties": false,
        "properties": {
          "avatar": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BodyTemperatureModel": {
        "additionalProperties": false,
        "properties": {
          "bodyTemperature": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "BookAreaModel": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BookModel": {
        "additionalProperties": false,
        "properties": {
          "author": {
            "nullable": true,
            "type": "string"
          },
          "bookAreaId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isbnNumber": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BorrowTicketModel": {
        "additionalProperties": false,
        "properties": {
          "bookId": {
            "format": "int32",
            "type": "integer"
          },
          "deadlineDate": {
            "format": "date-time",
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildingModel": {
        "additionalProperties": false,
        "properties": {
          "address": {
            "nullable": true,
            "type": "string"
          },
          "city": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "location": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "title": "Building Name",
            "type": "string"
          },
          "parentId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "postalCode": {
            "nullable": true,
            "type": "string"
          },
          "timeZone": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CameraModel": {
        "additionalProperties": false,
        "properties": {
          "cameraId": {
            "nullable": true,
            "type": "string"
          },
          "checkEventFromWebHook": {
            "type": "boolean"
          },
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "icuId": {
            "format": "int32",
            "type": "integer"
          },
          "lightAlarm": {
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "roleReader": {
            "format": "int32",
            "type": "integer"
          },
          "saveEventUnknownFace": {
            "type": "boolean"
          },
          "similarity": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "urlStream": {
            "nullable": true,
            "type": "string"
          },
          "videoLength": {
            "format": "int32",
            "type": "integer"
          },
          "voiceAlarm": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CameraSetting": {
        "additionalProperties": false,
        "properties": {
          "accessToken": {
            "nullable": true,
            "type": "string"
          },
          "clientId": {
            "nullable": true,
            "type": "string"
          },
          "clientSecret": {
            "nullable": true,
            "type": "string"
          },
          "isEnableAutoSync": {
            "type": "boolean"
          },
          "placeId": {
            "format": "int32",
            "type": "integer"
          },
          "refreshToken": {
            "nullable": true,
            "type": "string"
          },
          "server": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardIssueModel": {
        "additionalProperties": false,
        "properties": {
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "cardName": {
            "nullable": true,
            "type": "string"
          },
          "cardRole": {
            "type": "integer"
          },
          "cardRoleType": {
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "issueCount": {
            "format": "int32",
            "type": "integer"
          },
          "managementNumber": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "userId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "visitId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CardLayoutFillPreviewModel": {
        "additionalProperties": false,
        "properties": {
          "layoutBack": {
            "items": {
              "$ref": "#/components/schemas/DataCardLayout"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "layoutFont": {
            "items": {
              "$ref": "#/components/schemas/DataCardLayout"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "userId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CardLayoutModel": {
        "additionalProperties": false,
        "properties": {
          "alignmentBack": {
            "format": "int32",
            "type": "integer"
          },
          "alignmentFont": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "layoutBack": {
            "items": {
              "$ref": "#/components/schemas/DataCardLayout"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "layoutFont": {
            "items": {
              "$ref": "#/components/schemas/DataCardLayout"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardModel": {
        "additionalProperties": false,
        "properties": {
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "cardStatus": {
            "type": "integer"
          },
          "cardType": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "faceData": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FaceModel"
              }
            ]
          },
          "fingerPrintData": {
            "items": {
              "$ref": "#/components/schemas/FingerPrintModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "issueCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CategoryModel": {
        "additionalProperties": false,
        "properties": {
          "categoryOptions": {
            "items": {
              "$ref": "#/components/schemas/CategoryOptionModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "parentCategoryId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CategoryOptionModel": {
        "additionalProperties": false,
        "properties": {
          "categoryId": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "parentOptionId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChangePasswordModel": {
        "additionalProperties": false,
        "properties": {
          "confirmNewPassword": {
            "nullable": true,
            "type": "string"
          },
          "newPassword": {
            "nullable": true,
            "type": "string"
          },
          "password": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommandObject": {
        "additionalProperties": false,
        "properties": {
          "argument": {
            "nullable": true,
            "type": "string"
          },
          "fileCommand": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommandTest": {
        "additionalProperties": false,
        "properties": {
          "commandFile": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "commands": {
            "items": {
              "$ref": "#/components/schemas/CommandObject"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "fileName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompanyModel": {
        "additionalProperties": false,
        "properties": {
          "allLanguage": {
            "items": {
              "$ref": "#/components/schemas/LanguageDetailModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "autoSyncUserData": {
            "type": "boolean"
          },
          "cardBit": {
            "format": "int32",
            "type": "integer"
          },
          "code": {
            "nullable": true,
            "title": "Company Code",
            "type": "string"
          },
          "contactWEmail": {
            "nullable": true,
            "type": "string"
          },
          "enableReCheckImageCamera": {
            "type": "boolean"
          },
          "eventLogStorageDurationInDb": {
            "format": "int32",
            "type": "integer"
          },
          "eventLogStorageDurationInFile": {
            "format": "int32",
            "type": "integer"
          },
          "industries": {
            "nullable": true,
            "type": "string"
          },
          "limitCountOfUser": {
            "format": "int32",
            "type": "integer"
          },
          "listLanguage": {
            "items": {
              "$ref": "#/components/schemas/LanguageDetailModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "location": {
            "nullable": true,
            "type": "string"
          },
          "logoEnable": {
            "type": "boolean"
          },
          "miniLogoEnable": {
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "title": "Company Name",
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          },
          "remarks": {
            "nullable": true,
            "title": "Note",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "integer"
          },
          "timeLimitCheckImageCamera": {
            "format": "int32",
            "type": "integer"
          },
          "timeLimitStoredImage": {
            "format": "int32",
            "type": "integer"
          },
          "timeLimitStoredVideo": {
            "format": "int32",
            "type": "integer"
          },
          "websiteUrl": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigActiveFace": {
        "additionalProperties": false,
        "properties": {
          "activeFace": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActiveFaceSetting"
              }
            ]
          },
          "deviceIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "ConfigLocalMqttModel": {
        "additionalProperties": false,
        "properties": {
          "deviceIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "localMqtt": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocalMqttSetting"
              }
            ]
          }
        },
        "type": "object"
      },
      "ControllerDeviceModel": {
        "additionalProperties": false,
        "properties": {
          "companyCode": {
            "nullable": true,
            "type": "string"
          },
          "companyId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "controllerAddress": {
            "nullable": true,
            "type": "string"
          },
          "controllerType": {
            "format": "int32",
            "type": "integer"
          },
          "doorName": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "ipAddress": {
            "nullable": true,
            "type": "string"
          },
          "macAddress": {
            "nullable": true,
            "type": "string"
          },
          "passback": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "readers": {
            "items": {
              "$ref": "#/components/schemas/ReaderModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "DataCardLayout": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "nullable": true,
            "type": "string"
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "column": {
            "nullable": true,
            "type": "string"
          },
          "font": {
            "nullable": true,
            "type": "string"
          },
          "fontSize": {
            "format": "double",
            "type": "number"
          },
          "fontStyle": {
            "nullable": true,
            "type": "string"
          },
          "fontWeight": {
            "nullable": true,
            "type": "string"
          },
          "height": {
            "format": "double",
            "type": "number"
          },
          "isStamp": {
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "table": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "nullable": true,
            "type": "string"
          },
          "width": {
            "format": "double",
            "type": "number"
          },
          "x": {
            "format": "double",
            "type": "number"
          },
          "y": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "DayDetail": {
        "additionalProperties": false,
        "properties": {
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "to": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DepartmentModel": {
        "additionalProperties": false,
        "properties": {
          "accessGroupId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "departmentManagerId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "number": {
            "nullable": true,
            "type": "string"
          },
          "parentId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DeviceAssignModel": {
        "additionalProperties": false,
        "properties": {
          "deviceAddress": {
            "nullable": true,
            "type": "string"
          },
          "doorName": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DeviceConfigAlarmModel": {
        "additionalProperties": false,
        "properties": {
          "deviceIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "status": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeviceInstruction": {
        "additionalProperties": false,
        "properties": {
          "command": {
            "nullable": true,
            "type": "string"
          },
          "ids": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "localMqtt": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocalMqttSetting"
              }
            ]
          },
          "openPeriod": {
            "format": "int32",
            "type": "integer"
          },
          "openUntilTime": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceInstructionRID": {
        "additionalProperties": false,
        "properties": {
          "command": {
            "nullable": true,
            "type": "string"
          },
          "openPeriod": {
            "format": "int32",
            "type": "integer"
          },
          "openUntilTime": {
            "nullable": true,
            "type": "string"
          },
          "rids": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "DeviceMessageModel": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "nullable": true,
            "type": "string"
          },
          "messageId": {
            "format": "int32",
            "type": "integer"
          },
          "remark": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceModel": {
        "additionalProperties": false,
        "properties": {
          "activeTimezoneId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "alarm": {
            "type": "boolean"
          },
          "autoAcceptVideoCall": {
            "type": "boolean"
          },
          "backupPeriod": {
            "format": "int32",
            "type": "integer"
          },
          "bioStationMode": {
            "format": "int32",
            "type": "integer"
          },
          "buildingId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "buzzerReader0": {
            "nullable": true,
            "type": "integer"
          },
          "buzzerReader1": {
            "nullable": true,
            "type": "integer"
          },
          "closeReverseLock": {
            "type": "boolean"
          },
          "companyId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "controllerId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "dependentDoors": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "deviceAddress": {
            "nullable": true,
            "type": "string"
          },
          "deviceBuzzer": {
            "type": "integer"
          },
          "deviceManagerIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "deviceType": {
            "format": "int32",
            "type": "integer"
          },
          "doorName": {
            "nullable": true,
            "type": "string"
          },
          "enableVideoCall": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "image": {
            "nullable": true,
            "type": "string"
          },
          "ipAddress": {
            "nullable": true,
            "type": "string"
          },
          "isTwoPart": {
            "type": "boolean"
          },
          "ledReader0": {
            "nullable": true,
            "type": "integer"
          },
          "ledReader1": {
            "nullable": true,
            "type": "integer"
          },
          "lockOpenDuration": {
            "format": "int32",
            "type": "integer"
          },
          "macAddress": {
            "nullable": true,
            "type": "string"
          },
          "maxOpenDuration": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "mealServiceTimeId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "mprCount": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "mprInterval": {
            "format": "int32",
            "type": "integer"
          },
          "operationType": {
            "type": "integer"
          },
          "passageTimezoneId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "passback": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "roleReader0": {
            "nullable": true,
            "type": "integer"
          },
          "roleReader1": {
            "nullable": true,
            "type": "integer"
          },
          "sensorDuration": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "sensorType": {
            "format": "int32",
            "type": "integer"
          },
          "serverIp": {
            "nullable": true,
            "type": "string"
          },
          "serverPort": {
            "format": "int32",
            "type": "integer"
          },
          "twoPartTimeFrom": {
            "nullable": true,
            "type": "string"
          },
          "twoPartTimeTo": {
            "nullable": true,
            "type": "string"
          },
          "useAlarmRelay": {
            "type": "boolean"
          },
          "useCardReader": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "verifyMode": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DeviceRidModel": {
        "additionalProperties": false,
        "properties": {
          "rid": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceStatus": {
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DoorModel": {
        "additionalProperties": false,
        "properties": {
          "accessTimeId": {
            "format": "int32",
            "type": "integer"
          },
          "doorId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ElevatorFloorModel": {
        "additionalProperties": false,
        "properties": {
          "floorIndex": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ElevatorModel": {
        "additionalProperties": false,
        "properties": {
          "buildingId": {
            "format": "int32",
            "type": "integer"
          },
          "deviceId": {
            "format": "int32",
            "type": "integer"
          },
          "floors": {
            "items": {
              "$ref": "#/components/schemas/ElevatorFloorModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptSettingModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isEnabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EnumModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventMemoModel": {
        "additionalProperties": false,
        "properties": {
          "createdBy": {
            "format": "int32",
            "type": "integer"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "eventLogId": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "updatedBy": {
            "format": "int32",
            "type": "integer"
          },
          "updatedOn": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventRecoveryProgressModel": {
        "additionalProperties": false,
        "properties": {
          "deviceId": {
            "format": "int32",
            "type": "integer"
          },
          "processId": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExpiredPWSettingModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "period": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FaceModel": {
        "additionalProperties": false,
        "properties": {
          "faceCode": {
            "nullable": true,
            "type": "string"
          },
          "faceImage": {
            "nullable": true,
            "type": "string"
          },
          "faceSmallImage": {
            "nullable": true,
            "type": "string"
          },
          "leftIrisCode": {
            "nullable": true,
            "type": "string"
          },
          "leftIrisImage": {
            "nullable": true,
            "type": "string"
          },
          "rightIrisCode": {
            "nullable": true,
            "type": "string"
          },
          "rightIrisImage": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldLayoutRegister": {
        "additionalProperties": false,
        "properties": {
          "fieldRegisterLeft": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "fieldRegisterRight": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "FingerPrintModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "templates": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "FirebaseLoginModel": {
        "additionalProperties": false,
        "properties": {
          "idToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ForgotPasswordModel": {
        "additionalProperties": false,
        "properties": {
          "email": {
            "nullable": true,
            "title": "Email",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GenerateTokenSubDisplayModel": {
        "additionalProperties": false,
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "deviceIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "enableDisplayAbnormalEvent": {
            "type": "boolean"
          },
          "enableDisplayCanteenEvent": {
            "type": "boolean"
          },
          "enableDisplayListVisitor": {
            "type": "boolean"
          },
          "enableIgnoreDuplicatedEvent": {
            "type": "boolean"
          },
          "eventType": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "isCheckTeacherOut": {
            "type": "boolean"
          },
          "isUseDesign": {
            "type": "boolean"
          },
          "locationOriginMonitoring": {
            "nullable": true,
            "type": "string"
          },
          "parentDepartment": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "timeEndCheckIn": {
            "nullable": true,
            "type": "string"
          },
          "timeEndCheckOut": {
            "nullable": true,
            "type": "string"
          },
          "timeReset": {
            "nullable": true,
            "type": "string"
          },
          "timeStartCheckIn": {
            "nullable": true,
            "type": "string"
          },
          "timeStartCheckOut": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetBackVisit": {
        "additionalProperties": false,
        "properties": {
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          },
          "visitIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "GroupDeviceItem": {
        "additionalProperties": false,
        "properties": {
          "deviceIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HVQYRequestEvent": {
        "additionalProperties": false,
        "properties": {
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "loaiDangKi": {
            "format": "int32",
            "type": "integer"
          },
          "maSoHocVien": {
            "nullable": true,
            "type": "string"
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "tuan": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HeaderData": {
        "additionalProperties": false,
        "properties": {
          "headerId": {
            "format": "int32",
            "type": "integer"
          },
          "headerName": {
            "nullable": true,
            "type": "string"
          },
          "headerOrder": {
            "format": "int32",
            "type": "integer"
          },
          "headerVariable": {
            "nullable": true,
            "type": "string"
          },
          "isCategory": {
            "type": "boolean"
          },
          "isVisible": {
            "type": "boolean"
          },
          "pageName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HolidayModel": {
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "endDate": {
            "nullable": true,
            "title": "End date",
            "type": "string"
          },
          "holidayTypeItems": {
            "items": {
              "$ref": "#/components/schemas/EnumModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "name": {
            "nullable": true,
            "title": "Holiday name",
            "type": "string"
          },
          "recursive": {
            "type": "boolean"
          },
          "remarks": {
            "nullable": true,
            "type": "string"
          },
          "startDate": {
            "nullable": true,
            "title": "Start date",
            "type": "string"
          },
          "type": {
            "format": "int32",
            "title": "Holiday type",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HvqyAssignModel": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "nullable": true,
            "type": "string"
          },
          "userCodes": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "HvqyRoomModel": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HvqyScheduleModel": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "timeLine": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HvqyTimeLineModel"
              }
            ]
          }
        },
        "type": "object"
      },
      "HvqyTimeLineItemModel": {
        "additionalProperties": false,
        "properties": {
          "end": {
            "nullable": true,
            "type": "string"
          },
          "roomCode": {
            "nullable": true,
            "type": "string"
          },
          "start": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HvqyTimeLineModel": {
        "additionalProperties": false,
        "properties": {
          "friday": {
            "items": {
              "$ref": "#/components/schemas/HvqyTimeLineItemModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "monday": {
            "items": {
              "$ref": "#/components/schemas/HvqyTimeLineItemModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "saturday": {
            "items": {
              "$ref": "#/components/schemas/HvqyTimeLineItemModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "sunday": {
            "items": {
              "$ref": "#/components/schemas/HvqyTimeLineItemModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "thursday": {
            "items": {
              "$ref": "#/components/schemas/HvqyTimeLineItemModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "tuesday": {
            "items": {
              "$ref": "#/components/schemas/HvqyTimeLineItemModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "wednesday": {
            "items": {
              "$ref": "#/components/schemas/HvqyTimeLineItemModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "ImagePrintCardModel": {
        "additionalProperties": false,
        "properties": {
          "cardBack": {
            "nullable": true,
            "type": "string"
          },
          "cardFont": {
            "nullable": true,
            "type": "string"
          },
          "cardId": {
            "format": "int32",
            "type": "integer"
          },
          "cardLayoutId": {
            "format": "int32",
            "type": "integer"
          },
          "userId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ImportMultiVisitModel": {
        "additionalProperties": false,
        "properties": {
          "accessGroupNames": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "action": {
            "nullable": true,
            "type": "string"
          },
          "barcode": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "validDateFrom": {
            "nullable": true,
            "type": "string"
          },
          "validDateTo": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvitationLinkTemplate": {
        "additionalProperties": false,
        "properties": {
          "bodyTemplate": {
            "nullable": true,
            "type": "string"
          },
          "fieldRegisterLeft": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "fieldRegisterRight": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "fieldRequired": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "labelListField": {
            "nullable": true,
            "type": "string"
          },
          "listFieldsEnable": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IssueCardModel": {
        "additionalProperties": false,
        "properties": {
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "issueCount": {
            "format": "int32",
            "type": "integer"
          },
          "note": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IssuingDeviceModel": {
        "additionalProperties": false,
        "properties": {
          "deviceAddress": {
            "nullable": true,
            "type": "string"
          },
          "devicePort": {
            "format": "int32",
            "type": "integer"
          },
          "deviceType": {
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "ipAddress": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "JitsiTokenModel": {
        "additionalProperties": false,
        "properties": {
          "token": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LanguageDetailModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "tag": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeaveRequestModel": {
        "additionalProperties": false,
        "properties": {
          "endD": {
            "format": "date-time",
            "type": "string"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          },
          "startD": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "userId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LeaveSettingModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "numberDayOffPreviousYear": {
            "format": "int32",
            "type": "integer"
          },
          "numberDayOffYear": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LocalMqttSetting": {
        "additionalProperties": false,
        "properties": {
          "host": {
            "nullable": true,
            "type": "string"
          },
          "password": {
            "nullable": true,
            "type": "string"
          },
          "port": {
            "format": "int32",
            "type": "integer"
          },
          "userName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoginModel": {
        "additionalProperties": false,
        "properties": {
          "enableRemoveOldSession": {
            "type": "boolean"
          },
          "password": {
            "nullable": true,
            "title": "Password",
            "type": "string"
          },
          "username": {
            "nullable": true,
            "title": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoginModelWithCompany": {
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "temporaryToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailTemplateModel": {
        "additionalProperties": false,
        "properties": {
          "body": {
            "nullable": true,
            "type": "string"
          },
          "companyName": {
            "nullable": true,
            "type": "string"
          },
          "createdBy": {
            "format": "int32",
            "type": "integer"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "detailVariables": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isEnable": {
            "type": "boolean"
          },
          "subject": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "updatedBy": {
            "format": "int32",
            "type": "integer"
          },
          "updatedOn": {
            "format": "date-time",
            "type": "string"
          },
          "variables": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MealDayDetail": {
        "additionalProperties": false,
        "properties": {
          "cornerId": {
            "format": "int32",
            "type": "integer"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "mealTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "to": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MealEventLogAddModel": {
        "additionalProperties": false,
        "properties": {
          "doorName": {
            "nullable": true,
            "type": "string"
          },
          "eventTime": {
            "format": "date-time",
            "type": "string"
          },
          "icuId": {
            "format": "int32",
            "type": "integer"
          },
          "mealCode": {
            "format": "int32",
            "type": "integer"
          },
          "mealType": {
            "nullable": true,
            "type": "string"
          },
          "userId": {
            "format": "int32",
            "type": "integer"
          },
          "userName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MealEventLogUpdateModel": {
        "additionalProperties": false,
        "properties": {
          "amount": {
            "format": "decimal",
            "type": "number"
          },
          "doorName": {
            "nullable": true,
            "type": "string"
          },
          "eventLogId": {
            "format": "int32",
            "type": "integer"
          },
          "eventTime": {
            "format": "date-time",
            "type": "string"
          },
          "icuId": {
            "format": "int32",
            "type": "integer"
          },
          "mealCode": {
            "format": "int32",
            "type": "integer"
          },
          "mealEventLogId": {
            "format": "int32",
            "type": "integer"
          },
          "mealType": {
            "nullable": true,
            "type": "string"
          },
          "userId": {
            "format": "int32",
            "type": "integer"
          },
          "userName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MealServiceTimeModel": {
        "additionalProperties": false,
        "properties": {
          "createdBy": {
            "format": "int32",
            "type": "integer"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "friday": {
            "items": {
              "$ref": "#/components/schemas/MealDayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "monday": {
            "items": {
              "$ref": "#/components/schemas/MealDayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "remarks": {
            "nullable": true,
            "type": "string"
          },
          "saturday": {
            "items": {
              "$ref": "#/components/schemas/MealDayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "sunday": {
            "items": {
              "$ref": "#/components/schemas/MealDayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "thursday": {
            "items": {
              "$ref": "#/components/schemas/MealDayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "tuesday": {
            "items": {
              "$ref": "#/components/schemas/MealDayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "updatedBy": {
            "format": "int32",
            "type": "integer"
          },
          "updatedOn": {
            "format": "date-time",
            "type": "string"
          },
          "wednesday": {
            "items": {
              "$ref": "#/components/schemas/MealDayDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "MealTypeModel": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "popUpMessage": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MeetingModel": {
        "additionalProperties": false,
        "properties": {
          "endTime": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "invitationLinkTemplate": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/InvitationLinkTemplate"
              }
            ]
          },
          "limitAttendance": {
            "format": "int32",
            "type": "integer"
          },
          "meetingRoomId": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "startTime": {
            "nullable": true,
            "type": "string"
          },
          "timeoutAllowed": {
            "format": "int32",
            "type": "integer"
          },
          "useAlarm": {
            "type": "boolean"
          },
          "userIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "visitIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "MeetingRoomModel": {
        "additionalProperties": false,
        "properties": {
          "doorIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "image": {
            "nullable": true,
            "type": "string"
          },
          "roomName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultipleVisitorCardModel": {
        "additionalProperties": false,
        "properties": {
          "cardModel": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardModel"
              }
            ]
          },
          "id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NationalIdCardModel": {
        "additionalProperties": false,
        "properties": {
          "address": {
            "nullable": true,
            "type": "string"
          },
          "avatar": {
            "nullable": true,
            "type": "string"
          },
          "cccd": {
            "nullable": true,
            "type": "string"
          },
          "cmnd": {
            "nullable": true,
            "type": "string"
          },
          "dateOfBirth": {
            "nullable": true,
            "type": "string"
          },
          "district": {
            "nullable": true,
            "type": "string"
          },
          "expiredDate": {
            "nullable": true,
            "type": "string"
          },
          "fatherName": {
            "nullable": true,
            "type": "string"
          },
          "fullName": {
            "nullable": true,
            "type": "string"
          },
          "husbandOrWifeName": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "identityCharacter": {
            "nullable": true,
            "type": "string"
          },
          "issueDate": {
            "nullable": true,
            "type": "string"
          },
          "motherName": {
            "nullable": true,
            "type": "string"
          },
          "nation": {
            "nullable": true,
            "type": "string"
          },
          "nationality": {
            "nullable": true,
            "type": "string"
          },
          "religion": {
            "nullable": true,
            "type": "string"
          },
          "sex": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NoteTransaction": {
        "additionalProperties": false,
        "properties": {
          "userName": {
            "nullable": true,
            "type": "string"
          },
          "visitorName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationNoticeModel": {
        "additionalProperties": false,
        "properties": {
          "content": {
            "nullable": true,
            "type": "string"
          },
          "userIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "NotificationUpdate": {
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "OcrImageModel": {
        "additionalProperties": false,
        "properties": {
          "backImage": {
            "nullable": true,
            "type": "string"
          },
          "companyCode": {
            "nullable": true,
            "type": "string"
          },
          "frontImage": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartTimeModel": {
        "additionalProperties": false,
        "properties": {
          "accountHolder": {
            "nullable": true,
            "type": "string"
          },
          "accountNumber": {
            "nullable": true,
            "type": "string"
          },
          "bank": {
            "nullable": true,
            "type": "string"
          },
          "contact": {
            "nullable": true,
            "type": "string"
          },
          "hourlyWage": {
            "format": "int32",
            "type": "integer"
          },
          "userId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PermissionGroupModel": {
        "additionalProperties": false,
        "properties": {
          "groupName": {
            "nullable": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/PermissionModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "title": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PermissionModel": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "permissionName": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PersonCardTypeModel": {
        "additionalProperties": false,
        "properties": {
          "classificationId": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PersonalVehicleModel": {
        "additionalProperties": false,
        "properties": {
          "color": {
            "nullable": true,
            "type": "string"
          },
          "departmentName": {
            "nullable": true,
            "type": "string"
          },
          "existBlackBox": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isAllowed": {
            "type": "boolean"
          },
          "model": {
            "nullable": true,
            "type": "string"
          },
          "plateNumber": {
            "nullable": true,
            "type": "string"
          },
          "userName": {
            "nullable": true,
            "type": "string"
          },
          "vehicleName": {
            "nullable": true,
            "type": "string"
          },
          "vehicleRule": {
            "format": "int32",
            "type": "integer"
          },
          "vehicleRuleOption": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PinPadModel": {
        "additionalProperties": false,
        "properties": {
          "endDate": {
            "nullable": true,
            "type": "string"
          },
          "pinNumber": {
            "nullable": true,
            "type": "string"
          },
          "startDate": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlugIns": {
        "additionalProperties": false,
        "properties": {
          "accessControl": {
            "type": "boolean"
          },
          "armyManagement": {
            "type": "boolean"
          },
          "cameraPlugIn": {
            "type": "boolean"
          },
          "cameraPlugIn2": {
            "type": "boolean"
          },
          "canteenManagement": {
            "type": "boolean"
          },
          "cardIssuing": {
            "type": "boolean"
          },
          "common": {
            "type": "boolean"
          },
          "covid19": {
            "type": "boolean"
          },
          "customizeLanguage": {
            "type": "boolean"
          },
          "departmentAccessLevel": {
            "type": "boolean"
          },
          "deptAcGrpConn": {
            "type": "boolean"
          },
          "elevator": {
            "type": "boolean"
          },
          "eventManagement": {
            "type": "boolean"
          },
          "faceRecognition": {
            "type": "boolean"
          },
          "kakao": {
            "type": "boolean"
          },
          "libraryManagement": {
            "type": "boolean"
          },
          "passCode": {
            "type": "boolean"
          },
          "qrCode": {
            "type": "boolean"
          },
          "screenMessage": {
            "type": "boolean"
          },
          "timeAttendance": {
            "type": "boolean"
          },
          "unKnownPersonManagement": {
            "type": "boolean"
          },
          "vehiclePlugIn": {
            "type": "boolean"
          },
          "vein": {
            "type": "boolean"
          },
          "videoDoorbell": {
            "type": "boolean"
          },
          "visitManagement": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PointCredit": {
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "note": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoteTransaction"
              }
            ]
          },
          "point": {
            "format": "double",
            "type": "number"
          },
          "type": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReaderModel": {
        "additionalProperties": false,
        "properties": {
          "deviceAddress": {
            "nullable": true,
            "type": "string"
          },
          "deviceName": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RegisterUserModel": {
        "additionalProperties": false,
        "properties": {
          "address": {
            "nullable": true,
            "type": "string"
          },
          "approverId": {
            "format": "int32",
            "type": "integer"
          },
          "avatar": {
            "nullable": true,
            "type": "string"
          },
          "birthDay": {
            "format": "date-time",
            "type": "string"
          },
          "city": {
            "nullable": true,
            "type": "string"
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "expiredDate": {
            "format": "date-time",
            "type": "string"
          },
          "firstName": {
            "nullable": true,
            "type": "string"
          },
          "gender": {
            "type": "boolean"
          },
          "homePhone": {
            "nullable": true,
            "type": "string"
          },
          "nationalIdNumber": {
            "nullable": true,
            "type": "string"
          },
          "nationality": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "officePhone": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "nullable": true,
            "type": "string"
          },
          "postCode": {
            "nullable": true,
            "type": "string"
          },
          "workType": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RegistrationPersonAccessModel": {
        "additionalProperties": false,
        "properties": {
          "buildingId": {
            "format": "int32",
            "type": "integer"
          },
          "inTime": {
            "format": "date-time",
            "type": "string"
          },
          "militaryNumber": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "outTime": {
            "format": "date-time",
            "type": "string"
          },
          "position": {
            "nullable": true,
            "type": "string"
          },
          "purpose": {
            "nullable": true,
            "type": "string"
          },
          "remark": {
            "nullable": true,
            "type": "string"
          },
          "workType": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RegistrationVehicleAccessModel": {
        "additionalProperties": false,
        "properties": {
          "buildingId": {
            "format": "int32",
            "type": "integer"
          },
          "inTime": {
            "format": "date-time",
            "type": "string"
          },
          "militaryNumber": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "outTime": {
            "format": "date-time",
            "type": "string"
          },
          "plateNumber": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "nullable": true,
            "type": "string"
          },
          "purpose": {
            "nullable": true,
            "type": "string"
          },
          "remark": {
            "nullable": true,
            "type": "string"
          },
          "vehicleColor": {
            "nullable": true,
            "type": "string"
          },
          "vehicleModel": {
            "nullable": true,
            "type": "string"
          },
          "vehicleType": {
            "format": "int32",
            "type": "integer"
          },
          "workType": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReinstallDeviceDetail": {
        "additionalProperties": false,
        "properties": {
          "deviceId": {
            "format": "int32",
            "type": "integer"
          },
          "processId": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RejectedModel": {
        "additionalProperties": false,
        "properties": {
          "reason": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseCardModel": {
        "additionalProperties": false,
        "properties": {
          "note": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportProblemModel": {
        "additionalProperties": false,
        "properties": {
          "cameraId": {
            "nullable": true,
            "type": "string"
          },
          "detail": {
            "nullable": true,
            "type": "string"
          },
          "deviceAddress": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ResetPasswordModel": {
        "additionalProperties": false,
        "properties": {
          "confirmNewPassword": {
            "nullable": true,
            "title": "Confirm New Password",
            "type": "string"
          },
          "newPassword": {
            "nullable": true,
            "title": "New Password",
            "type": "string"
          },
          "token": {
            "nullable": true,
            "title": "Token",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleModel": {
        "additionalProperties": false,
        "properties": {
          "enableDepartmentLevel": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isDefault": {
            "type": "boolean"
          },
          "permissionGroups": {
            "items": {
              "$ref": "#/components/schemas/PermissionGroupModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "roleName": {
            "nullable": true,
            "type": "string"
          },
          "roleSettingDefault": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SettingModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "SettingRecheckAttendance": {
        "additionalProperties": false,
        "properties": {
          "timeRecheckAttendance": {
            "format": "int32",
            "type": "integer"
          },
          "updateAttendanceRealTime": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SscLoginModel": {
        "additionalProperties": false,
        "properties": {
          "accessToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SscRequestSyncStudentCheckInManual": {
        "additionalProperties": false,
        "properties": {
          "partnerId": {
            "nullable": true,
            "type": "string"
          },
          "requestId": {
            "nullable": true,
            "type": "string"
          },
          "rollCallDay": {
            "nullable": true,
            "type": "string"
          },
          "schoolCode": {
            "nullable": true,
            "type": "string"
          },
          "signature": {
            "nullable": true,
            "type": "string"
          },
          "studentCodes": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SymptomDetail": {
        "additionalProperties": false,
        "properties": {
          "field": {
            "nullable": true,
            "type": "string"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "symptom": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true
          }
        },
        "type": "object"
      },
      "TimeformatTypeModel": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransmitDataModel": {
        "additionalProperties": false,
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/ReinstallDeviceDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "isAllDevice": {
            "type": "boolean"
          },
          "isDeleteAllUser": {
            "type": "boolean"
          },
          "transmitIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "userIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "UnitVehicleModel": {
        "additionalProperties": false,
        "properties": {
          "color": {
            "nullable": true,
            "type": "string"
          },
          "departmentId": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "model": {
            "nullable": true,
            "type": "string"
          },
          "plateNumber": {
            "nullable": true,
            "type": "string"
          },
          "purpose": {
            "nullable": true,
            "type": "string"
          },
          "registerClassificationId": {
            "format": "int32",
            "type": "integer"
          },
          "rfid": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "vehicleName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateImageMultiModeModel": {
        "additionalProperties": false,
        "properties": {
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "cardType": {
            "format": "int32",
            "type": "integer"
          },
          "image": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UploadImageEventModel": {
        "additionalProperties": false,
        "properties": {
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "cardRequestList": {
            "items": {
              "$ref": "#/components/schemas/UpdateImageMultiModeModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "eventTime": {
            "nullable": true,
            "type": "string"
          },
          "hash": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "image": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UploadImageVisitCheckinModel": {
        "additionalProperties": false,
        "properties": {
          "hash": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": true,
            "type": "string"
          },
          "image": {
            "nullable": true,
            "type": "string"
          },
          "visitId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UseCreditModel": {
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "isUsed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserGetConditionModel": {
        "additionalProperties": false,
        "properties": {
          "cardIds": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "userCodes": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      },
      "UserHVQYModel": {
        "additionalProperties": false,
        "properties": {
          "cccd": {
            "nullable": true,
            "type": "string"
          },
          "khoa": {
            "type": "boolean"
          },
          "loaiDangKi": {
            "format": "int32",
            "type": "integer"
          },
          "lyDo": {
            "nullable": true,
            "type": "string"
          },
          "maSoHocVien": {
            "nullable": true,
            "type": "string"
          },
          "maVaoRa": {
            "format": "int32",
            "type": "integer"
          },
          "ngay": {
            "format": "date-time",
            "type": "string"
          },
          "noiDangKi": {
            "nullable": true,
            "type": "string"
          },
          "tuan": {
            "format": "int32",
            "type": "integer"
          },
          "vaoMuon": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserModel": {
        "additionalProperties": false,
        "properties": {
          "accessGroupId": {
            "format": "int32",
            "type": "integer"
          },
          "address": {
            "nullable": true,
            "type": "string"
          },
          "applyReason": {
            "nullable": true,
            "type": "string"
          },
          "approvalStatus": {
            "format": "int32",
            "type": "integer"
          },
          "approverId1": {
            "format": "int32",
            "type": "integer"
          },
          "approverId2": {
            "format": "int32",
            "type": "integer"
          },
          "avatar": {
            "nullable": true,
            "type": "string"
          },
          "birthDay": {
            "nullable": true,
            "type": "string"
          },
          "cardList": {
            "items": {
              "$ref": "#/components/schemas/CardModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "cardType": {
            "type": "integer"
          },
          "categoryOptionIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "city": {
            "nullable": true,
            "type": "string"
          },
          "departmentId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "departmentName": {
            "nullable": true,
            "type": "string"
          },
          "departmentNo": {
            "nullable": true,
            "type": "string"
          },
          "doorList": {
            "items": {
              "$ref": "#/components/schemas/DoorModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "effectiveDate": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "employeeNumber": {
            "nullable": true,
            "type": "string"
          },
          "expiredDate": {
            "nullable": true,
            "type": "string"
          },
          "firstName": {
            "nullable": true,
            "type": "string"
          },
          "gender": {
            "type": "boolean"
          },
          "homePhone": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isMasterCard": {
            "type": "boolean"
          },
          "nationalIdCard": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NationalIdCardModel"
              }
            ]
          },
          "nationalIdNumber": {
            "nullable": true,
            "type": "string"
          },
          "nationality": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "officePhone": {
            "nullable": true,
            "type": "string"
          },
          "password": {
            "nullable": true,
            "type": "string"
          },
          "passwordCheck": {
            "nullable": true,
            "type": "string"
          },
          "permissionType": {
            "format": "int32",
            "type": "integer"
          },
          "position": {
            "nullable": true,
            "type": "string"
          },
          "postCode": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "userCode": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "nullable": true,
            "type": "string"
          },
          "workType": {
            "type": "integer"
          },
          "workingTypeId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VehicleAllocationModel": {
        "additionalProperties": false,
        "properties": {
          "destination": {
            "nullable": true,
            "type": "string"
          },
          "dispatchType": {
            "nullable": true,
            "type": "string"
          },
          "driverIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "managerId": {
            "format": "int32",
            "type": "integer"
          },
          "purpose": {
            "nullable": true,
            "type": "string"
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "supportType": {
            "nullable": true,
            "type": "string"
          },
          "unitVehicleId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VerifyLicenseModel": {
        "additionalProperties": false,
        "properties": {
          "licenseKey": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VisitCardReturnModel": {
        "additionalProperties": false,
        "properties": {
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          },
          "visitId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VisitEmailInvite": {
        "additionalProperties": false,
        "properties": {
          "emails": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "link": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VisitModel": {
        "additionalProperties": false,
        "properties": {
          "accessGroupId": {
            "format": "int32",
            "type": "integer"
          },
          "address": {
            "nullable": true,
            "type": "string"
          },
          "allowedBelonging": {
            "nullable": true,
            "type": "string"
          },
          "approverId": {
            "format": "int32",
            "type": "integer"
          },
          "approverId1": {
            "format": "int32",
            "type": "integer"
          },
          "approverId2": {
            "format": "int32",
            "type": "integer"
          },
          "avatar": {
            "nullable": true,
            "type": "string"
          },
          "birthDay": {
            "nullable": true,
            "type": "string"
          },
          "buildingAddress": {
            "nullable": true,
            "type": "string"
          },
          "buildingName": {
            "nullable": true,
            "type": "string"
          },
          "cardId": {
            "nullable": true,
            "type": "string"
          },
          "cardList": {
            "items": {
              "$ref": "#/components/schemas/CardModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "cardStatus": {
            "type": "integer"
          },
          "covid19": {
            "items": {
              "$ref": "#/components/schemas/SymptomDetail"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "createdBy": {
            "format": "int32",
            "type": "integer"
          },
          "dateIssueIdNumber": {
            "format": "date-time",
            "type": "string"
          },
          "doors": {
            "nullable": true,
            "type": "string"
          },
          "dynamicQrCode": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "endDate": {
            "nullable": true,
            "type": "string"
          },
          "floors": {
            "nullable": true,
            "type": "string"
          },
          "gReCaptchaResponse": {
            "nullable": true,
            "type": "string"
          },
          "gender": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "imageCardIdBack": {
            "nullable": true,
            "type": "string"
          },
          "imageCardIdFont": {
            "nullable": true,
            "type": "string"
          },
          "invitePhone": {
            "nullable": true,
            "type": "string"
          },
          "isDecision": {
            "type": "boolean"
          },
          "leaderId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "leaderName": {
            "nullable": true,
            "type": "string"
          },
          "nationalIdCard": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NationalIdCardModel"
              }
            ]
          },
          "nationalIdNumber": {
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          },
          "placeIssueIdNumber": {
            "nullable": true,
            "type": "string"
          },
          "position": {
            "nullable": true,
            "type": "string"
          },
          "processStatus": {
            "nullable": true,
            "type": "string"
          },
          "roomDoorCode": {
            "nullable": true,
            "type": "string"
          },
          "roomNumber": {
            "nullable": true,
            "type": "string"
          },
          "sizeRotateAvatar": {
            "format": "int32",
            "type": "integer"
          },
          "startDate": {
            "nullable": true,
            "type": "string"
          },
          "statusCode": {
            "format": "int32",
            "type": "integer"
          },
          "unitName": {
            "nullable": true,
            "type": "string"
          },
          "visitPlace": {
            "nullable": true,
            "type": "string"
          },
          "visitReason": {
            "nullable": true,
            "type": "string"
          },
          "visitType": {
            "format": "int32",
            "type": "integer"
          },
          "visiteeAvatar": {
            "nullable": true,
            "type": "string"
          },
          "visiteeDepartment": {
            "nullable": true,
            "type": "string"
          },
          "visiteeDepartmentId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "visiteeEmail": {
            "nullable": true,
            "type": "string"
          },
          "visiteeEmpNumber": {
            "nullable": true,
            "type": "string"
          },
          "visiteeId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "visiteeName": {
            "nullable": true,
            "type": "string"
          },
          "visiteePhone": {
            "nullable": true,
            "type": "string"
          },
          "visiteeSite": {
            "nullable": true,
            "type": "string"
          },
          "visitorDepartment": {
            "nullable": true,
            "type": "string"
          },
          "visitorEmpNumber": {
            "nullable": true,
            "type": "string"
          },
          "visitorName": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VisitSettingModel": {
        "additionalProperties": false,
        "properties": {
          "accessGroupId": {
            "format": "int32",
            "type": "integer"
          },
          "accessTimeId": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "allLocationWarning": {
            "nullable": true,
            "type": "string"
          },
          "allowDeleteRecord": {
            "type": "boolean"
          },
          "allowEditRecord": {
            "type": "boolean"
          },
          "allowEmployeeInvite": {
            "type": "boolean"
          },
          "allowGetUserTarget": {
            "type": "boolean"
          },
          "allowSelectDoorWhenCreateNew": {
            "type": "boolean"
          },
          "allowSendKakao": {
            "type": "boolean"
          },
          "approvalStepNumber": {
            "format": "int32",
            "type": "integer"
          },
          "defaultDoors": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "deviceIdCheckIn": {
            "format": "int32",
            "type": "integer"
          },
          "enableAutoApproval": {
            "type": "boolean"
          },
          "enableCaptCha": {
            "type": "boolean"
          },
          "fieldRequired": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "firstApproverAccounts": {
            "nullable": true,
            "type": "string"
          },
          "groupDevices": {
            "items": {
              "$ref": "#/components/schemas/GroupDeviceItem"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          },
          "insiderAutoApproved": {
            "type": "boolean"
          },
          "listFieldsEnable": {
            "additionalProperties": {
              "type": "boolean"
            },
            "nullable": true,
            "type": "object"
          },
          "listVisitPurpose": {
            "nullable": true,
            "type": "string"
          },
          "onlyAccessSingleBuilding": {
            "type": "boolean"
          },
          "outSide": {
            "type": "boolean"
          },
          "personalInvitationLink": {
            "nullable": true,
            "type": "string"
          },
          "secondsApproverAccounts": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VisitWebhookData": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "nullable": true,
            "type": "string"
          },
          "token": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkingModel": {
        "additionalProperties": false,
        "properties": {
          "checkClockOut": {
            "type": "boolean"
          },
          "checkLunchTime": {
            "type": "boolean"
          },
          "companyId": {
            "format": "int32",
            "type": "integer"
          },
          "isDefault": {
            "type": "boolean"
          },
          "lunchTime": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "useClockOutDevice": {
            "type": "boolean"
          },
          "workingDay": {
            "nullable": true,
            "type": "string"
          },
          "workingHourType": {
            "format": "int32",
            "type": "integer"
          },
          "workingHourTypeItems": {
            "items": {
              "$ref": "#/components/schemas/EnumModel"
            },
            "nullable": true,
            "type": "array",
            "maxItems": 1000
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "Swagger aides in development across the entire API lifecycle, from design and documentation, to test and deployment.",
    "title": "DeMasterPro services - DeMasterPro HTTP API",
    "version": "v1"
  },
  "openapi": "3.0.0",
  "paths": {
    "/access-groups": {
      "delete": {
        "operationId": "AccessGroup_DeleteMultiple",
        "parameters": [
          {
            "description": "list ids of access group",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Delete list access group success"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete list access group",
        "tags": [
          "AccessGroup"
        ]
      },
      "get": {
        "operationId": "AccessGroup_Gets",
        "parameters": [
          {
            "description": "Query string that filter Access Group by Name.",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all access group with pagination",
        "tags": [
          "AccessGroup"
        ]
      },
      "post": {
        "operationId": "AccessGroup_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupModel"
              }
            }
          },
          "description": "JSON model for Access Group",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new access group",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/access-times": {
      "post": {
        "operationId": "AccessGroup_AddAccessGroupByAccessTimeName",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "accessTimeNames",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add access group -> assign door with access time names (apply to HVQY)",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/all/unassign-doors": {
      "delete": {
        "operationId": "AccessGroup_RemoveDeviceFromAllAccessGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "doorIds",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete devices from all access groups",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}": {
      "delete": {
        "operationId": "AccessGroup_Delete",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Delete a access group success"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a access group",
        "tags": [
          "AccessGroup"
        ]
      },
      "get": {
        "operationId": "AccessGroup_Get",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a access group by id",
        "tags": [
          "AccessGroup"
        ]
      },
      "put": {
        "operationId": "AccessGroup_Edit",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupModel"
              }
            }
          },
          "description": "JSON model for Access Group",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit a access group",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/all-doors-visits": {
      "get": {
        "operationId": "AccessGroup_GetUnAssignDoorsForVisit",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Doors by Building Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "If using onlyDefaultDoor = true, list device response: default door config page visit setting",
            "in": "query",
            "name": "onlyDefaultDoor",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of all doors by accessGroupId for visit",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/assign-departments": {
      "post": {
        "operationId": "AccessGroup_AssignDeptToAG",
        "parameters": [
          {
            "description": "accessGroup id to be assigned ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "list of department id ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign departments to accessGroup",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/assign-doors": {
      "post": {
        "operationId": "AccessGroup_AssignDoors",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupAssignDoor"
              }
            }
          },
          "description": "JSON model for (doorId, timezoneId and companyId)",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign doors to an access group",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/assign-users": {
      "post": {
        "operationId": "AccessGroup_AssignUsers",
        "parameters": [
          {
            "description": "Access group identifier. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of identifiers for the users. ",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign users to an access group",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/change-timezone": {
      "put": {
        "operationId": "AccessGroup_ChangeTimezone",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupAssignDoorDetail"
              }
            }
          },
          "description": "JSON model for (doorId, tzId and companyId)",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Change timezone for the door in the access group",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/departments": {
      "get": {
        "operationId": "AccessGroup_GetDepartmentAccessGroupInfo",
        "parameters": [
          {
            "description": "identifier of accessGroup ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "text filter to search ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "a page number ",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "size of page ",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "column to sort ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "departmentName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "sorting direction ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of department that is connected with accessGroup has id value as 'id'.",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/doors": {
      "get": {
        "operationId": "AccessGroup_GetAssignDoors",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Doors by Device Address, Name, Timezone or Building",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "explode": true,
            "in": "query",
            "name": "operationType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of doors with access group by id",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/unassign-departments": {
      "get": {
        "operationId": "AccessGroup_GetUnssignedDeptInAG",
        "parameters": [
          {
            "description": "accessGroup id to be unassigned ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "text filter to search ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "a page number ",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "size of page ",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "column to sort ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "departmentName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "sorting direction ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get unassigned department list.",
        "tags": [
          "AccessGroup"
        ]
      },
      "post": {
        "operationId": "AccessGroup_UnssignDeptToAG",
        "parameters": [
          {
            "description": "accessGroup id to be unassigned ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "list of department id ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Unssign departments from accessGroup. The department's user will be moved to default accessGroup.",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/unassign-doors": {
      "delete": {
        "operationId": "AccessGroup_UnAssignDoors",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of ids with doors",
          "required": true,
          "x-name": "doorIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Remove doors from an access group",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/unassign-users": {
      "delete": {
        "operationId": "AccessGroup_UnAssignUsers",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of ids with users",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Remove users from an access group",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/unassigned-doors": {
      "get": {
        "operationId": "AccessGroup_GetUnAssignDoors",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Doors by Device Address, Name or Building",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "explode": true,
            "in": "query",
            "name": "operationType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of doors unassigned with access group by id",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/unassigned-users": {
      "get": {
        "operationId": "AccessGroup_GetUnAssignUsers",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Users by UserName, Department Name or Access Group Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of all users unassigned with access group by id",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-groups/{id}/users": {
      "get": {
        "operationId": "AccessGroup_GetAssignUsers",
        "parameters": [
          {
            "description": "Access Group Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Users by UserName, Department Name or CardId",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of all users with access group by id",
        "tags": [
          "AccessGroup"
        ]
      }
    },
    "/access-times": {
      "delete": {
        "operationId": "AccessTime_DeleteMultiple",
        "parameters": [
          {
            "description": "list of timezone ids to delete",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Timezone multiple delete",
        "tags": [
          "AccessTime"
        ]
      },
      "get": {
        "operationId": "AccessTime_Gets",
        "parameters": [
          {
            "description": "Query string that filter Access Group by AccessTime or Remark.",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all Timezones with pagination",
        "tags": [
          "AccessTime"
        ]
      },
      "post": {
        "operationId": "AccessTime_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTimeModel"
              }
            }
          },
          "description": "JSON model for Timezone (from-to are installed by minute). Ex: 0h00 - 23h59m --> from 0 - to 1439",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a new timezone",
        "tags": [
          "AccessTime"
        ]
      }
    },
    "/access-times-hvqy": {
      "post": {
        "operationId": "AccessTime_AddAccessTimeHvqy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTimeModel"
              }
            }
          },
          "description": "JSON model for Timezone (from-to are installed by minute). Ex: 0h00 - 23h59m --> from 0 - to 1439",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a new access time for hvqy",
        "tags": [
          "AccessTime"
        ]
      }
    },
    "/access-times/{id}": {
      "delete": {
        "operationId": "AccessTime_Delete",
        "parameters": [
          {
            "description": "timezone id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete timezone",
        "tags": [
          "AccessTime"
        ]
      },
      "get": {
        "operationId": "AccessTime_Get",
        "parameters": [
          {
            "description": "Timezone id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detail timezone by id",
        "tags": [
          "AccessTime"
        ]
      },
      "put": {
        "operationId": "AccessTime_Edit",
        "parameters": [
          {
            "description": "timezone id to edit",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTimeModel"
              }
            }
          },
          "description": "JSON model for Timezone (from-to are installed by minute). Ex: 0h00 - 23h59m --> from 0 - to 1439",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit timezone",
        "tags": [
          "AccessTime"
        ]
      }
    },
    "/accounts": {
      "delete": {
        "operationId": "Account_DeleteMultiple",
        "parameters": [
          {
            "description": "List of account ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multiple accounts.",
        "tags": [
          "Account"
        ]
      },
      "get": {
        "operationId": "Account_Gets",
        "parameters": [
          {
            "description": "Query string that filter by username or email",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "List of company ids",
            "explode": true,
            "in": "query",
            "name": "companyIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "Ignore list account approval of visit setting",
            "in": "query",
            "name": "ignoreApprovalVisit",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of Accounts with pagination",
        "tags": [
          "Account"
        ]
      },
      "post": {
        "operationId": "Account_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountModel"
              }
            }
          },
          "description": "JSON model for Account",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a account.",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts-profile": {
      "get": {
        "operationId": "Account_GetProfile",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Account profile information",
        "tags": [
          "Account"
        ]
      },
      "put": {
        "operationId": "Account_EditProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit the account profile information.",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/access-approval": {
      "get": {
        "operationId": "Account_GetAccessApprovalAccounts",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get access approval accounts",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/approval": {
      "get": {
        "operationId": "Account_GetApprovalAccounts",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get approval accounts",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/avatar": {
      "get": {
        "operationId": "Account_GetAvatar",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get avatar for user",
        "tags": [
          "Account"
        ]
      },
      "put": {
        "operationId": "Account_UploadAvatar",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAvatarModel"
              }
            }
          },
          "description": "Object model json include avatar",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update image for user",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/change-password": {
      "post": {
        "operationId": "Account_ChangePasswordLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Change password",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/change-password-no-login": {
      "post": {
        "operationId": "Account_ChangePasswordWithoutLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Change password",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/forgot-password": {
      "post": {
        "operationId": "Account_ForgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordModel"
              }
            }
          },
          "description": "JSON model for string of email login",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "When forgot password",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/get-preferred-system": {
      "get": {
        "operationId": "Account_GetPreferredSystem",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get preferred system options",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/get-timezone-by-standard": {
      "get": {
        "operationId": "Account_GetListTimeZone",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get time zone",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/get-token": {
      "post": {
        "operationId": "Account_GetTokenWithAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGetTokenModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get token with username (military number)",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/last-login": {
      "get": {
        "operationId": "Account_GetLastLogin",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get last login of account",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/primary": {
      "get": {
        "operationId": "Account_GetPrimaryAccounts",
        "parameters": [
          {
            "description": "Query string that filter Account by Username(email).",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The primary accounts. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "gets primary accounts.",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/reset-password": {
      "post": {
        "operationId": "Account_ResetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordModel"
              }
            }
          },
          "description": "JSON model for object(new password, confirm new password and token string)",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Reset password",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/reset-timezone": {
      "post": {
        "operationId": "Account_ResetDefaultTimezone",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reset default time zone for user company",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/root": {
      "put": {
        "operationId": "Account_SetRootAccount",
        "parameters": [
          {
            "description": "account's name ",
            "in": "query",
            "name": "username",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "isRoot",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set the account as root account.",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/token-info": {
      "put": {
        "operationId": "Account_UpdateDeviceToken",
        "parameters": [
          {
            "in": "query",
            "name": "deviceToken",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update device token (firebase)",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/type": {
      "get": {
        "operationId": "Account_GetAccountType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get account type",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/update-timezone": {
      "patch": {
        "operationId": "Account_UpdateTimeZone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTimeZoneModel"
              }
            }
          },
          "description": "JSON model for timezone string",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updated Time Zone for User preferences page",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/user/approval": {
      "get": {
        "operationId": "Account_GetUserApprovalAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Email",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of accounts that have permission to approve user.",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/visit/approval": {
      "get": {
        "operationId": "Account_GetVisitApprovalAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Email",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of accounts that have permission to approve visitor.",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/waiting-for-review": {
      "get": {
        "operationId": "Account_GetCountReviewWithAccount",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get count visit, user waiting for review",
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts/{id}": {
      "delete": {
        "operationId": "Account_Delete",
        "parameters": [
          {
            "description": "Account identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a account.",
        "tags": [
          "Account"
        ]
      },
      "get": {
        "operationId": "Account_Get",
        "parameters": [
          {
            "description": "an identifier of company account ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Account (or company account) information",
        "tags": [
          "Account"
        ]
      },
      "put": {
        "operationId": "Account_Edit",
        "parameters": [
          {
            "description": "identifier of companyAccount ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountModel"
              }
            }
          },
          "description": "JSON model for company account",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit the account information.",
        "tags": [
          "Account"
        ]
      }
    },
    "/add/eventlog": {
      "get": {
        "operationId": "EventLog_GetEventLogNotUploaded",
        "parameters": [
          {
            "in": "query",
            "name": "size",
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get event log for ADD data sync",
        "tags": [
          "EventLog"
        ]
      },
      "put": {
        "operationId": "EventLog_EditEventLogNotUploaded",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit event log for ADD data sync (index : 0 to 1)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/army-users/{id}/identification": {
      "post": {
        "operationId": "User_AddNewIdentification2",
        "parameters": [
          {
            "description": "exist user Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardModel"
              }
            }
          },
          "description": "card model",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a new identification to exist user",
        "tags": [
          "User"
        ]
      }
    },
    "/army/person-type": {
      "get": {
        "operationId": "CodeManagement_GetArmyEnumPersonType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "[TEMP]: Get list enum person type user, visitor",
        "tags": [
          "CodeManagement"
        ]
      }
    },
    "/assign-access-times-hvqy": {
      "post": {
        "operationId": "AccessTime_AssignAccessTimeHvqy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignAccessTime"
              }
            }
          },
          "description": "JSON model for Timezone (from-to are installed by minute). Ex: 0h00 - 23h59m --> from 0 - to 1439",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign a access time for user",
        "tags": [
          "AccessTime"
        ]
      }
    },
    "/assign/user/working-time/default": {
      "patch": {
        "operationId": "User_AssignUserToDefaultWorkingTime",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign User to Default working time",
        "tags": [
          "User"
        ]
      }
    },
    "/attendances": {
      "get": {
        "operationId": "Attendance_Get",
        "parameters": [
          {
            "description": "Query string that filter Attendance by Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Id of department",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Type of Attendance",
            "in": "query",
            "name": "attendanceType",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "String of Timezone",
            "in": "query",
            "name": "timezone",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "String time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 8
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "UserId: Id of user",
            "in": "query",
            "name": "userId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Attendance of Users with company",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/export": {
      "get": {
        "operationId": "Attendance_Export",
        "parameters": [
          {
            "description": "Query string that filter Attendance by Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Id of department",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Type of Attendance",
            "in": "query",
            "name": "attendanceType",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "String time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "String time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "type of file download",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Type Report",
            "in": "query",
            "name": "typeReport",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "export Attendance to excel",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/export/types": {
      "get": {
        "operationId": "Attendance_GetListTypesReport",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list type report attendance",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/init": {
      "get": {
        "operationId": "Attendance_GetInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init page attendances management",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/leave-init": {
      "get": {
        "operationId": "Attendance_InitPageAttendanceLeave",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get parameter init in page attendance leave request",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/leave-requests": {
      "delete": {
        "operationId": "Attendance_DeleteMultiLeaveAttendance",
        "parameters": [
          {
            "description": "list of leave request ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete leave requests by ids",
        "tags": [
          "Attendance"
        ]
      },
      "get": {
        "operationId": "Attendance_GetLeaveAttendance",
        "parameters": [
          {
            "description": "string of username",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "string list of type attendance",
            "in": "query",
            "name": "attendanceType",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "date time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "date time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "status attendance leave (default 0: get all attendances (AttendanceStatus = 1,2,3))",
            "in": "query",
            "name": "status",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Status",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get leave request page attendance",
        "tags": [
          "Attendance"
        ]
      },
      "post": {
        "operationId": "Attendance_RegisterMyLeaveAttendance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceRegister"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Employee can create attendance leave request",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/leave-requests/add": {
      "post": {
        "operationId": "Attendance_AddLeaveRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveRequestModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Manager can create new leave request for user",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/leave-requests/report-year": {
      "get": {
        "operationId": "Attendance_GetLeaveReportYear",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "year",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 4
          },
          {
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get report total leave request of users",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/leave-requests/{id}": {
      "delete": {
        "operationId": "Attendance_DeleteMyAttendance",
        "parameters": [
          {
            "description": "Id attendance",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete request attendance leave",
        "tags": [
          "Attendance"
        ]
      },
      "put": {
        "operationId": "Attendance_EditAttendanceLeave",
        "parameters": [
          {
            "description": "Id attendance",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveRequestModel"
              }
            }
          },
          "description": "JSON Model Attendance Leave",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit request attendance leave",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/leave-requests/{id}/review": {
      "post": {
        "operationId": "Attendance_UpdateRequestLeave",
        "parameters": [
          {
            "description": "Attendance id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionApproval"
              }
            }
          },
          "description": "Boolean accept request",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Accept or Reject request leave attendance",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/my-leave-requests": {
      "get": {
        "operationId": "Attendance_GetLeaveAttendanceUser",
        "parameters": [
          {
            "description": "string of username",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "string list of type attendance",
            "in": "query",
            "name": "attendanceType",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "date time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "date time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Status",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get leave request page attendance for user",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/readers": {
      "get": {
        "operationId": "Device_GetAttendanceReaders",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get In/Out Readers to check attendance",
        "tags": [
          "Device"
        ]
      },
      "put": {
        "operationId": "Device_SetAttendanceReaders",
        "parameters": [
          {
            "in": "query",
            "name": "inOut",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "deviceIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set In/Out Readers to check attendance",
        "tags": [
          "Device"
        ]
      }
    },
    "/attendances/recalculate": {
      "patch": {
        "operationId": "Attendance_Recalculate",
        "parameters": [
          {
            "description": "Query string that filter Attendance by Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Id of department",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Type of Attendance",
            "in": "query",
            "name": "attendanceType",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "String of Timezone",
            "in": "query",
            "name": "timezone",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "String time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 8
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "UserId: Id of user",
            "in": "query",
            "name": "userId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Re-Calculate Attendances about search data.",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/recheck": {
      "patch": {
        "operationId": "Attendance_Recheck",
        "parameters": [
          {
            "description": "identified of company",
            "in": "query",
            "name": "companyId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "String of time start",
            "in": "query",
            "name": "fromAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "String of time end",
            "in": "query",
            "name": "toAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Load old event log to attendance list",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/report-month": {
      "get": {
        "operationId": "Attendance_GetAttendancesEveryMonth",
        "parameters": [
          {
            "description": "Query string that filter by UserName",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Query attendance of month",
            "in": "query",
            "name": "month",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Id of department",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Attendance of Users with company every month",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/ssc-school/sync-checkin": {
      "post": {
        "operationId": "WebhookAnonymous_SyncStudentCheckInManual",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SscRequestSyncStudentCheckInManual"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/attendances/starttime": {
      "get": {
        "operationId": "Attendance_GetStartTime",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get StartTime to check attendance",
        "tags": [
          "Attendance"
        ]
      },
      "put": {
        "operationId": "Attendance_SetStartTime",
        "parameters": [
          {
            "in": "query",
            "name": "startTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set StartTime to check attendance",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/types": {
      "get": {
        "operationId": "Attendance_GetAttendanceTypeList",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all of list attendance types",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/users": {
      "get": {
        "operationId": "Attendance_GetAttendanceRecordEachUser",
        "parameters": [
          {
            "description": "String time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "String time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get users with Attendance",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/users/{id}/leave-requests": {
      "get": {
        "operationId": "Attendance_GetLeaveAttendanceByUserId",
        "parameters": [
          {
            "description": "user id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "attendanceType",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "start",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get history leave request of user",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/{id}": {
      "get": {
        "operationId": "Attendance_GetById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get attendance report detail by id",
        "tags": [
          "Attendance"
        ]
      },
      "patch": {
        "operationId": "Attendance_Edit",
        "parameters": [
          {
            "description": "identified of attendance",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceModel"
              }
            }
          },
          "description": "JSON model for object(type attendance, string of time in, string of time out)",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit Attendance",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendances/{id}/access-history": {
      "get": {
        "operationId": "Attendance_GetAccessHistory",
        "parameters": [
          {
            "description": "identified of attendance",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "AccessTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of Access history of User with attendance by id",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/aws-s3/all-path": {
      "delete": {
        "operationId": "SystemInfo_DeleteAllPathInS3",
        "parameters": [
          {
            "in": "query",
            "name": "path",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete all file path stored in S3",
        "tags": [
          "SystemInfo"
        ]
      },
      "get": {
        "operationId": "SystemInfo_GetAllPathInS3",
        "parameters": [
          {
            "description": "path of folder",
            "in": "query",
            "name": "path",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "get all path or get only file in folder",
            "in": "query",
            "name": "onlyFile",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get all file path stored in s3",
        "tags": [
          "SystemInfo"
        ]
      },
      "post": {
        "operationId": "SystemInfo_UploadAllFileInS3",
        "parameters": [
          {
            "description": "path of folder",
            "in": "query",
            "name": "path",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Upload all file stored in rootPath to S3",
        "tags": [
          "SystemInfo"
        ]
      },
      "put": {
        "operationId": "SystemInfo_DownloadAllFileInS3",
        "parameters": [
          {
            "description": "path of folder",
            "in": "query",
            "name": "path",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "download all file in path with S3",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/aws-s3/file-backup": {
      "get": {
        "operationId": "SystemInfo_DownloadFileBackupInS3",
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download file backup by Date",
        "tags": [
          "SystemInfo"
        ]
      },
      "put": {
        "operationId": "SystemInfo_BackupAllFileFromS3",
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "folder",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Backup file stored in server from S3",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/aws-s3/file-backup/change": {
      "get": {
        "operationId": "SystemInfo_GetHistoryChangeFiles",
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get history change file",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/aws-s3/files": {
      "get": {
        "operationId": "SystemInfo_DownloadFileInS3",
        "parameters": [
          {
            "description": "path of file",
            "in": "query",
            "name": "pathFile",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download file on S3",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/backup-request": {
      "get": {
        "operationId": "Device_BackupRequest",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Backup Request",
        "tags": [
          "Device"
        ]
      }
    },
    "/books": {
      "delete": {
        "operationId": "Book_DeleteMultiBook",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multi book",
        "tags": [
          "Book"
        ]
      },
      "get": {
        "operationId": "Book_GetBooks",
        "parameters": [
          {
            "description": "search all",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "name of book",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "author of book",
            "in": "query",
            "name": "author",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "ISBN number",
            "in": "query",
            "name": "isbn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "filter from date (createdOn)",
            "in": "query",
            "name": "createdOnFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "filter to date (createdOn)",
            "in": "query",
            "name": "createdOnTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "status of book",
            "explode": true,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "Book Area Ids",
            "explode": true,
            "in": "query",
            "name": "bookAreaIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 10
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of books company",
        "tags": [
          "Book"
        ]
      },
      "post": {
        "operationId": "Book_AddBook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new book",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/area": {
      "delete": {
        "operationId": "Book_DeleteMultiBookArea",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multi book area",
        "tags": [
          "Book"
        ]
      },
      "get": {
        "operationId": "Book_GetListBookAreas",
        "parameters": [
          {
            "description": "Name of book area",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list book areas",
        "tags": [
          "Book"
        ]
      },
      "post": {
        "operationId": "Book_AddBookArea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookAreaModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new book area",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/area/{id}": {
      "put": {
        "operationId": "Book_EditBookArea",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookAreaModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit book area by id",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/export": {
      "get": {
        "operationId": "Book_ExportBook",
        "parameters": [
          {
            "description": "search all",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "name of book",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "author of book",
            "in": "query",
            "name": "author",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "ISBN number",
            "in": "query",
            "name": "isbn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "filter from date (createdOn)",
            "in": "query",
            "name": "createdOnFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "filter to date (createdOn)",
            "in": "query",
            "name": "createdOnTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "list book ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "status of book",
            "explode": true,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "Book Area Ids",
            "explode": true,
            "in": "query",
            "name": "bookAreaIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "excel or csv",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export books to excels.",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/import": {
      "get": {
        "operationId": "Book_GetFileImportBookTemplate",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get file template import book",
        "tags": [
          "Book"
        ]
      },
      "post": {
        "operationId": "Book_ImportBook",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import Book by File",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/init": {
      "get": {
        "operationId": "Book_GetInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init page",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/my-borrow": {
      "get": {
        "operationId": "Book_GetMyBorrowBook",
        "parameters": [
          {
            "description": "search all",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "name of book",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "author of book",
            "in": "query",
            "name": "author",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "isbn number",
            "in": "query",
            "name": "isbn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "status of book",
            "explode": true,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get my book borrow",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/report-borrow": {
      "get": {
        "operationId": "Book_GetBorrowBooks",
        "parameters": [
          {
            "description": "search all",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "name of book",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "author of book",
            "in": "query",
            "name": "author",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "isbn number",
            "in": "query",
            "name": "isbn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "borrow date from",
            "in": "query",
            "name": "borrowDateFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "borrow date to",
            "in": "query",
            "name": "borrowDateTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "created date to",
            "in": "query",
            "name": "createdOnFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "created date from",
            "in": "query",
            "name": "createdOnTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "name of borrower",
            "in": "query",
            "name": "borrowerName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "status of book",
            "explode": true,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "book area ids",
            "explode": true,
            "in": "query",
            "name": "bookAreaIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "borrower ids",
            "explode": true,
            "in": "query",
            "name": "borrowerIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 13
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 14
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get report borrow books",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/report-borrow/export": {
      "get": {
        "operationId": "Book_ExportHistoryBorrowBooks",
        "parameters": [
          {
            "description": "search",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "name of book",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "author of book",
            "in": "query",
            "name": "author",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "isbn number",
            "in": "query",
            "name": "isbn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "borrow date from",
            "in": "query",
            "name": "borrowDateFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "borrow date to",
            "in": "query",
            "name": "borrowDateTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "created date to",
            "in": "query",
            "name": "createdOnFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "created date from",
            "in": "query",
            "name": "createdOnTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "name of borrower",
            "in": "query",
            "name": "borrowerName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "status of book",
            "explode": true,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "book area ids",
            "explode": true,
            "in": "query",
            "name": "bookAreaIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "borrower ids",
            "explode": true,
            "in": "query",
            "name": "borrowerIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "Excel or Csv",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export history borrow book",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/{id}": {
      "delete": {
        "operationId": "Book_DeleteBook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete book object",
        "tags": [
          "Book"
        ]
      },
      "get": {
        "operationId": "Book_GetBookById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get book object by id",
        "tags": [
          "Book"
        ]
      },
      "put": {
        "operationId": "Book_EditBook",
        "parameters": [
          {
            "description": "Book Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit book object",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/{id}/borrow": {
      "get": {
        "operationId": "Book_GetDetailBorrowTicket",
        "parameters": [
          {
            "description": "Book Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detail book borrow",
        "tags": [
          "Book"
        ]
      },
      "post": {
        "operationId": "Book_BorrowBook",
        "parameters": [
          {
            "description": "Book Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BorrowTicketModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Borrow book",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/{id}/extend": {
      "post": {
        "operationId": "Book_ExtendBook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BorrowTicketModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extend book",
        "tags": [
          "Book"
        ]
      }
    },
    "/books/{id}/return": {
      "post": {
        "operationId": "Book_ReturnBook",
        "parameters": [
          {
            "description": "Book Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return book",
        "tags": [
          "Book"
        ]
      }
    },
    "/buildings": {
      "delete": {
        "operationId": "Building_DeleteMultiple",
        "parameters": [
          {
            "description": "List of Building Ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete list access group",
        "tags": [
          "Building"
        ]
      },
      "get": {
        "operationId": "Building_Gets",
        "parameters": [
          {
            "description": "Query string that filter Building by Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of Buildings with pagination",
        "tags": [
          "Building"
        ]
      },
      "post": {
        "operationId": "Building_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingModel"
              }
            }
          },
          "description": "JSON model for Building",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add building",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings-master": {
      "delete": {
        "operationId": "Building_DeleteRangeBuildingMasterlist",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Building"
        ]
      },
      "get": {
        "operationId": "Building_GetBuildingMasterlist",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "description": "page number ",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "page size ",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get buildingMaster information from selected several buildings",
        "tags": [
          "Building"
        ]
      },
      "put": {
        "operationId": "Building_EditBuildingMasterList",
        "parameters": [
          {
            "description": "building id list ",
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "master ids ",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set buildingMasters to multiple buildings",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings-master/export": {
      "get": {
        "operationId": "Building_ExportBuildingMasterlist",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "description": "type string. ex) excel, csv ",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export buildingMaster information from selected several buildings to file",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings-master/{id}": {
      "delete": {
        "operationId": "Building_DeleteBuildingMasterlist",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Building"
        ]
      },
      "get": {
        "operationId": "Building_GetBuildingMasterById",
        "parameters": [
          {
            "description": "buidling Id ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "search filter ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "page number ",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "page size ",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "sort column ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "desc or asc ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get buildingMaster information by using id.",
        "tags": [
          "Building"
        ]
      },
      "put": {
        "operationId": "Building_EditBuildingMaster",
        "parameters": [
          {
            "description": "building id ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "master ids ",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set buildingMaster",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/doors": {
      "get": {
        "operationId": "Building_GetBuildingsDoors",
        "parameters": [
          {
            "description": "list of building identifier ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "description": "Query string that filter Door in Building by door name, device address, activeTZ or PassageTZ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "operationType",
            "schema": {
              "default": 0,
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of doors list in a building(by id building)",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/doors/export": {
      "get": {
        "operationId": "Building_ExportBuildingsDoors",
        "parameters": [
          {
            "description": "list of building identifier ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "description": "Query string that filter Door in Building by door name, device address, activeTZ or PassageTZ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "operationType",
            "schema": {
              "default": 0,
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "file type : excel, csv, ... ",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export list of doors in buildings (by building ids)",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/get-building-level": {
      "get": {
        "operationId": "Building_GetListBuildingWithLevel",
        "parameters": [
          {
            "description": "Level building: 0 - Building, 1 - Zone, 2 - Place",
            "in": "query",
            "name": "level",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Building by Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get building with level",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/get-building-tree": {
      "get": {
        "operationId": "Building_GetBuildingHierarchy",
        "parameters": [
          {
            "description": "Query string that filter Building by Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "operationType",
            "schema": {
              "default": 0,
              "type": "integer"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list building tree",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/{id}": {
      "delete": {
        "operationId": "Building_Delete",
        "parameters": [
          {
            "description": "Building Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a building",
        "tags": [
          "Building"
        ]
      },
      "get": {
        "operationId": "Building_Get",
        "parameters": [
          {
            "description": "identified of Building",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Building by id",
        "tags": [
          "Building"
        ]
      },
      "put": {
        "operationId": "Building_Edit",
        "parameters": [
          {
            "description": "Building Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingModel"
              }
            }
          },
          "description": "JSON model for Building",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit information of a building",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/{id}/accessible-doors": {
      "get": {
        "operationId": "Building_GetAccessibleDoors",
        "parameters": [
          {
            "description": "Identified of Building",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Door in Building by door name, device address, activeTZ or PassageTZ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "operationType",
            "schema": {
              "default": 0,
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of accessible-doors list in a building(by id building)",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/{id}/assign-doors": {
      "post": {
        "operationId": "Building_AddDoors",
        "parameters": [
          {
            "description": "Building Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of door ids",
          "required": true,
          "x-name": "doorIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add door(s) to a building",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/{id}/doors": {
      "get": {
        "operationId": "Building_GetDoors",
        "parameters": [
          {
            "description": "Identified of Building",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Door in Building by door name, device address, activeTZ or PassageTZ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "operationType",
            "schema": {
              "default": 0,
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of doors list in a building(by id building)",
        "tags": [
          "Building"
        ]
      }
    },
    "/buildings/{id}/unassign-doors": {
      "delete": {
        "operationId": "Building_DeleteDoors",
        "parameters": [
          {
            "description": "Building Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of door Ids(assigned for building)",
          "required": true,
          "x-name": "doorIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Unassign door from a building",
        "tags": [
          "Building"
        ]
      },
      "get": {
        "operationId": "Building_GetUnAssignDoors",
        "parameters": [
          {
            "description": "Building Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Door in Building by door name, device address or building name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Flag indicating what mode of operation the device is in ",
            "in": "query",
            "name": "operationType",
            "schema": {
              "default": 0,
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all unassigned doors in specific building with pagination.",
        "tags": [
          "Building"
        ]
      }
    },
    "/cameras": {
      "get": {
        "operationId": "Camera_Gets",
        "parameters": [
          {
            "description": "search string by name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "types of camera",
            "explode": true,
            "in": "query",
            "name": "types",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of camera",
        "tags": [
          "Camera"
        ]
      },
      "post": {
        "operationId": "Camera_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraModel"
              }
            }
          },
          "description": "Json model camera",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add new camera",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras-place": {
      "get": {
        "operationId": "Camera_GetCamerasInPlace",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all camera in hanet system",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/check/avatar": {
      "post": {
        "operationId": "Camera_CheckAvatarValid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check avatar invalid in hanet",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/check/sync-user": {
      "get": {
        "operationId": "Camera_TestSyncUserCamera",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check Sync-user",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/fix/sync-user": {
      "post": {
        "operationId": "Camera_FixSyncUserCamera",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete all user and card HFaceId error",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/hanet-places": {
      "get": {
        "operationId": "Camera_GetPlacesByAccessTokenHanet",
        "parameters": [
          {
            "in": "query",
            "name": "accessToken",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all places with access token hanet",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/hanet/sync-user": {
      "post": {
        "operationId": "Camera_HanetAutoSyncUserInHanet",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update avatar user and visitor from hanet system",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/init": {
      "get": {
        "operationId": "Camera_GetInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init page cameras",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/recheck/event-logs": {
      "patch": {
        "operationId": "Camera_RecheckCameraEventLog",
        "parameters": [
          {
            "description": "Date start (yyyy-mm-DD)",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Time start (hh:mm:ss)",
            "in": "query",
            "name": "fromTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Date end (yyyy-mm-DD)",
            "in": "query",
            "name": "toDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Time end (hh:mm:ss)",
            "in": "query",
            "name": "toTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "ReCheck cameras event-log",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/status": {
      "get": {
        "operationId": "Camera_HanetCheckStatusCamera",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get status camera hanet online/offline",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/sync-manual": {
      "post": {
        "operationId": "Camera_SyncManualUserData",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Sync manual user data (sync parent from dmp to hanet. Then, sync user {name}-{department} from hanet to dmp)",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/sync-user": {
      "delete": {
        "operationId": "Camera_HanetDeleteAllUser",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete all user in Hanet System",
        "tags": [
          "Camera"
        ]
      },
      "post": {
        "operationId": "Camera_HanetAutoSyncUserInSystem",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update avatar user and visitor to hanet system",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/webhook-hanet": {
      "post": {
        "operationId": "WebhookAnonymous_ReceiverDataCheckIn",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Receive event data checkin from hanet",
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/cameras/webhook-hanet/qr-code": {
      "post": {
        "operationId": "Camera_ReceiveDataQrCode",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Receive data qr-code(CCCD) from camera hanet",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/webhook-ts-camera": {
      "post": {
        "operationId": "WebhookAnonymous_ReceiverDataCheckInFromTsCamera",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "faceImage": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  },
                  "vehicleImage": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Receive event data checkin from DC camera.",
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/cameras/{id}": {
      "delete": {
        "operationId": "Camera_Delete",
        "parameters": [
          {
            "description": "camera id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete camera by id",
        "tags": [
          "Camera"
        ]
      },
      "put": {
        "operationId": "Camera_Update",
        "parameters": [
          {
            "description": "camera id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraModel"
              }
            }
          },
          "description": "Json model camera",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "edit camera by id",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/{id}/history": {
      "get": {
        "operationId": "Camera_GetCameraHistory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get camera histories",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/{id}/take-a-picture": {
      "get": {
        "operationId": "Camera_TakeAPicture",
        "parameters": [
          {
            "description": "identifier of camera",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Take face picture from camera hanet (waiting picture and response)",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/{id}/take-face-picture": {
      "get": {
        "operationId": "Camera_TakeFacePicture",
        "parameters": [
          {
            "description": "identifier of camera",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Take face picture from camera hanet (using webhook for waiting picture)",
        "tags": [
          "Camera"
        ]
      }
    },
    "/cameras/{id}/take-frame-picture": {
      "get": {
        "operationId": "Camera_TakeFramePicture",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Take frame picture from camera hanet (waiting picture and response)",
        "tags": [
          "Camera"
        ]
      }
    },
    "/card-issuing/accident-type": {
      "get": {
        "operationId": "CodeManagement_GetAllAccidentType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all accident type by company",
        "tags": [
          "CodeManagement"
        ]
      },
      "post": {
        "operationId": "CodeManagement_AddAccidentType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccidentTypeModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new accident type",
        "tags": [
          "CodeManagement"
        ]
      }
    },
    "/card-issuing/accident-type/{id}": {
      "delete": {
        "operationId": "CodeManagement_DeleteAccidentType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete accident type by id",
        "tags": [
          "CodeManagement"
        ]
      },
      "put": {
        "operationId": "CodeManagement_UpdateAccidentType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccidentTypeModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit accident type",
        "tags": [
          "CodeManagement"
        ]
      }
    },
    "/card-issuing/card-init": {
      "get": {
        "operationId": "CardIssuing_GetInitWithRoleCard",
        "parameters": [
          {
            "description": "role: (1 - temporary, 2 - access, 3 - visit)",
            "in": "query",
            "name": "role",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init page card issuing",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/card-layout/preview/fill-data": {
      "post": {
        "operationId": "CardIssuing_PreviewFillDataCardLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardLayoutFillPreviewModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "fill data to card layout preview",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/card-layout/{id}/preview": {
      "get": {
        "operationId": "CardIssuing_PreviewCardLayout",
        "parameters": [
          {
            "description": "card layout id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Card id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Card layout preview",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/card-layouts": {
      "delete": {
        "operationId": "CardIssuing_DeleteMultiCardLayout",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multi card layouts",
        "tags": [
          "CardIssuing"
        ]
      },
      "get": {
        "operationId": "CardIssuing_GetCardLayouts",
        "parameters": [
          {
            "description": "string name of device",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list card layout",
        "tags": [
          "CardIssuing"
        ]
      },
      "post": {
        "operationId": "CardIssuing_AddCardLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardLayoutModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new card layout",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/card-layouts/init": {
      "get": {
        "operationId": "CardIssuing_GetInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init page card layout",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/card-layouts/{id}": {
      "delete": {
        "operationId": "CardIssuing_DeleteCardLayout",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete card layout by id",
        "tags": [
          "CardIssuing"
        ]
      },
      "get": {
        "operationId": "CardIssuing_GetCardLayoutById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detail card layout by id",
        "tags": [
          "CardIssuing"
        ]
      },
      "put": {
        "operationId": "CardIssuing_EditCardLayout",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardLayoutModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit card layout by id",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/cards": {
      "delete": {
        "operationId": "CardIssuing_DeleteMultiCardIssue",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multi card issuing",
        "tags": [
          "CardIssuing"
        ]
      },
      "get": {
        "operationId": "CardIssuing_GetListCards",
        "parameters": [
          {
            "description": "card role (1 - temporary, 2 - access, 3 - visit)",
            "in": "query",
            "name": "cardRole",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "data time issue from",
            "in": "query",
            "name": "issueDateFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "date time issue to",
            "in": "query",
            "name": "issueDateTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "list of card status",
            "explode": true,
            "in": "query",
            "name": "cardStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 4
          },
          {
            "description": "list id of card role type",
            "explode": true,
            "in": "query",
            "name": "cardRoleTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "list ids of departments",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "management number",
            "in": "query",
            "name": "mngNo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "name of user or visitor",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "text cardId",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "search all",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "MSN: Military Serial Number",
            "in": "query",
            "name": "msn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "Registered date from",
            "in": "query",
            "name": "registerDateFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "Registered date to",
            "in": "query",
            "name": "registerDateTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 14
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 15
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "CardStatus",
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          },
          {
            "description": "If isGetHistory = true, card include list histories issue card",
            "in": "query",
            "name": "isGetHistory",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-position": 18
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list card issue with card role(temporary, access, visit)",
        "tags": [
          "CardIssuing"
        ]
      },
      "post": {
        "operationId": "CardIssuing_AddCardIssue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardIssueModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new object card issuing",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/cards/export": {
      "get": {
        "operationId": "CardIssuing_ExportCardIssueToExcel",
        "parameters": [
          {
            "description": "card role (1 - temporary, 2 - access, 3 - visit)",
            "in": "query",
            "name": "cardRole",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "data time issue from",
            "in": "query",
            "name": "issueDateFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "date time issue to",
            "in": "query",
            "name": "issueDateTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "list of card status",
            "explode": true,
            "in": "query",
            "name": "cardStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 4
          },
          {
            "description": "list id of card role type",
            "explode": true,
            "in": "query",
            "name": "cardRoleTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "list ids of departments",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "management number",
            "in": "query",
            "name": "mngNo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "name of user or visitor",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "text cardId",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "MSN: Military Serial Number",
            "in": "query",
            "name": "msn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "Registered date from",
            "in": "query",
            "name": "registerDateFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "Registered date to",
            "in": "query",
            "name": "registerDateTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "If isGetHistory = true, card include list histories issue card",
            "in": "query",
            "name": "isGetHistory",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export card issue to excel",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/cards/{id}": {
      "delete": {
        "operationId": "CardIssuing_DeleteCardIssue",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete card issuing",
        "tags": [
          "CardIssuing"
        ]
      },
      "get": {
        "operationId": "CardIssuing_GetCardIssuingById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get card issuing object by id",
        "tags": [
          "CardIssuing"
        ]
      },
      "put": {
        "operationId": "CardIssuing_EditCardIssue",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardIssueModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit card issuing object",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/cards/{id}/accident-handle": {
      "post": {
        "operationId": "CardIssuing_CardAccidentHandling",
        "parameters": [
          {
            "description": "card id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "accident type",
            "in": "query",
            "name": "typeId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Card accident handling",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/cards/{id}/issue": {
      "post": {
        "operationId": "CardIssuing_IssueCardForPeople",
        "parameters": [
          {
            "description": "Card Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueCardModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Issue card for user",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/cards/{id}/print": {
      "post": {
        "operationId": "CardIssuing_PrintCard",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Print card with card layout",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/cards/{id}/release": {
      "post": {
        "operationId": "CardIssuing_ReleaseCard",
        "parameters": [
          {
            "description": "Card id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseCardModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Release card",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/check-log": {
      "get": {
        "operationId": "CardIssuing_CheckPrinterLogMessage",
        "parameters": [
          {
            "in": "query",
            "name": "deviceAddress",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check printer log message",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/devices": {
      "delete": {
        "operationId": "CardIssuing_DeleteMultiDevice",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multi device issuing",
        "tags": [
          "CardIssuing"
        ]
      },
      "get": {
        "operationId": "CardIssuing_GetIssuingDevices",
        "parameters": [
          {
            "description": "string name of device",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Issuing device type",
            "explode": true,
            "in": "query",
            "name": "deviceTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list issuing device",
        "tags": [
          "CardIssuing"
        ]
      },
      "post": {
        "operationId": "CardIssuing_AddDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuingDeviceModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new issuing device",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/devices-init": {
      "get": {
        "operationId": "CardIssuing_GetDeviceIssuingInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init device page (types)",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/devices/{id}": {
      "delete": {
        "operationId": "CardIssuing_DeleteDevice",
        "parameters": [
          {
            "description": "Issuing device id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete issuing device by id",
        "tags": [
          "CardIssuing"
        ]
      },
      "get": {
        "operationId": "CardIssuing_GetIssuingDeviceById",
        "parameters": [
          {
            "description": "Issuing device id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get issuing device by id",
        "tags": [
          "CardIssuing"
        ]
      },
      "put": {
        "operationId": "CardIssuing_EditDevice",
        "parameters": [
          {
            "description": "Issuing device id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuingDeviceModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit issuing device",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/person-card-type": {
      "get": {
        "operationId": "CodeManagement_GetAllPersonCardType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all person card type by company",
        "tags": [
          "CodeManagement"
        ]
      },
      "post": {
        "operationId": "CodeManagement_AddPersonCardType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCardTypeModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new person card type",
        "tags": [
          "CodeManagement"
        ]
      }
    },
    "/card-issuing/person-card-type/{id}": {
      "delete": {
        "operationId": "CodeManagement_DeletePersonCardType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete person card type by id",
        "tags": [
          "CodeManagement"
        ]
      },
      "put": {
        "operationId": "CodeManagement_UpdatePersonCardType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCardTypeModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update person card type",
        "tags": [
          "CodeManagement"
        ]
      }
    },
    "/card-issuing/smart-card-printer/{id}/print-by-image": {
      "post": {
        "operationId": "CardIssuing_PrintCardWithSmartCardPrinter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImagePrintCardModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Print card by image",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card-issuing/smart-card-printer/{id}/print-by-image-preview": {
      "post": {
        "operationId": "CardIssuing_PrintCardPreviewWithSmartCardPrinter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImagePrintCardModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Print card by image when using function by preview card layout",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/card/get-by-cardid/{cardId}": {
      "get": {
        "operationId": "CardIssuing_GetCardByCardId",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get card by cardId",
        "tags": [
          "CardIssuing"
        ]
      }
    },
    "/cards/list-card-type": {
      "get": {
        "operationId": "User_GetListCardType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get List of card types.",
        "tags": [
          "User"
        ]
      }
    },
    "/cards/{id}/fingerprint-template": {
      "get": {
        "operationId": "WebhookAnonymous_GetFingerprintTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get fingerprint template by card id",
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/categories": {
      "get": {
        "operationId": "Category_Gets",
        "parameters": [
          {
            "description": "Query string that filter Categories by Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of Categories with pagination.",
        "tags": [
          "Category"
        ]
      },
      "post": {
        "operationId": "Category_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CategoryModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of CategoryModel ",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add categories",
        "tags": [
          "Category"
        ]
      },
      "put": {
        "operationId": "Category_Edit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CategoryModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of CategoryModel ",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "edit Categories",
        "tags": [
          "Category"
        ]
      }
    },
    "/categories/hierarchy": {
      "get": {
        "operationId": "Category_GetCategoryList",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get hierarchy of category",
        "tags": [
          "Category"
        ]
      }
    },
    "/categories/options/hierarchy": {
      "get": {
        "operationId": "Category_GetOptionList",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get hierarchy of category option",
        "tags": [
          "Category"
        ]
      }
    },
    "/categories/{id}": {
      "delete": {
        "operationId": "Category_Delete",
        "parameters": [
          {
            "description": "identifier of category ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete a category by id",
        "tags": [
          "Category"
        ]
      },
      "get": {
        "operationId": "Category_Get",
        "parameters": [
          {
            "description": "Category Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a category by Id",
        "tags": [
          "Category"
        ]
      }
    },
    "/common-contact": {
      "get": {
        "operationId": "Common_GetContactManager",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get common setting contact company manager",
        "tags": [
          "Common"
        ]
      }
    },
    "/common-settings": {
      "get": {
        "operationId": "Common_Get",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Common Setting",
        "tags": [
          "Common"
        ]
      }
    },
    "/companies": {
      "delete": {
        "operationId": "Company_DeleteMultiple",
        "parameters": [
          {
            "description": "List of company ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multiple companies",
        "tags": [
          "Company"
        ]
      },
      "get": {
        "operationId": "Company_Gets",
        "parameters": [
          {
            "description": "Query string that filter Company by Name or Code.",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of Companies with pagination.",
        "tags": [
          "Company"
        ]
      },
      "post": {
        "operationId": "Company_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyModel"
              }
            }
          },
          "description": "JSON model for Company",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a company",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/reset-aes-key": {
      "patch": {
        "operationId": "Company_RegenerateAesKey",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reset key companies",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{id}": {
      "delete": {
        "operationId": "Company_Delete",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a company",
        "tags": [
          "Company"
        ]
      },
      "get": {
        "operationId": "Company_Get",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the Company information",
        "tags": [
          "Company"
        ]
      },
      "put": {
        "operationId": "Company_Edit",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyModel"
              }
            }
          },
          "description": "JSON model for Company",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit company information",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{id}/assign-unregistered-device": {
      "post": {
        "operationId": "Company_AssignUnregisteredDevice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "unregisteredIds",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign unregistered ids to company",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{id}/attendances/recheck-setting": {
      "get": {
        "operationId": "Attendance_SettingRecheckGET",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get setting param recheck attendance",
        "tags": [
          "Attendance"
        ]
      },
      "put": {
        "operationId": "Attendance_SettingRecheckPUT",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingRecheckAttendance"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Setting param recheck attendance",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/companies/{id}/detail": {
      "get": {
        "operationId": "Company_GetCompanyDetailById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detail of company by id",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{id}/encrypt": {
      "get": {
        "operationId": "Company_GetEncryptSetting",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get company setting about DB encryption.",
        "tags": [
          "Company"
        ]
      },
      "put": {
        "operationId": "Company_EditEncryptSetting",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptSettingModel"
              }
            }
          },
          "description": "JSON model for Company",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update company setting about DB encryption.",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{id}/expired-pw": {
      "get": {
        "operationId": "Company_GetExpiredPWSetting",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get company setting about DB encryption.",
        "tags": [
          "Company"
        ]
      },
      "put": {
        "operationId": "Company_EditExpiredPWSetting",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpiredPWSettingModel"
              }
            }
          },
          "description": "JSON model for Company",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update company setting about DB encryption.",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{id}/plugins": {
      "get": {
        "operationId": "Company_GetPluginByCompany",
        "parameters": [
          {
            "description": "Company Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get plug-ins with company by id",
        "tags": [
          "Company"
        ]
      },
      "patch": {
        "operationId": "Company_UpdatePluginByCompany",
        "parameters": [
          {
            "description": "Company Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlugIns"
              }
            }
          },
          "description": "JSON model for Company",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update plug-ins to company by id",
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{id}/reset-aes-key": {
      "patch": {
        "operationId": "Company_RegenerateAesKeyCompany",
        "parameters": [
          {
            "description": "Company Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reset key company",
        "tags": [
          "Company"
        ]
      }
    },
    "/company-notice": {
      "get": {
        "operationId": "Notification_GetCompanyNotices",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get company notices",
        "tags": [
          "Notification"
        ]
      },
      "post": {
        "operationId": "Notification_AddDashboardNotice",
        "parameters": [
          {
            "description": "notice contents ",
            "in": "query",
            "name": "notice",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add company notice",
        "tags": [
          "Notification"
        ]
      }
    },
    "/company-notice/{id}": {
      "delete": {
        "operationId": "Notification_DeleteDashboardNotice",
        "parameters": [
          {
            "description": "notice identifier ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete company notice",
        "tags": [
          "Notification"
        ]
      },
      "put": {
        "operationId": "Notification_UpdateDashboardNotice",
        "parameters": [
          {
            "description": "notice identifier ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "new notice contents ",
            "in": "query",
            "name": "notice",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update company notice",
        "tags": [
          "Notification"
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "operationId": "Company_GetInfomation",
        "parameters": [
          {
            "description": "Identified of Company",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Company information",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/{id}/assign-doors": {
      "post": {
        "operationId": "Company_AssignDoor",
        "parameters": [
          {
            "description": "companyId",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "selected device(s) Id(s)",
          "required": true,
          "x-name": "deviceIds",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign device(s) to a Company",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/{id}/reset-allow-ip": {
      "put": {
        "operationId": "Company_ResetAllowIpSetting",
        "parameters": [
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Company"
        ]
      }
    },
    "/controller-devices": {
      "get": {
        "operationId": "Device_GetControllerDevices",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get controller devices.",
        "tags": [
          "Device"
        ]
      },
      "post": {
        "operationId": "Device_AddController",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerDeviceModel"
              }
            }
          },
          "description": "This model has information about the device to be added.",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add controller device to system",
        "tags": [
          "Device"
        ]
      }
    },
    "/controller-devices/{id}": {
      "get": {
        "operationId": "Device_GetControllerDevice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get controller device by Id.",
        "tags": [
          "Device"
        ]
      },
      "put": {
        "operationId": "Device_EditController",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerDeviceModel"
              }
            }
          },
          "description": "This model has information about the device to be added.",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Edit controller device.",
        "tags": [
          "Device"
        ]
      }
    },
    "/controller-devices/{id}/assign": {
      "put": {
        "operationId": "Device_AssignReaderToController",
        "parameters": [
          {
            "description": "controller device identifier ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "a list of reader device's identifier ",
            "explode": true,
            "in": "query",
            "name": "readerIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Assign reader successfully"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign reader to controller device",
        "tags": [
          "Device"
        ]
      }
    },
    "/corners": {
      "get": {
        "operationId": "CornerSetting_GetListCornerSetting",
        "parameters": [
          {
            "description": "Query string that filter Corner Setting by Name.",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of corner setting",
        "tags": [
          "CornerSetting"
        ]
      },
      "post": {
        "operationId": "CornerSetting_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCornerSettingModel"
              }
            }
          },
          "description": "JSON model for Corner Setting",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a Corner Setting",
        "tags": [
          "CornerSetting"
        ]
      }
    },
    "/corners/{id}": {
      "delete": {
        "operationId": "CornerSetting_DeleteCornerSetting",
        "parameters": [
          {
            "description": "Corner Setting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete corner setting",
        "tags": [
          "CornerSetting"
        ]
      },
      "get": {
        "operationId": "CornerSetting_GetCornerSetting",
        "parameters": [
          {
            "description": "Corner Setting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Corner setting by Id",
        "tags": [
          "CornerSetting"
        ]
      },
      "put": {
        "operationId": "CornerSetting_UpdateCornerSetting",
        "parameters": [
          {
            "description": "Corner Setting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCornerSettingModel"
              }
            }
          },
          "description": "JSON model for Corner Setting",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit Corner Setting by Id",
        "tags": [
          "CornerSetting"
        ]
      }
    },
    "/credits": {
      "post": {
        "operationId": "Credit_UpdateCredit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UseCreditModel"
              }
            }
          },
          "description": "JSON model for update use or unuse credit to company",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "use or unuse credit to company,",
        "tags": [
          "Credit"
        ]
      }
    },
    "/credits/point": {
      "post": {
        "operationId": "Credit_UpdatePoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointCredit"
              }
            }
          },
          "description": "JSON model for update point company",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "update point company,\ntype: 0-Add, 1-Delete, 2-visit",
        "tags": [
          "Credit"
        ]
      }
    },
    "/credits/{id}": {
      "get": {
        "operationId": "Credit_Get",
        "parameters": [
          {
            "description": "company id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Information point and transaction",
        "tags": [
          "Credit"
        ]
      }
    },
    "/current-logo": {
      "get": {
        "operationId": "Common_GetCurrentLogo",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get current Logo",
        "tags": [
          "Common"
        ]
      }
    },
    "/current-qr-logo": {
      "get": {
        "operationId": "Common_GetCurrentQRLogo",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get current Logo",
        "tags": [
          "Common"
        ]
      }
    },
    "/dashboard/access": {
      "get": {
        "operationId": "Dashboard_AccessDashboard",
        "parameters": [
          {
            "in": "query",
            "name": "accessDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "0 - both, 1 - only info number",
            "in": "query",
            "name": "type",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return number for company dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/admin": {
      "get": {
        "operationId": "Dashboard_AdminDashboard",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return total number for admin dashboards",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/attendance": {
      "get": {
        "operationId": "Dashboard_AttendanceDashboard",
        "parameters": [
          {
            "description": "String for DateTime of Attendance",
            "in": "query",
            "name": "attendanceDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return number for company dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/canteen": {
      "get": {
        "operationId": "Dashboard_CanteenDashboard",
        "parameters": [
          {
            "description": "String for DateTime of Start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "String for DateTime of End",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return number for company dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/notice": {
      "get": {
        "operationId": "Dashboard_NoticeDashboard",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get visit application request, access application request and 5 notices",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/recently-discontected-devices": {
      "get": {
        "operationId": "Dashboard_RecentlyDisconnectedDevices",
        "parameters": [
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return list of disconnected devices in the last 24 hours",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/visit": {
      "get": {
        "operationId": "Dashboard_VisitDashboard",
        "parameters": [
          {
            "in": "query",
            "name": "visitDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return number for company dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/database/timescale/import-table": {
      "post": {
        "operationId": "SystemInfo_RollbackData",
        "parameters": [
          {
            "description": "mode: 0 - import data EventMemo \n\nmode: 1 - import data MealEventLog \n\nmode: 2 - import data Attendance Leave Request ",
            "in": "query",
            "name": "mode",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/delete-all-notifications": {
      "delete": {
        "operationId": "Notification_DeleteAllStatus",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete All status",
        "tags": [
          "Notification"
        ]
      }
    },
    "/delete-multiple-notifications": {
      "delete": {
        "operationId": "Notification_DeleteMultipleStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of notification ids",
          "required": true,
          "x-name": "lstStatus",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Multiple status",
        "tags": [
          "Notification"
        ]
      }
    },
    "/departments": {
      "delete": {
        "operationId": "Department_DeleteMultiple",
        "parameters": [
          {
            "description": "list to ids on the device to delete",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete departments by id list",
        "tags": [
          "Department"
        ]
      },
      "get": {
        "operationId": "Department_Gets",
        "parameters": [
          {
            "description": "Query string that filter Department by Name, Department Number or Name of Parent.",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "DepartmentNumber",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get (a) department(s) by search filter",
        "tags": [
          "Department"
        ]
      },
      "post": {
        "operationId": "Department_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentModel"
              }
            }
          },
          "description": "JSON model for Department",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add a department",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/create-test-data": {
      "post": {
        "operationId": "Department_CreateTestData",
        "parameters": [
          {
            "description": "Number of departments to be created",
            "in": "query",
            "name": "numberOfDept",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generate test data",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/export": {
      "get": {
        "operationId": "Department_ExportDepartment",
        "parameters": [
          {
            "description": "file type ",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Department by Name, Department Number or Name of Parent.",
            "in": "query",
            "name": "filter",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "DepartmentNumber",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export departments data",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/get-department-tree": {
      "get": {
        "operationId": "Department_GetDepartmentHierarchy",
        "parameters": [
          {
            "description": "Query string that filter Department by Name, Department Number or Name of Parent.",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "DepartmentName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get department as hierarchy form.",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/hierarchy": {
      "get": {
        "operationId": "Department_GetListDepartment",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of all departments as hierarchy",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/import": {
      "post": {
        "operationId": "Department_ImportDepartment",
        "parameters": [
          {
            "description": "type file import (excel, csv)",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import departments data",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/parent-department": {
      "get": {
        "operationId": "Department_GetListParentDepartment",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list parent department",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/{id}": {
      "delete": {
        "operationId": "Department_Delete",
        "parameters": [
          {
            "description": "Department Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete a department by id",
        "tags": [
          "Department"
        ]
      },
      "get": {
        "operationId": "Department_Get",
        "parameters": [
          {
            "description": "Department Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get a department by Id",
        "tags": [
          "Department"
        ]
      },
      "put": {
        "operationId": "Department_Edit",
        "parameters": [
          {
            "description": "Department Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentModel"
              }
            }
          },
          "description": "JSON model for Department",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "edit a department",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/{id}/assign": {
      "post": {
        "operationId": "Department_AssignUsers",
        "parameters": [
          {
            "description": "Department Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List user Id",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/{id}/assign-doors": {
      "post": {
        "operationId": "Department_DepartmentAssignDoors",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "doorIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign door to department",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/{id}/un-assign": {
      "post": {
        "operationId": "Department_UnAssignUsers",
        "parameters": [
          {
            "description": "Department Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List user Id",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/{id}/unassign-doors": {
      "post": {
        "operationId": "Department_DepartmentUnAssignDoors",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "doorIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Unassign door of department",
        "tags": [
          "Department"
        ]
      }
    },
    "/departments/{id}/users-un-assign": {
      "get": {
        "operationId": "Department_GetUserUnAssign",
        "parameters": [
          {
            "description": "Department Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FullName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Department"
        ]
      }
    },
    "/device-init": {
      "get": {
        "operationId": "Device_GetDeviceInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "init device page",
        "tags": [
          "Device"
        ]
      }
    },
    "/device-message": {
      "get": {
        "operationId": "DeviceMessage_Get",
        "parameters": [
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "MessageId",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for all device message list",
        "tags": [
          "DeviceMessage"
        ]
      }
    },
    "/device-message/{id}": {
      "put": {
        "operationId": "DeviceMessage_Edit",
        "parameters": [
          {
            "description": "message device id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceMessageModel"
              }
            }
          },
          "description": "JSON model for message device",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit a message device",
        "tags": [
          "DeviceMessage"
        ]
      }
    },
    "/devices": {
      "delete": {
        "operationId": "Device_DeleteMultiple",
        "parameters": [
          {
            "description": "list of devices to delete",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete devices by multi id ( 1~multi device(s) )",
        "tags": [
          "Device"
        ]
      },
      "get": {
        "operationId": "Device_Gets",
        "parameters": [
          {
            "description": "Query string that filter Devices by Name, Device Address or Name of Building",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Device type",
            "explode": true,
            "in": "query",
            "name": "deviceType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "doorName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "operation type (restaurant - 1, entrance - 0)",
            "explode": true,
            "in": "query",
            "name": "operationType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "Company Id",
            "explode": true,
            "in": "query",
            "name": "companyId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "status connection",
            "explode": true,
            "in": "query",
            "name": "connectionStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "list of status device",
            "explode": true,
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "in": "query",
            "name": "pageName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "list of Building Ids",
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "list of meal service time ids",
            "explode": true,
            "in": "query",
            "name": "mealServiceTimeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "Option get all list building parent",
            "in": "query",
            "name": "isAllBuildingParent",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-position": 14
          },
          {
            "description": "a flag to distinguish calculating registered user count ",
            "in": "query",
            "name": "checkCount",
            "schema": {
              "default": 2,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 15
          },
          {
            "explode": true,
            "in": "query",
            "name": "ignoreIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 16
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for all device list",
        "tags": [
          "Device"
        ]
      },
      "post": {
        "operationId": "Device_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceModel"
              }
            }
          },
          "description": "This model has information about the device to be added.",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add device to system",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/accessible-user": {
      "get": {
        "operationId": "Device_GetAccessibleUserByDevices",
        "parameters": [
          {
            "description": "Device Id",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "description": "Query string that filter Accessible Users by Name, Name of Department or string ExpiredDate",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "name valie to filter ",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "position value to filter ",
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "employee number value to filter ",
            "in": "query",
            "name": "empNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "list of department identifier to filter ",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "list of worktype identifier ",
            "explode": true,
            "in": "query",
            "name": "workTypeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "explode": true,
            "in": "query",
            "name": "category",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 10
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for accessible user list",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/accessible-user/export": {
      "get": {
        "operationId": "Device_ExportAccessibleUserByDevices",
        "parameters": [
          {
            "description": "List of device Id",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "description": "Query string that filter Accessible Users by Name, Name of Department or string ExpiredDate",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "valid user or invalid user or all user",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "name valie to filter ",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "position value to filter ",
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "employee number value to filter ",
            "in": "query",
            "name": "empNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "list of department identifier to filter ",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "list of worktype identifier ",
            "explode": true,
            "in": "query",
            "name": "workTypeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "explode": true,
            "in": "query",
            "name": "category",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "Type of file export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export out file for list of accessible users (multiple devices)",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/add-missing-devices": {
      "post": {
        "operationId": "UnregistedDevice_AddMissingDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "a list of unregistered device's identifier ",
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a missingDevice to icuDevice",
        "tags": [
          "UnregistedDevice"
        ]
      }
    },
    "/devices/config/active-face-license": {
      "post": {
        "operationId": "Device_ConfigActiveFaceLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigActiveFace"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Config send license to active face for device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/config/alarm": {
      "post": {
        "operationId": "Device_TurnOnOrOffAlarm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigAlarmModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Turn on/off alarm (ICU 2nd relay)",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/config/local-mqtt": {
      "post": {
        "operationId": "Device_ConfigLocalMqtt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigLocalMqttModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Config local mqtt for device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/create-test-data": {
      "post": {
        "operationId": "Device_CreateTestData",
        "parameters": [
          {
            "description": "number of device to test",
            "in": "query",
            "name": "numberOfDevice",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generate test data",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/detect-new-devices": {
      "get": {
        "operationId": "UnregistedDevice_GetUnregisterDevices",
        "parameters": [
          {
            "description": "Query string that filter by device address or ip address",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the missingDevice(s)",
        "tags": [
          "UnregistedDevice"
        ]
      }
    },
    "/devices/door-bell/check-room-status": {
      "get": {
        "operationId": "Device_CheckStatusOfVideoCall",
        "parameters": [
          {
            "description": "room identity (room name)",
            "in": "query",
            "name": "rid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check status of room RID device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/door-bell/open": {
      "post": {
        "operationId": "Device_OpenDoorByVideoDoorBell",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JitsiTokenModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "open door when video call door-bell",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/door-bell/request-call": {
      "get": {
        "operationId": "Device_CallToReceptionDevice",
        "parameters": [
          {
            "in": "query",
            "name": "rid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "The user request call to reception device. If rid empty, it will call all of reception devices",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/exist": {
      "post": {
        "operationId": "Device_CheckRIDExist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRidModel"
              }
            }
          },
          "description": "This model has the address of device. ",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Check the RID is existing in server.",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/file-logs": {
      "get": {
        "operationId": "Device_GetAllLogsOfDevice",
        "parameters": [
          {
            "description": "identity of device",
            "in": "query",
            "name": "deviceId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all file logs of device by deviceId",
        "tags": [
          "Device"
        ]
      },
      "post": {
        "operationId": "Device_UploadLogDevice",
        "parameters": [
          {
            "description": "device address",
            "in": "query",
            "name": "rid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "message id of mqtt",
            "in": "query",
            "name": "msgId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "hash md5 (msgId + rid + companyCode)",
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Device will use this api to upload file logs",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/grpc/add-ip-manual": {
      "post": {
        "operationId": "UnregistedDevice_AddManualDeviceSuprema",
        "parameters": [
          {
            "in": "query",
            "name": "ipAddress",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add manual device suprema by ip address",
        "tags": [
          "UnregistedDevice"
        ]
      }
    },
    "/devices/init": {
      "get": {
        "operationId": "Device_GetInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/initialize": {
      "get": {
        "operationId": "Device_GetList",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get initialize data of device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/list-device-type": {
      "get": {
        "operationId": "Device_GetListDeviceTypes",
        "parameters": [
          {
            "description": "List of Device Ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get device type list",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/list-filter": {
      "get": {
        "operationId": "Device_FilterCompanyAndDeviceType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get devices filtered by company and deviceType",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/master-card": {
      "get": {
        "operationId": "Device_GetMasterCard",
        "parameters": [
          {
            "description": "Query string that filter Devices(Master card) by Device Address or Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for all device list(master card)",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/recheck-uptime": {
      "put": {
        "operationId": "Device_ReUpdateUpTimeOnlineDevice",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Re-update uptime for all of list devices",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/reinstall-devices": {
      "post": {
        "operationId": "Device_ReinstallDevices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ReinstallDeviceDetail"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of ReinstallDeviceDetail class.\n                                        This class includes DeviceId and ProcessId.\n                                        DeviceId is device id to reinstall.\n                                        ProcessId is process id made by web app to show percentage through progress bar.",
          "required": true,
          "x-name": "deviceDetails",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reinstall the devices",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/send-debug-setting": {
      "post": {
        "operationId": "Device_SendDeviceDebugSetting",
        "parameters": [
          {
            "description": "device address ",
            "in": "query",
            "name": "rid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Type value for debug. 0: Debug NO, 1: Debug OK, ...",
            "in": "query",
            "name": "debugType",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "send device instruction command by using RID",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/send-device-instruction": {
      "post": {
        "operationId": "Device_SendDeviceInstruction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceInstruction"
              }
            }
          },
          "description": "This model has information about instruction.",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "send device instruction command.",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/send-device-instruction-rid": {
      "post": {
        "operationId": "Device_SendDeviceInstructionRID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceInstructionRID"
              }
            }
          },
          "description": "This model has information about instruction.",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "send device instruction command by using RID",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/stop-process": {
      "post": {
        "operationId": "Device_StopProcess",
        "parameters": [
          {
            "description": "list device ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of process ids",
          "required": true,
          "x-name": "processIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Stop update firmware for list of device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/sub-display-info": {
      "get": {
        "operationId": "Device_GetSubDeviceInfo",
        "parameters": [
          {
            "description": "token device",
            "in": "query",
            "name": "token",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get sub-display device info (last of event-log) by token device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/token/sub-display-info": {
      "post": {
        "operationId": "Device_GetTokenSubDeviceInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTokenSubDisplayModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get token sub-display device information",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/transmit-data": {
      "post": {
        "description": "Edward, 2020-02-03.",
        "operationId": "Device_TransmitData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransmitDataModel"
              }
            }
          },
          "description": "This model has information about the device to receive data.  ",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "transmit data to device(s).",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/transmit-info": {
      "get": {
        "operationId": "Device_GetTransmitInfo",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get Transmit information",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/unregistered-devices": {
      "delete": {
        "operationId": "UnregistedDevice_Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of unregistered device's identifier ",
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete unregistered device from database",
        "tags": [
          "UnregistedDevice"
        ]
      },
      "get": {
        "operationId": "UnregistedDevice_GetUnregisteredDevices",
        "parameters": [
          {
            "description": "Query string that filter by device address or ip address",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the missingDevice(s)",
        "tags": [
          "UnregistedDevice"
        ]
      }
    },
    "/devices/upload-file": {
      "post": {
        "operationId": "Device_UploadFileProgress",
        "parameters": [
          {
            "description": "file upload include list of device to update",
            "explode": true,
            "in": "query",
            "name": "models",
            "schema": {
              "items": {},
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "file upload to update device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/user-info-by-cardid": {
      "get": {
        "operationId": "Device_GetUserInfoByCardIdwithRid",
        "parameters": [
          {
            "description": "device address number",
            "in": "query",
            "name": "address",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Card ID",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user infomation by user's card ID\nSearch device by deviceAddress",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/valid": {
      "get": {
        "operationId": "Device_GetValidDevice",
        "parameters": [
          {
            "description": "Query string that filter Devices by Name or Device Address",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Company Id",
            "explode": true,
            "in": "query",
            "name": "companyId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "status connection",
            "explode": true,
            "in": "query",
            "name": "connectionStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "Device type",
            "explode": true,
            "in": "query",
            "name": "deviceType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for all device list",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}": {
      "delete": {
        "operationId": "Device_Delete",
        "parameters": [
          {
            "description": "device id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete device by id ( only 1 device )",
        "tags": [
          "Device"
        ]
      },
      "get": {
        "operationId": "Device_Get",
        "parameters": [
          {
            "description": "device id to get",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get device information by id",
        "tags": [
          "Device"
        ]
      },
      "put": {
        "operationId": "Device_Edit",
        "parameters": [
          {
            "description": "device id to edit",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceModel"
              }
            }
          },
          "description": "This model has modified information about the device.",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update device information",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/accessible-user": {
      "get": {
        "operationId": "Device_GetAccessibleUser",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Accessible Users by Name, Name of Department or string ExpiredDate",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for accessible user list",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/accessible-user/export": {
      "get": {
        "operationId": "Device_ExportAccessibleUser",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Accessible Users by Name, Name of Department or string ExpiredDate",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "empNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "explode": true,
            "in": "query",
            "name": "workTypeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "explode": true,
            "in": "query",
            "name": "category",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "in": "query",
            "name": "culture",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "Type of file export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export out file for list of accessible users",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/assign-users": {
      "post": {
        "operationId": "Device_AssignUsersToDevice",
        "parameters": [
          {
            "description": "Device identifier. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of identifiers for the users. ",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign users to device.",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/check-device-info": {
      "get": {
        "operationId": "Device_CheckDeviceInfo",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Message Device Id",
            "in": "query",
            "name": "msgId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check Device information",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/check-holiday-info": {
      "get": {
        "operationId": "Device_CheckHolidayInfo",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Message Device Id",
            "in": "query",
            "name": "msgId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check Holiday information of Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/check-timezone-info": {
      "get": {
        "operationId": "Device_CheckTimezoneInfo",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Message Device Id",
            "in": "query",
            "name": "msgId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check Timezone information of Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/check-user-info": {
      "get": {
        "operationId": "Device_CheckUserInfo",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check User information of Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/check-user-info/compare": {
      "get": {
        "operationId": "Device_CheckUserInfoCompare",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Message Id with load user",
            "in": "query",
            "name": "msgId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check User information of Device (Compare data device and server)",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/copy-device-settings": {
      "post": {
        "operationId": "Device_CopyDevices",
        "parameters": [
          {
            "description": "Device Id template",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "JSON model for list of Device Ids to copy",
          "required": true,
          "x-name": "ids",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Copy device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/export-user-info": {
      "get": {
        "operationId": "Device_ExportUser",
        "parameters": [
          {
            "description": "device identifier ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export User data",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/export-user-master-card": {
      "get": {
        "operationId": "Device_ExportUserMasterCard",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export user using master card by device id",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/face-capture": {
      "post": {
        "operationId": "Device_SendCaptureRequest",
        "parameters": [
          {
            "description": "This value is device's identifier.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Send capture request command to device.",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/file-logs": {
      "get": {
        "operationId": "Device_DownloadFileLogOfDevice",
        "parameters": [
          {
            "description": "device id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "if fileName is empty, the server will send to all logs (zip file)",
            "in": "query",
            "name": "fileName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download file log of device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/grpc/reconnect": {
      "post": {
        "operationId": "Device_ReconnectDeviceSuprema",
        "parameters": [
          {
            "description": "id of device",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reconnect suprema device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/history": {
      "get": {
        "description": "Edward, 2020-03-06.",
        "operationId": "Device_GetDeviceHistory",
        "parameters": [
          {
            "description": "device id to get. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "(Optional) current page number. ",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "(Optional) Number of items to show on a page. ",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The device history. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "gets device history.",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/pinpad": {
      "get": {
        "operationId": "Device_GetPinFromDevice",
        "parameters": [
          {
            "description": "device's identification ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get PIN Number of device",
        "tags": [
          "Device"
        ]
      },
      "post": {
        "operationId": "Device_AddPinToDevice",
        "parameters": [
          {
            "description": "device's identification ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinPadModel"
              }
            }
          },
          "description": "PinPad model data ( PinNumber, StartDate, EndDate )",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add PIN Number to Device",
        "tags": [
          "Device"
        ]
      },
      "put": {
        "operationId": "Device_UpdatePinToDevice",
        "parameters": [
          {
            "description": "device's identification ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinPadModel"
              }
            }
          },
          "description": "PinPad model data ( PinNumber, StartDate, EndDate )",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update PIN Number to Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/recheck-uptime": {
      "put": {
        "operationId": "Device_ReUpdateUpTimeOnlineDeviceById",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Re-update uptime by id",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/registered-card": {
      "get": {
        "operationId": "Device_GetRegisteredCardsByType",
        "parameters": [
          {
            "description": "identifier of device ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get registered cards",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/request-file-logs": {
      "get": {
        "operationId": "Device_RequestLogFile",
        "parameters": [
          {
            "description": "device id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Request file log of device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/sync-user-from-device": {
      "get": {
        "operationId": "Device_SyncUserFromDevice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "progressId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Request sync data of list user from device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/toggle-status": {
      "post": {
        "operationId": "Device_ToggleStatus",
        "parameters": [
          {
            "description": "Device ID to change status",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceStatus"
              }
            }
          },
          "description": "This model has information about device status.",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Change device status to Valid or Invalid",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/unaccessible-user": {
      "get": {
        "operationId": "Device_GetUnAccessibleUser",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Accessible Users by Name, Name of Department or string ExpiredDate",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for un accessible user list",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/unassign-users": {
      "delete": {
        "operationId": "Device_UnassignUsersFromDevice",
        "parameters": [
          {
            "description": "Device identifier. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "boolean value that means \"ok\" or \"no\" in dialog. ",
            "in": "query",
            "name": "ok",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of identifiers for the users. ",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Un-assign users to device.",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/update-device-info": {
      "patch": {
        "operationId": "Device_GetDeviceInfoResponse",
        "parameters": [
          {
            "description": "device id to get information about",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get device infomation in response. ( ex. Send current time )",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/user-info": {
      "get": {
        "operationId": "Device_GetUserInfo",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Card Id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get information user of Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/user-info-by-cardid": {
      "get": {
        "operationId": "Device_GetUserInfoByCardId",
        "parameters": [
          {
            "description": "device ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Card ID",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user infomation by user's card ID",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}/user-master-card": {
      "get": {
        "operationId": "Device_GetUserMasterCard",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "CardId",
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for all username using master card by device id",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{rid}/door-bell": {
      "get": {
        "operationId": "Device_CallVideoDoorBell",
        "parameters": [
          {
            "description": "device address",
            "in": "path",
            "name": "rid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "department number",
            "in": "query",
            "name": "number",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "can use accountId if not use department number",
            "in": "query",
            "name": "accountId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "can use deviceAddress if use device call to device",
            "in": "query",
            "name": "deviceAddress",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Hash MD5 (companyCode + rid + HHmmddMMyyyy)",
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Calling user as video doorbell",
        "tags": [
          "Device"
        ]
      }
    },
    "/doors-dept-assign": {
      "get": {
        "operationId": "Department_DepartmentDeviceAssigned",
        "parameters": [
          {
            "in": "query",
            "name": "departmentId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list device assigned in department",
        "tags": [
          "Department"
        ]
      }
    },
    "/doors-dept-unassign": {
      "get": {
        "operationId": "Department_DepartmentDeviceUnAssigned",
        "parameters": [
          {
            "in": "query",
            "name": "departmentId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list device unAssigned in department",
        "tags": [
          "Department"
        ]
      }
    },
    "/duali/attendance": {
      "get": {
        "operationId": "EventLog_GetEventLogForAttendance",
        "parameters": [
          {
            "description": "start date ",
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "end date ",
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "list of identifier of user ",
            "explode": true,
            "in": "query",
            "name": "userIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "list of identifier of department ",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get event log for attendence",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/elevators": {
      "get": {
        "operationId": "Elevator_GetsByCompany",
        "parameters": [
          {
            "description": "search by name elevator",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list elevator with company",
        "tags": [
          "Elevator"
        ]
      },
      "post": {
        "operationId": "Elevator_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElevatorModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new elevator",
        "tags": [
          "Elevator"
        ]
      }
    },
    "/elevators/access-groups/{id}/assign-floors": {
      "post": {
        "operationId": "Elevator_AssignFloors",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign floors of access group",
        "tags": [
          "Elevator"
        ]
      }
    },
    "/elevators/access-groups/{id}/floors": {
      "get": {
        "operationId": "Elevator_ElevatorGetFloors",
        "parameters": [
          {
            "description": "access group id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "search by name elevator",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of floors assign",
        "tags": [
          "Elevator"
        ]
      }
    },
    "/elevators/access-groups/{id}/unassign-floors": {
      "post": {
        "operationId": "Elevator_UnAssignFloors",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Un-Assign floors of access group",
        "tags": [
          "Elevator"
        ]
      }
    },
    "/elevators/access-groups/{id}/unassigned-floors": {
      "get": {
        "operationId": "Elevator_GetUnAssignFloors",
        "parameters": [
          {
            "description": "access group id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "search by name elevator",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of floors un-assign",
        "tags": [
          "Elevator"
        ]
      }
    },
    "/elevators/{id}": {
      "delete": {
        "operationId": "Elevator_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete elevator by id",
        "tags": [
          "Elevator"
        ]
      },
      "get": {
        "operationId": "Elevator_GetById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get by id",
        "tags": [
          "Elevator"
        ]
      },
      "put": {
        "operationId": "Elevator_Edit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElevatorModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "update elevator by id",
        "tags": [
          "Elevator"
        ]
      }
    },
    "/event-logs": {
      "get": {
        "operationId": "EventLog_EventLogs",
        "parameters": [
          {
            "description": "This parameter set string of access date time start",
            "in": "query",
            "name": "from",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "This parameter set string of access date time end",
            "in": "query",
            "name": "to",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Person type",
            "explode": true,
            "in": "query",
            "name": "personType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "[Integer (1~44)]This parameter can be filtered when searching for specific events. ex) General access: 1 (Refer to the manual for event type definition.)",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 4
          },
          {
            "description": "[String]This parameter allows you to filter the username.",
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "[Integer (0, 1)This parameter can filter the In/Out type of the door. ex) In : 0, Out : 1",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "[String]This parameter allows you to filter the card ID.",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "[Integer]This parameter can filter the ID of the door.",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "[String]This parameter allows you to filter the building ids.",
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "[String]This parameter can filter the department ids.",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "[Integer (0~3)]This parameter allows you to filter the authentication mode.",
            "explode": true,
            "in": "query",
            "name": "verifyModeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "Company Id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 12
          },
          {
            "description": "Only valid user of only invalid user of all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 14
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 15
          },
          {
            "description": "Sort Column by string of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This is an API that can inquire access events.\nData is output in order of progress number, access time, name, date of birth, user code, department, card number, RID, door name, place (building name), entry/exit, and event type.\nThis function is used in Monitoring page.\nFilter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/access-statistics": {
      "get": {
        "operationId": "EventLog_GetAccessStatistics",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 4
          },
          {
            "description": "\"person\" or \"vehicle\"",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "person",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get access statistics",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/backup": {
      "get": {
        "operationId": "EventLog_DownloadFileBackup",
        "parameters": [
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download file .zip backup",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/backup/files": {
      "get": {
        "operationId": "EventLog_GetAllFileBackup",
        "parameters": [
          {
            "in": "query",
            "name": "self",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all files backup with company",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/create-test-data": {
      "post": {
        "operationId": "EventLog_CreateTestData",
        "parameters": [
          {
            "description": "number of events",
            "in": "query",
            "name": "numberOfevent",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generate test data",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/export": {
      "get": {
        "operationId": "EventLog_Export",
        "parameters": [
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "[Integer (1~44)]This parameter can be filtered when searching for specific events. ex) General access: 1 (Refer to the manual for event type definition.)",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "[String]This parameter allows you to filter the username.",
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "explode": true,
            "in": "query",
            "name": "workType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "[Integer (0, 1)This parameter can filter the In/Out type of the door. ex) In : 0, Out : 1",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "[String]This parameter allows you to filter the card ID.",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "[String]This parameter allows you to filter search all.",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "[Integer]This parameter can filter the ID of the door.",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "[String]This parameter allows you to filter the building ids.",
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "[String]This parameter can filter the department ids.",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "List of card types",
            "explode": true,
            "in": "query",
            "name": "cardType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 14
          },
          {
            "description": "[Integer (0~3)]This parameter allows you to filter the authentication mode.",
            "explode": true,
            "in": "query",
            "name": "verifyModeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 15
          },
          {
            "description": "Company Id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 16
          },
          {
            "description": "only valid user or only invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 17
          },
          {
            "description": "Type of file to export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 18
          },
          {
            "description": "Sort Column by string of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 19
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 20
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export event log to file. Filter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/exportpdf": {
      "get": {
        "operationId": "EventLog_EventLogPdfView",
        "parameters": [
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "[Integer (1~44)]This parameter can be filtered when searching for specific events. ex) General access: 1 (Refer to the manual for event type definition.)",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "[String]This parameter allows you to filter the username.",
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "[Integer (0, 1)This parameter can filter the In/Out type of the door. ex) In : 0, Out : 1",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "[String]This parameter allows you to filter the card ID.",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "search all",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "[Integer]This parameter can filter the ID of the door.",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "[String]This parameter allows you to filter the building ids.",
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "[String]This parameter can filter the department ids.",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "[Integer (0~3)]This parameter allows you to filter the authentication mode.",
            "explode": true,
            "in": "query",
            "name": "verifyModeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "Company Id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 14
          },
          {
            "description": "Only valid user or only invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 15
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "View the event log data through pdf file. Filter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/hvqy": {
      "post": {
        "operationId": "EventLog_GetEventLogHVQY",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/HVQYRequestEvent"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "userHvqyModels",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get status \"VaoMuon\" from event log dmp to HVQY",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/images": {
      "post": {
        "operationId": "EventLog_UploadImagePlateNumber",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Upload image plate number",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/in-out-status/unit-vehicle": {
      "get": {
        "operationId": "EventLog_GetUnitVehicleInOutStatus",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "serviceStartTime",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "reserveStartTime",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 7
          },
          {
            "in": "query",
            "name": "reserveEndTime",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 8
          },
          {
            "in": "query",
            "name": "managerName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "in": "query",
            "name": "driverName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "in": "query",
            "name": "unitVehicleName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "in": "query",
            "name": "plateNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "in": "query",
            "name": "rfid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get in-out status of Unit-Vehicle",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/in-out-status/user": {
      "get": {
        "operationId": "EventLog_GetUserInOutStatus",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "explode": true,
            "in": "query",
            "name": "deviceIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "explode": true,
            "in": "query",
            "name": "workTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "explode": true,
            "in": "query",
            "name": "inOut",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "in": "query",
            "name": "lastEventTime",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 10
          },
          {
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "in": "query",
            "name": "militaryNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get in-out status of users by using eventLogs",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/in-out-status/vehicle": {
      "get": {
        "operationId": "EventLog_GetVehicleInOutStatus",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "explode": true,
            "in": "query",
            "name": "deviceIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "explode": true,
            "in": "query",
            "name": "workTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "explode": true,
            "in": "query",
            "name": "inOut",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "in": "query",
            "name": "lastEventTIme",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 10
          },
          {
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "in": "query",
            "name": "model",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "in": "query",
            "name": "color",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "in": "query",
            "name": "plateNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get in-out status of vehicle by using eventLogs",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/init": {
      "get": {
        "operationId": "EventLog_EventLogInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Init data for function event log",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/inquiry": {
      "get": {
        "operationId": "EventLog_EventCountInquiry",
        "parameters": [
          {
            "description": "List of device ids",
            "explode": true,
            "in": "query",
            "name": "deviceIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Query string that filter Device by Name, Device Address or Building Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 8
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Device List for Event Recovery",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/open/report": {
      "get": {
        "operationId": "EventLog_OpenAPIEventReport",
        "parameters": [
          {
            "description": "User ID",
            "in": "query",
            "name": "id",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "return Event log for 1 user"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Open API-User event inquiry",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/record-videos": {
      "post": {
        "operationId": "EventLog_UploadVideoEventLog",
        "parameters": [
          {
            "in": "query",
            "name": "rid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "startTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Upload record video",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/recovery": {
      "post": {
        "operationId": "EventLog_EventRecovery",
        "parameters": [
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EventRecoveryProgressModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "JSON model for array object(device id and process id)",
          "required": true,
          "x-name": "eventRecoveryProgressModels",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Event Recovery. Filter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/recovery-list": {
      "get": {
        "operationId": "EventLog_GetDeviceList",
        "parameters": [
          {
            "description": "Query string that filter Device by Name, Device Address or Building Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Device List for Event Recovery. Filter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/recovery/db-file": {
      "post": {
        "operationId": "EventLog_RecoveryDeviceDBFile",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "ProcessId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Recovery events by using DB file that was used in Device.",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/related": {
      "get": {
        "operationId": "EventLog_GetEventLogRelated",
        "parameters": [
          {
            "in": "query",
            "name": "eventLogId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "visitId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "explode": true,
            "in": "query",
            "name": "eventTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 4
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list event-logs related",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/report": {
      "get": {
        "operationId": "EventLog_EventReport",
        "parameters": [
          {
            "description": "This parameter set string of access date time start",
            "in": "query",
            "name": "from",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "This parameter set string of access date time end",
            "in": "query",
            "name": "to",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "[Integer]This parameter can filter the ID of the door.",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "[String]This parameter allows you to filter the username.",
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "[String]This parameter allows you to filter the card ID.",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "This parameter can filter the department ids",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "explode": true,
            "in": "query",
            "name": "workType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "[Integer (0, 1)This parameter can filter the In/Out type of the door. ex) In : 0, Out : 1",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "[Integer (1~44)]This parameter can be filtered when searching for specific events. ex) General access: 1 (Refer to the manual for event type definition.)",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "[String]This parameter allows you to filter the building name.",
            "explode": true,
            "in": "query",
            "name": "buildingList",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "Type of Card",
            "explode": true,
            "in": "query",
            "name": "cardType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "This parameter set culture",
            "in": "query",
            "name": "culture",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "Only valid user of only invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 14
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 15
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This function is used in Report page. Filter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/report/export": {
      "get": {
        "operationId": "EventLog_ExportReport",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "[Integer (1~44)]This parameter can be filtered when searching for specific events. ex) General access: 1 (Refer to the manual for event type definition.)",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "[String]This parameter allows you to filter the username.",
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "[Integer (0, 1)This parameter can filter the In/Out type of the door. ex) In : 0, Out : 1",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "[String]This parameter allows you to filter the card ID.",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "[String]This parameter allows you to filter the search all",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "[Integer]This parameter can filter the ID of the door.",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "[String]This parameter allows you to filter the building name.",
            "explode": true,
            "in": "query",
            "name": "buildingList",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "This parameter can filter the department ids.",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "explode": true,
            "in": "query",
            "name": "workType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "Type of card",
            "explode": true,
            "in": "query",
            "name": "cardType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "Company Id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 13
          },
          {
            "description": "localization code ",
            "in": "query",
            "name": "culture",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "Type of file to export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          },
          {
            "description": "Only valid user or only invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 16
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 18
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export 2 - Export file report event log. Filter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/report/init": {
      "get": {
        "operationId": "EventLog_EventLogReportInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Init data for function event log report",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/screen-monitoring": {
      "get": {
        "operationId": "EventLog_GetEventByTokenScreenMonitoring",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get event log and init page monitoring by token",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/screen-monitoring-school": {
      "get": {
        "operationId": "EventLog_GetEventByTokenScreenMonitoringToSchool",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get event log and init page monitoring by token",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/videos": {
      "post": {
        "operationId": "EventLog_UploadVideoPlateNumber",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Upload video plate number",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/visittype-count": {
      "get": {
        "operationId": "EventLog_GetCountByVisitType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the latest event-logs and figure out the count by visitor Type",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/worktype": {
      "get": {
        "operationId": "EventLog_GetEventLogByWorkType",
        "parameters": [
          {
            "description": "list of device identifier (DB index)  ",
            "explode": true,
            "in": "query",
            "name": "deviceIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "description": "list of eventType ",
            "explode": true,
            "in": "query",
            "name": "eventTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "description": "List of workType to get EventLog ",
            "explode": true,
            "in": "query",
            "name": "workTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "List of in/Out type ",
            "explode": true,
            "in": "query",
            "name": "inOut",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the latest event-logs and figure out the count by workType",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/worktype-count": {
      "get": {
        "operationId": "EventLog_GetCountByWorkType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the latest event-logs and figure out the count by workType",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/{id}": {
      "get": {
        "operationId": "EventLog_GetEventLogDetailById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detail event-logs by id",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/{id}/body-temperature": {
      "post": {
        "operationId": "EventLog_UpdateBodyTemperature",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BodyTemperatureModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update Body-Temperature",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/{rid}/images": {
      "post": {
        "operationId": "EventLog_UploadImageToEventLog",
        "parameters": [
          {
            "in": "path",
            "name": "rid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadImageEventModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Upload image to update image of event-log",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-logs/{rid}/images-checkin-visit": {
      "post": {
        "operationId": "EventLog_UploadImageCheckinVisitToEventLog",
        "parameters": [
          {
            "in": "path",
            "name": "rid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadImageVisitCheckinModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "When register visit by Android Terminal Device, that device will upload file checkin",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-memo": {
      "get": {
        "operationId": "EventLog_GetListEventMemos",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "eventLogIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get multiple Event Memo data by event log ids",
        "tags": [
          "EventLog"
        ]
      },
      "post": {
        "operationId": "EventLog_AddEventMemo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventMemoModel"
              }
            }
          },
          "required": true,
          "x-name": "eventMemoModel",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a Event Memo",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-memo/log/{id}": {
      "get": {
        "operationId": "EventLog_GetEventMemoByEventLogId",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Event Memo Data by event log id",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/event-memo/{id}": {
      "delete": {
        "operationId": "EventLog_DeleteEventMemo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete the Event Memo by event memo id",
        "tags": [
          "EventLog"
        ]
      },
      "put": {
        "operationId": "EventLog_EditEventMemo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventMemoModel"
              }
            }
          },
          "required": true,
          "x-name": "eventMemoModel",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit the Event Memo by event memo id",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/eventrcv": {
      "post": {
        "operationId": "WebhookAnonymous_HikvisionReceiveEvent",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/exceptional-meals": {
      "get": {
        "operationId": "ExceptionalMeal_GetListlistExceptionalMeal",
        "parameters": [
          {
            "description": "Not use",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of exceptional meal",
        "tags": [
          "ExceptionalMeal"
        ]
      },
      "post": {
        "operationId": "ExceptionalMeal_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddExceptionalMealModel"
              }
            }
          },
          "description": "JSON model for Exception Meal",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a Exception Meal(User Discount)",
        "tags": [
          "ExceptionalMeal"
        ]
      }
    },
    "/exceptional-meals/{id}": {
      "delete": {
        "operationId": "ExceptionalMeal_Delete",
        "parameters": [
          {
            "description": "Exceptional meal id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete exceptional meal by id",
        "tags": [
          "ExceptionalMeal"
        ]
      },
      "get": {
        "operationId": "ExceptionalMeal_GetExceptionalMeal",
        "parameters": [
          {
            "description": "Exceptional meal id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detail of Exceptional meal",
        "tags": [
          "ExceptionalMeal"
        ]
      },
      "put": {
        "operationId": "ExceptionalMeal_Update",
        "parameters": [
          {
            "description": "Exceptional meal id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddExceptionalMealModel"
              }
            }
          },
          "description": "JSON model for Exception Meal",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit Exception Meal(User Discount) by Id",
        "tags": [
          "ExceptionalMeal"
        ]
      }
    },
    "/exceptional-users": {
      "delete": {
        "operationId": "UserDiscount_DeleteMultiple",
        "parameters": [
          {
            "description": "List of User Discount Ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multiple userDiscount",
        "tags": [
          "UserDiscount"
        ]
      },
      "get": {
        "operationId": "UserDiscount_GetListUserDiscount",
        "parameters": [
          {
            "description": "Query string that filter by user name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of user discount with pagination",
        "tags": [
          "UserDiscount"
        ]
      },
      "post": {
        "operationId": "UserDiscount_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserDiscountModel"
              }
            }
          },
          "description": "JSON model for User Discount",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a User Discount",
        "tags": [
          "UserDiscount"
        ]
      }
    },
    "/exceptional-users/type-list": {
      "get": {
        "operationId": "UserDiscount_GetCodeList",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a list of available discount type.",
        "tags": [
          "UserDiscount"
        ]
      }
    },
    "/exceptional-users/{id}": {
      "delete": {
        "operationId": "UserDiscount_Delete",
        "parameters": [
          {
            "description": "UserDiscount Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete an UserDiscount",
        "tags": [
          "UserDiscount"
        ]
      },
      "get": {
        "operationId": "UserDiscount_GetUserDiscount",
        "parameters": [
          {
            "description": "User Discount Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get User Discount by Id",
        "tags": [
          "UserDiscount"
        ]
      },
      "put": {
        "operationId": "UserDiscount_Update",
        "parameters": [
          {
            "description": "identifier of userDiscount ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserDiscountModel"
              }
            }
          },
          "description": "JSON model for UserDiscount",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update User Discount by id",
        "tags": [
          "UserDiscount"
        ]
      }
    },
    "/face/upload/{cameraId}/{year}/{month}/{date}/{fileName}": {
      "get": {
        "operationId": "WebhookAnonymous_GetFileHanetFromPath",
        "parameters": [
          {
            "in": "path",
            "name": "cameraId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "path",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "path",
            "name": "month",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "path",
            "name": "date",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "path",
            "name": "fileName",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get image static from path hanet",
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/firebase-login": {
      "post": {
        "operationId": "Account_FirebaseLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirebaseLoginModel"
              }
            }
          },
          "description": "JSON model for login with firebase",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Login with firebase",
        "tags": [
          "Account"
        ]
      }
    },
    "/firmware-version": {
      "delete": {
        "operationId": "FirmwareVersion_Delete",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multi firmware version",
        "tags": [
          "FirmwareVersion"
        ]
      },
      "get": {
        "operationId": "FirmwareVersion_Gets",
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "deviceTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 25,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "version",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list firmware version",
        "tags": [
          "FirmwareVersion"
        ]
      },
      "post": {
        "operationId": "FirmwareVersion_Add",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "ContentDisposition": {
                    "nullable": true,
                    "type": "string"
                  },
                  "ContentType": {
                    "nullable": true,
                    "type": "string"
                  },
                  "FileName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "Headers": {
                    "items": {},
                    "nullable": true,
                    "type": "array",
                    "maxItems": 1000
                  },
                  "Length": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "Name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "deviceType": {
                    "type": "integer"
                  },
                  "note": {
                    "nullable": true,
                    "type": "string"
                  },
                  "version": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new firmware version",
        "tags": [
          "FirmwareVersion"
        ]
      }
    },
    "/firmware-version/device-download": {
      "get": {
        "operationId": "FirmwareVersion_DeviceDownloadFirmware",
        "parameters": [
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "MD5(fileName + companyCode + ddMMyyyyHH (UTC time))",
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Device will using this to download file firmware",
        "tags": [
          "FirmwareVersion"
        ]
      }
    },
    "/firmware-version/download": {
      "get": {
        "operationId": "FirmwareVersion_DownloadFirmwareVersion",
        "parameters": [
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download firmware version",
        "tags": [
          "FirmwareVersion"
        ]
      }
    },
    "/firmware-version/{id}/update-device": {
      "post": {
        "operationId": "FirmwareVersion_UpdateFirmwareToDevices",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "processIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update firmware",
        "tags": [
          "FirmwareVersion"
        ]
      }
    },
    "/guard-house/persons": {
      "post": {
        "operationId": "Vehicle_AddPersonAtGuardHouse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/RegistrationPersonAccessModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Registration of Personnel Access at the Guardhouse",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/guard-house/vehicles": {
      "post": {
        "operationId": "Vehicle_AddVehicleAtGuardHouse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/RegistrationVehicleAccessModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Registration of Vehicle Access at the Guardhouse",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/header": {
      "patch": {
        "description": "Edward, 2022-02-08.",
        "operationId": "Setting_EditHeaderSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/HeaderData"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "The header data model. ",
          "required": true,
          "x-name": "headerData",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "(An Action that handles HTTP PATCH requests) edit header setting.",
        "tags": [
          "Setting"
        ]
      }
    },
    "/holidays": {
      "delete": {
        "operationId": "Holiday_DeleteMultiple",
        "parameters": [
          {
            "description": "List of holiday ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete holidays by multi id",
        "tags": [
          "Holiday"
        ]
      },
      "get": {
        "operationId": "Holiday_Gets",
        "parameters": [
          {
            "description": "Query string that filter Holiday by Name or Type",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for all holiday list",
        "tags": [
          "Holiday"
        ]
      },
      "post": {
        "operationId": "Holiday_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/HolidayModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "JSON model for Holiday",
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a holiday",
        "tags": [
          "Holiday"
        ]
      }
    },
    "/holidays/{id}": {
      "delete": {
        "operationId": "Holiday_Delete",
        "parameters": [
          {
            "description": "Holiday Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete holiday by Id",
        "tags": [
          "Holiday"
        ]
      },
      "get": {
        "operationId": "Holiday_Get",
        "parameters": [
          {
            "description": "Holiday Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get holiday detail information by id",
        "tags": [
          "Holiday"
        ]
      },
      "put": {
        "operationId": "Holiday_Edit",
        "parameters": [
          {
            "description": "Holiday Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HolidayModel"
              }
            }
          },
          "description": "JSON model for holiday",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update holiday",
        "tags": [
          "Holiday"
        ]
      }
    },
    "/hvqy/room/delete": {
      "delete": {
        "operationId": "Hvqy_DeleteRoom",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "code",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/hvqy/room/list": {
      "get": {
        "operationId": "Hvqy_GetRoom",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/hvqy/room/register": {
      "post": {
        "operationId": "Hvqy_RegisterRoom",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/HvqyRoomModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/hvqy/schedule/assign": {
      "post": {
        "operationId": "Hvqy_AssignUserToSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HvqyAssignModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/hvqy/schedule/delete": {
      "delete": {
        "operationId": "Hvqy_DeleteSchedule",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "code",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/hvqy/schedule/list": {
      "get": {
        "operationId": "Hvqy_GetSchedule",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/hvqy/schedule/register": {
      "post": {
        "operationId": "Hvqy_RegisterSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/HvqyScheduleModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/hvqy/schedule/unassign": {
      "post": {
        "operationId": "Hvqy_UnAssignUserToSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HvqyAssignModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Hvqy"
        ]
      }
    },
    "/login": {
      "post": {
        "operationId": "Account_Login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            }
          },
          "description": "JSON model for login(username, password)",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Login by account and password",
        "tags": [
          "Account"
        ]
      }
    },
    "/login-step2": {
      "post": {
        "operationId": "Account_SecondLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModelWithCompany"
              }
            }
          },
          "description": "JSON model for login(companyId and temporary token)",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Login by company and token temporary",
        "tags": [
          "Account"
        ]
      }
    },
    "/logout": {
      "post": {
        "operationId": "Account_Logout",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Logout (clear current login info)",
        "tags": [
          "Account"
        ]
      }
    },
    "/mail-templates-default/{type}": {
      "get": {
        "operationId": "MailTemplate_GetDefaultMailTemplate",
        "parameters": [
          {
            "description": "Type of mail template",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get mail template default",
        "tags": [
          "MailTemplate"
        ]
      }
    },
    "/mail-templates/types": {
      "get": {
        "operationId": "MailTemplate_GetListTypeEmail",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of type email template",
        "tags": [
          "MailTemplate"
        ]
      }
    },
    "/mail-templates/types/{type}": {
      "get": {
        "operationId": "MailTemplate_GetEmailTemplate",
        "parameters": [
          {
            "description": "Type of mail template",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get email template by type",
        "tags": [
          "MailTemplate"
        ]
      },
      "put": {
        "operationId": "MailTemplate_EditEmailTemplate",
        "parameters": [
          {
            "description": "Type of mail template",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailTemplateModel"
              }
            }
          },
          "description": "JSON model of MailTemplate",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit mail template by type",
        "tags": [
          "MailTemplate"
        ]
      }
    },
    "/mail-templates/update-default": {
      "patch": {
        "operationId": "MailTemplate_UpdateDefaultMailTemplate",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "create mail template default (if null)",
        "tags": [
          "MailTemplate"
        ]
      }
    },
    "/mail-templates/update-image": {
      "put": {
        "operationId": "MailTemplate_ChangeLinkImageMailTemplate",
        "parameters": [
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "change link image email from base64 to url",
        "tags": [
          "MailTemplate"
        ]
      }
    },
    "/meal-event-log-report-buildings": {
      "get": {
        "operationId": "MealEventLog_ReportByBuilding",
        "parameters": [
          {
            "description": "Query string that filter Meal Event Logs by user name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String of Time access first",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "String of Time access end",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "List of Building Id",
            "explode": true,
            "in": "query",
            "name": "buildingId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Report by building",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-event-log-report-corners": {
      "get": {
        "operationId": "MealEventLog_ReportByCorner",
        "parameters": [
          {
            "description": "Query string that filter Meal Event Logs by user name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String of Time access first",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "String of Time access end",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "List of corner ids",
            "explode": true,
            "in": "query",
            "name": "cornerId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Report by corner",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-event-logs": {
      "get": {
        "operationId": "MealEventLog_GetListMealSetting",
        "parameters": [
          {
            "description": "Query string that filter Meal Event Logs",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String of Time access first",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "String of Time access end",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Card Id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "Department Id",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "description": "List of Meal code",
            "explode": true,
            "in": "query",
            "name": "mealCode",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "List of Event Types",
            "explode": true,
            "in": "query",
            "name": "eventTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 12
          },
          {
            "description": "List of Device Id",
            "explode": true,
            "in": "query",
            "name": "icuId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "List of Building Id",
            "explode": true,
            "in": "query",
            "name": "buildingId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 14
          },
          {
            "description": "Corner Id",
            "explode": true,
            "in": "query",
            "name": "cornerId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 15
          },
          {
            "description": "Boolean manual",
            "in": "query",
            "name": "isManual",
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 16
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get (a) meal eventLog(s) by search filter with pagination.",
        "tags": [
          "MealEventLog"
        ]
      },
      "post": {
        "operationId": "MealEventLog_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealEventLogAddModel"
              }
            }
          },
          "description": "MealType Model ",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add a mealType",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-event-logs-excels": {
      "post": {
        "operationId": "MealEventLog_Excel",
        "parameters": [
          {
            "description": "Query string that filter Meal Event Logs by user name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String of Time access first",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "String of Time access end",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Card Id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "Department Id",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "description": "List of Meal code",
            "explode": true,
            "in": "query",
            "name": "mealCode",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          },
          {
            "description": "Name of door",
            "in": "query",
            "name": "doorName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "List of Building Id",
            "explode": true,
            "in": "query",
            "name": "buildingId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "if parameter equal 1. API get all data to import excel",
            "in": "query",
            "name": "isReport",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export mealEventLog as excel",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-event-logs-excels/users": {
      "post": {
        "operationId": "MealEventLog_ExportExcelByUserId",
        "parameters": [
          {
            "description": "Query string that filter Meal Event Logs",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "String of Time access first",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "String of Time access end",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Card Id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Department Id",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "List of Meal code",
            "explode": true,
            "in": "query",
            "name": "mealCode",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "description": "List of Device Id",
            "explode": true,
            "in": "query",
            "name": "icuId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "List of Building Id",
            "explode": true,
            "in": "query",
            "name": "buildingId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "Corner Id",
            "explode": true,
            "in": "query",
            "name": "cornerId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "Boolean manual",
            "in": "query",
            "name": "isManual",
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export meal event log as excel by user",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-event-logs-reports": {
      "get": {
        "operationId": "MealEventLog_Report",
        "parameters": [
          {
            "description": "Query string that filter Meal Event Logs by user name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String of Time access first",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "String of Time access end",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Card Id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "Department Id",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "description": "List of Meal code",
            "explode": true,
            "in": "query",
            "name": "mealCode",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          },
          {
            "in": "query",
            "name": "doorName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "List of Building Id",
            "explode": true,
            "in": "query",
            "name": "buildingId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "if parameter equal 0. API get data with pagination.",
            "in": "query",
            "name": "isReport",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of Meal Event Logs. Using for page Report",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-event-logs/event-types": {
      "get": {
        "operationId": "MealEventLog_GetListEventlogEventType",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of all event types supported restaurant",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-event-logs/{id}": {
      "delete": {
        "operationId": "MealEventLog_Delete",
        "parameters": [
          {
            "description": "Meal event log Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete mealEventLog",
        "tags": [
          "MealEventLog"
        ]
      },
      "get": {
        "operationId": "MealEventLog_Get",
        "parameters": [
          {
            "description": "Meal event log Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get a mealType by Id",
        "tags": [
          "MealEventLog"
        ]
      },
      "put": {
        "operationId": "MealEventLog_Edit",
        "parameters": [
          {
            "description": "identifier of mealType ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealEventLogUpdateModel"
              }
            }
          },
          "description": "MealTypeModel ",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "edit a mealType",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meal-service-times": {
      "delete": {
        "operationId": "MealServiceTime_DeleteMultiple",
        "parameters": [
          {
            "description": "meal service time id list to delete",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "multiple delete meal service time",
        "tags": [
          "MealServiceTime"
        ]
      },
      "get": {
        "operationId": "MealServiceTime_Get",
        "parameters": [
          {
            "description": "Query string that filter Meal service times by name or remark",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return Json object for all meal service time list",
        "tags": [
          "MealServiceTime"
        ]
      },
      "post": {
        "operationId": "MealServiceTime_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealServiceTimeModel"
              }
            }
          },
          "description": "MealServiceTimeModel",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add meal service time",
        "tags": [
          "MealServiceTime"
        ]
      }
    },
    "/meal-service-times/{id}": {
      "delete": {
        "operationId": "MealServiceTime_Delete",
        "parameters": [
          {
            "description": "meal service time id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete meal service time",
        "tags": [
          "MealServiceTime"
        ]
      },
      "get": {
        "operationId": "MealServiceTime_Get2",
        "parameters": [
          {
            "description": "identifier of meal service time",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detail of 1 meal service time",
        "tags": [
          "MealServiceTime"
        ]
      },
      "put": {
        "operationId": "MealServiceTime_Edit",
        "parameters": [
          {
            "description": "meal service time id to edit",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealServiceTimeModel"
              }
            }
          },
          "description": "MealServiceTimeModel",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit meal service time",
        "tags": [
          "MealServiceTime"
        ]
      }
    },
    "/meal-settings": {
      "get": {
        "operationId": "MealSetting_GetListMealSetting",
        "parameters": [
          {
            "description": "Query string that filter Meal setting by corner name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Corner Id",
            "in": "query",
            "name": "cornerId",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of meal setting",
        "tags": [
          "MealSetting"
        ]
      },
      "post": {
        "operationId": "MealSetting_AddMealSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMealSettingModel"
              }
            }
          },
          "description": "JSON model for meal setting",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new mealSetting",
        "tags": [
          "MealSetting"
        ]
      }
    },
    "/meal-settings/{id}": {
      "delete": {
        "operationId": "MealSetting_DeleteMealSetting",
        "parameters": [
          {
            "description": "Meal setting id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Meal setting",
        "tags": [
          "MealSetting"
        ]
      },
      "get": {
        "operationId": "MealSetting_GetMealSetting",
        "parameters": [
          {
            "description": "Meal setting id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Meal setting by id",
        "tags": [
          "MealSetting"
        ]
      },
      "put": {
        "operationId": "MealSetting_UpdateMealSetting",
        "parameters": [
          {
            "description": "identifier of meal setting ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMealSettingModel"
              }
            }
          },
          "description": "JSON model for meal setting",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a meal setting by id",
        "tags": [
          "MealSetting"
        ]
      }
    },
    "/meal-settings/{id}/history": {
      "get": {
        "operationId": "MealSetting_GetMealSettingHistory",
        "parameters": [
          {
            "description": "Meal setting id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Meal setting history",
        "tags": [
          "MealSetting"
        ]
      }
    },
    "/meal-types": {
      "get": {
        "operationId": "MealType_GetMealTypes",
        "parameters": [
          {
            "description": "Query string that filter Meal types by name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by index of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get (a) meal type(s) by search filter",
        "tags": [
          "MealType"
        ]
      },
      "post": {
        "operationId": "MealType_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealTypeModel"
              }
            }
          },
          "description": "MealType Model ",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add a mealType",
        "tags": [
          "MealType"
        ]
      }
    },
    "/meal-types/code-list": {
      "get": {
        "operationId": "MealType_GetCodeList",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a list of avilable MealType code.",
        "tags": [
          "MealType"
        ]
      }
    },
    "/meal-types/{id}": {
      "delete": {
        "operationId": "MealType_Delete",
        "parameters": [
          {
            "description": "identifier of mealType ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete a mealType by id",
        "tags": [
          "MealType"
        ]
      },
      "get": {
        "operationId": "MealType_Get",
        "parameters": [
          {
            "description": "Meal type id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get a mealType by Id",
        "tags": [
          "MealType"
        ]
      },
      "put": {
        "operationId": "MealType_Edit",
        "parameters": [
          {
            "description": "identifier of mealType ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MealTypeModel"
              }
            }
          },
          "description": "MealTypeModel ",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "edit a mealType",
        "tags": [
          "MealType"
        ]
      }
    },
    "/meal-usage-history": {
      "get": {
        "operationId": "MealEventLog_GetMealUsageHistory",
        "parameters": [
          {
            "description": "Query string that filter Meal Event Logs",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "String of Time access first",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "String of Time access end",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "List of Meal code",
            "explode": true,
            "in": "query",
            "name": "mealCode",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "List of Device Id",
            "explode": true,
            "in": "query",
            "name": "icuId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "List of Building Id",
            "explode": true,
            "in": "query",
            "name": "buildingId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "Corner Id",
            "explode": true,
            "in": "query",
            "name": "cornerId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "Boolean manual",
            "in": "query",
            "name": "isManual",
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get (a) meal eventLog(s) by search filter\nusing httpContext get userId",
        "tags": [
          "MealEventLog"
        ]
      }
    },
    "/meeting-room": {
      "delete": {
        "operationId": "MeetingRoom_DeleteRange",
        "parameters": [
          {
            "description": "List of ids meeting",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete list meetings",
        "tags": [
          "MeetingRoom"
        ]
      },
      "get": {
        "operationId": "MeetingRoom_Gets",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "RoomName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MeetingRoom"
        ]
      },
      "post": {
        "operationId": "MeetingRoom_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new meeting",
        "tags": [
          "MeetingRoom"
        ]
      }
    },
    "/meeting-room/{id}": {
      "delete": {
        "operationId": "MeetingRoom_Delete",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete meeting",
        "tags": [
          "MeetingRoom"
        ]
      },
      "get": {
        "operationId": "MeetingRoom_Get",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get meeting by id",
        "tags": [
          "MeetingRoom"
        ]
      },
      "put": {
        "operationId": "MeetingRoom_Edit",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit meeting",
        "tags": [
          "MeetingRoom"
        ]
      }
    },
    "/meeting/{id}/users": {
      "get": {
        "operationId": "Meeting_GetUsersOfMeeting",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all users of meeting",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings": {
      "delete": {
        "operationId": "Meeting_DeleteRange",
        "parameters": [
          {
            "description": "List of ids meeting",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete list meetings",
        "tags": [
          "Meeting"
        ]
      },
      "get": {
        "operationId": "Meeting_Gets",
        "parameters": [
          {
            "description": "Name of meeting",
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "meetingRoomId",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "in": "query",
            "name": "isGetAll",
            "schema": {
              "type": "boolean"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "startDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "endDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of meeting with company",
        "tags": [
          "Meeting"
        ]
      },
      "post": {
        "operationId": "Meeting_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new meeting",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/init": {
      "get": {
        "operationId": "Meeting_GetInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init meeting page",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}": {
      "delete": {
        "operationId": "Meeting_Delete",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete meeting",
        "tags": [
          "Meeting"
        ]
      },
      "get": {
        "operationId": "Meeting_Get",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get meeting by id",
        "tags": [
          "Meeting"
        ]
      },
      "put": {
        "operationId": "Meeting_Edit",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit meeting",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/access-history": {
      "get": {
        "operationId": "Meeting_GetAccessHistoryUser",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get access history user in meeting",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/assign-users": {
      "post": {
        "operationId": "Meeting_AssignUsers",
        "parameters": [
          {
            "description": "meeting identifier. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of identifiers for the users. ",
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign users to an meeting",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/assign-visits": {
      "post": {
        "operationId": "Meeting_AssignVisits",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "visitIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/report": {
      "get": {
        "operationId": "Meeting_GetMeetingReport",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "userName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get report meeting",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/report/export": {
      "get": {
        "operationId": "Meeting_ExportMeetingReport",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export users file excel with meeting",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/unassign-users": {
      "delete": {
        "operationId": "Meeting_UnAssignUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "userIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/unassign-visits": {
      "delete": {
        "operationId": "Meeting_UnAssignVisits",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "visitIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/unassigned-users": {
      "get": {
        "operationId": "Meeting_GetUnAssignUsers",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "idsIgnore",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "description": "Query string that filter Users by UserName, Department Name or Meeting Name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of all users unassigned with meeting by id",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/unassigned-visits": {
      "get": {
        "operationId": "Meeting_GetUnAssignVisits",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "VisitorName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/users": {
      "get": {
        "operationId": "Meeting_GetAssignUsers",
        "parameters": [
          {
            "description": "Meeting Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter Users by UserName, Department Name or CardId",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of all users with meeting by id",
        "tags": [
          "Meeting"
        ]
      }
    },
    "/meetings/{id}/visits": {
      "get": {
        "operationId": "Meeting_GetAssignVisits",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "VisitorName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Meeting"
        ]
      }
    },
    "/monitors/devices": {
      "get": {
        "operationId": "Monitoring_GetDoorList",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Initial door list. \nIf the number of device is more than 5, return null.\nIf the number of device is less than 5, return devices information.",
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/my-card-list": {
      "get": {
        "operationId": "User_GetAllCardsByUser",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get card list by user",
        "tags": [
          "User"
        ]
      }
    },
    "/my-phone-id": {
      "get": {
        "operationId": "User_GetNFCPhoneIdByUser",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get NFC Phone Id by user",
        "tags": [
          "User"
        ]
      }
    },
    "/my-qrcode": {
      "get": {
        "operationId": "User_GetDynamicQrByUser",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Dynamic QR by user",
        "tags": [
          "User"
        ]
      }
    },
    "/my-visits": {
      "get": {
        "operationId": "Visit_GetMyVisits",
        "parameters": [
          {
            "in": "query",
            "name": "OpeDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "OpeDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "name of visit",
            "in": "query",
            "name": "visitorName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "date of birthday",
            "in": "query",
            "name": "birthDay",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "department of visit",
            "in": "query",
            "name": "visitorDepartment",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "position",
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "site of visit",
            "in": "query",
            "name": "visiteeSite",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "reason of visit",
            "in": "query",
            "name": "visitReason",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "name of visit",
            "in": "query",
            "name": "visiteeName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "phone number",
            "in": "query",
            "name": "phone",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "status of process",
            "explode": true,
            "in": "query",
            "name": "processStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "approve name 1",
            "in": "query",
            "name": "approverName1",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "approve name 2",
            "in": "query",
            "name": "approverName2",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "reason for reject",
            "in": "query",
            "name": "rejectReason",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "card id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          },
          {
            "description": "search general",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 17
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 18
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Status",
              "nullable": true,
              "type": "string"
            },
            "x-position": 19
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 20
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visit list. Filter by time model(OpeDateFrom - OpeDateTo, OpeTimeFrom - OpeTimeTo)",
        "tags": [
          "Visit"
        ]
      }
    },
    "/not-buildings-master": {
      "get": {
        "operationId": "Building_GetNoBuildingMasterlist",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "page number ",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "page size ",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Criteria ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "list of user id that will be excluded ",
            "explode": true,
            "in": "query",
            "name": "exceptUserIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get No buildingMaster information from selected several buildings",
        "tags": [
          "Building"
        ]
      }
    },
    "/notifications": {
      "get": {
        "operationId": "Notification_GetListNotification",
        "parameters": [
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Type",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Query string that filter notifications by content",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "String of first access time",
            "in": "query",
            "name": "firstAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "String of last access time",
            "in": "query",
            "name": "lastAccessTime",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of notification by user (include companyId and userId)",
        "tags": [
          "Notification"
        ]
      }
    },
    "/notifications/notice": {
      "post": {
        "operationId": "Notification_CreateNotice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationNoticeModel"
              }
            }
          },
          "description": "If count of list UserIds = 0, send default to all users of company",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Manager user create notification send to users",
        "tags": [
          "Notification"
        ]
      }
    },
    "/notifications/{id}": {
      "delete": {
        "operationId": "Notification_DeleteNotification",
        "parameters": [
          {
            "description": "notification id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete notification by id",
        "tags": [
          "Notification"
        ]
      },
      "get": {
        "operationId": "Notification_GetNotificationById",
        "parameters": [
          {
            "description": "Notification id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get notification by id value",
        "tags": [
          "Notification"
        ]
      },
      "put": {
        "operationId": "Notification_UpdateStatus",
        "parameters": [
          {
            "description": "Notification id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationUpdate"
              }
            }
          },
          "description": "JSON model include status boolean read or unread",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update status",
        "tags": [
          "Notification"
        ]
      }
    },
    "/parttimes": {
      "post": {
        "operationId": "PartTime_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartTimeModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add building",
        "tags": [
          "PartTime"
        ]
      }
    },
    "/performance/channel/test-channel": {
      "get": {
        "operationId": "Performance_GetListChannelConnection",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/debug-message": {
      "get": {
        "operationId": "Performance_GetDebugMessage",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "rids",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/delete-data-test": {
      "post": {
        "operationId": "Performance_DeleteDataTestPerformance",
        "parameters": [
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/get-event_log": {
      "get": {
        "operationId": "Performance_GetEventLog",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get performance infor of the case [get event]",
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/get-user": {
      "get": {
        "operationId": "Performance_GetUser",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get performance infor of the case [get user]",
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/hanet/update-avatar": {
      "get": {
        "operationId": "Performance_UpdateAvatarFromHanet",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/parse-event-from-icu": {
      "get": {
        "operationId": "Performance_ParseEvent",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get performance infor of the case [parse event from icu]",
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/re-cover/event-log": {
      "get": {
        "operationId": "Performance_ReCoverEventLog",
        "parameters": [
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/re-cover/system-log": {
      "get": {
        "operationId": "Performance_ReCoverSystemLog",
        "parameters": [
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/save-user-to-icu": {
      "get": {
        "operationId": "Performance_SaveUserToIcu",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get performance infor of the case [save user to icu]",
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/send-user-to-icu": {
      "get": {
        "operationId": "Performance_SendUserToIcu",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get performance infor of the case [send user to icu]",
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/system/backup-avatar": {
      "post": {
        "operationId": "Performance_BackupAvatarUserByFileServer",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/system/test-script": {
      "post": {
        "operationId": "Performance_TestScript",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandTest"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/test-mqtt": {
      "get": {
        "operationId": "Performance_TestMqttCentos",
        "parameters": [
          {
            "description": "number of concurrent device icu",
            "in": "query",
            "name": "numberOfConcurrentIcu",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "number of event send by each device icu",
            "in": "query",
            "name": "numberOfEventSentByEachIcu",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "time for delay between each message",
            "in": "query",
            "name": "timeDelayBetweenEachMessage",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Test mqtt",
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/test-performance": {
      "get": {
        "operationId": "Performance_CalculatorTimeInCamera",
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "thread",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Performance"
        ]
      }
    },
    "/performance/test-push-notification": {
      "get": {
        "operationId": "Performance_TestPushNotification",
        "parameters": [
          {
            "in": "query",
            "name": "topic",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "body",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "data",
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true,
              "type": "object"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Performance"
        ]
      }
    },
    "/plugins": {
      "get": {
        "operationId": "Plugin_Get",
        "parameters": [
          {
            "description": "Query string that filter plugin",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Solution(s)",
        "tags": [
          "Plugin"
        ]
      }
    },
    "/plugins/{id}": {
      "put": {
        "operationId": "Plugin_Update",
        "parameters": [
          {
            "description": "Plugin id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlugIns"
              }
            }
          },
          "description": "JSON model for Plugin",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update Plugin",
        "tags": [
          "Plugin"
        ]
      }
    },
    "/read-all-notifications": {
      "put": {
        "operationId": "Notification_UnReadAll",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Mark all notifications as \"UnRead\"",
        "tags": [
          "Notification"
        ]
      }
    },
    "/refreshtoken": {
      "post": {
        "operationId": "Account_RefreshToken",
        "parameters": [
          {
            "description": "String of token refreshed",
            "in": "query",
            "name": "refreshToken",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "String timezone by expired of token",
            "in": "query",
            "name": "expiredToken",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Refresh token",
        "tags": [
          "Account"
        ]
      }
    },
    "/register-user": {
      "get": {
        "operationId": "User_RegisterUserInit",
        "parameters": [
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get init page register user",
        "tags": [
          "User"
        ]
      },
      "post": {
        "operationId": "User_RegisterUser",
        "parameters": [
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Register user",
        "tags": [
          "User"
        ]
      }
    },
    "/register-visit": {
      "get": {
        "operationId": "Visit_GetInformationRegisterVisit",
        "parameters": [
          {
            "description": "Company code",
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Account company Id",
            "in": "query",
            "name": "visitTargetId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "meeting id",
            "in": "query",
            "name": "meetingId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Fill information form register",
        "tags": [
          "Visit"
        ]
      },
      "post": {
        "operationId": "Visit_RegisterVisit",
        "parameters": [
          {
            "description": "Company code",
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Account Id CreatedBy",
            "in": "query",
            "name": "visitTargetId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "meeting Id",
            "in": "query",
            "name": "meetingId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Enable/Disable generate link image qr-code",
            "in": "query",
            "name": "generateImageQrCode",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitModel"
              }
            }
          },
          "description": "Model JSON for Visit",
          "required": true,
          "x-name": "model",
          "x-position": 5
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Visitor can register visit by themself",
        "tags": [
          "Visit"
        ]
      }
    },
    "/register-visit/authentication": {
      "post": {
        "operationId": "Visit_RegisterVisitAuthentication",
        "parameters": [
          {
            "description": "Company Code (using for account has multi company account)",
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            }
          },
          "description": "Enter account/password",
          "required": true,
          "x-name": "loginModel",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "authentication and get setting app register visit",
        "tags": [
          "Visit"
        ]
      }
    },
    "/register-visit/setting": {
      "post": {
        "operationId": "Visit_UpdateSettingLayoutRegister",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldLayoutRegister"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update layout form visit register",
        "tags": [
          "Visit"
        ]
      }
    },
    "/register-visit/users-target": {
      "get": {
        "operationId": "Visit_GetRegisterVisitUsersTarget",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get user target by company code",
        "tags": [
          "Visit"
        ]
      }
    },
    "/remove-qr": {
      "post": {
        "operationId": "User_RemoveQR",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Remove QR data by user code",
        "tags": [
          "User"
        ]
      }
    },
    "/report-problem-device": {
      "get": {
        "operationId": "User_GetListReportProblemDevice",
        "parameters": [
          {
            "description": "Email of user report",
            "in": "query",
            "name": "email",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "RID of device",
            "in": "query",
            "name": "deviceAddress",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "CameraId",
            "in": "query",
            "name": "cameraId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "DeviceAddress",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of report device",
        "tags": [
          "User"
        ]
      },
      "post": {
        "operationId": "User_AddReportProblemDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportProblemModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Report device not working from user",
        "tags": [
          "User"
        ]
      }
    },
    "/report-problem-device/types": {
      "get": {
        "operationId": "User_GetReportProblemDeviceTypes",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get list of types report problem",
        "tags": [
          "User"
        ]
      }
    },
    "/roles": {
      "delete": {
        "operationId": "Role_DeleteMultiple",
        "parameters": [
          {
            "description": "list of identifier of dynamic role ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multiple roles",
        "tags": [
          "Role"
        ]
      },
      "get": {
        "operationId": "Role_Gets",
        "parameters": [
          {
            "description": "Query string that filter by name",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of Role from DB",
        "tags": [
          "Role"
        ]
      },
      "post": {
        "operationId": "Role_Add",
        "parameters": [
          {
            "description": "identifier of role that is similar-made ",
            "in": "query",
            "name": "similarId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleModel"
              }
            }
          },
          "description": "This model has information about the device to be added. ",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a new role to system",
        "tags": [
          "Role"
        ]
      }
    },
    "/roles/default": {
      "post": {
        "operationId": "Role_AddDefault",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a default role to existing companies.",
        "tags": [
          "Role"
        ]
      },
      "put": {
        "operationId": "Role_UpdateDefaultPermission",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update default permissions.",
        "tags": [
          "Role"
        ]
      }
    },
    "/roles/{id}": {
      "delete": {
        "operationId": "Role_Delete",
        "parameters": [
          {
            "description": "identifier of dynamic role ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a role",
        "tags": [
          "Role"
        ]
      },
      "get": {
        "operationId": "Role_Get",
        "parameters": [
          {
            "description": "identifier of role ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get role information by id",
        "tags": [
          "Role"
        ]
      },
      "put": {
        "operationId": "Role_Edit",
        "parameters": [
          {
            "description": "identifier of this role ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "identifier of role that is similar-made ",
            "in": "query",
            "name": "similarId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleModel"
              }
            }
          },
          "description": "data model that include information ",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update permission list of spectific role",
        "tags": [
          "Role"
        ]
      }
    },
    "/roles/{id}/user/default-setting": {
      "post": {
        "operationId": "Role_ChangeDefaultRoleSettingForUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update role setting default",
        "tags": [
          "Role"
        ]
      }
    },
    "/set-send-user-count": {
      "put": {
        "operationId": "Device_SetMaxIcuSendUserCount",
        "parameters": [
          {
            "description": "Max Icu Send User",
            "in": "query",
            "name": "count",
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Delay between sending user protocol",
            "in": "query",
            "name": "delay",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set Max Icu Send User Count(default : 5) If input is 0, set default value.\nSet Delay between sending user protocol (unit : ms)",
        "tags": [
          "Device"
        ]
      }
    },
    "/setting/camera": {
      "get": {
        "operationId": "Camera_GetSettingCamera",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get setting camera in company",
        "tags": [
          "Camera"
        ]
      },
      "put": {
        "operationId": "Camera_UpdateSettingCamera",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraSetting"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update parameter setting camera",
        "tags": [
          "Camera"
        ]
      }
    },
    "/settings": {
      "get": {
        "operationId": "Setting_Get",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the setting",
        "tags": [
          "Setting"
        ]
      },
      "patch": {
        "description": "Edward, 2020-01-29.",
        "operationId": "Setting_EditMultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/SettingModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "The models. ",
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "(An Action that handles HTTP PATCH requests) edit multiple.",
        "tags": [
          "Setting"
        ]
      }
    },
    "/settings/access": {
      "get": {
        "operationId": "User_GetAccessSetting",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Access setting",
        "tags": [
          "User"
        ]
      },
      "put": {
        "operationId": "User_EditAccessSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessSettingModel"
              }
            }
          },
          "description": "JSON model for Setting visit",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update access setting",
        "tags": [
          "User"
        ]
      }
    },
    "/settings/access/approved": {
      "get": {
        "operationId": "User_GetApprovalAccessSetting",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get account approval access setting",
        "tags": [
          "User"
        ]
      }
    },
    "/settings/attendance": {
      "get": {
        "operationId": "Attendance_GetAttendanceSetting",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get attendance setting for company",
        "tags": [
          "Attendance"
        ]
      },
      "put": {
        "operationId": "Attendance_UpdateAttendanceSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceSettingModel"
              }
            }
          },
          "description": "JSON model for AttendanceSettingModel",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update approval accounts for attendance setting",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/settings/leave-request": {
      "get": {
        "operationId": "Attendance_GetLeaveRequestSetting",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get leave request setting",
        "tags": [
          "Attendance"
        ]
      },
      "put": {
        "operationId": "Attendance_UpdateLeaveRequestSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveSettingModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "update leave request setting",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/settings/user/first-approver": {
      "delete": {
        "operationId": "User_DeleteUserApproverSetting",
        "parameters": [
          {
            "description": "account ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete user approver accounts",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "User_GetUserApproverSetting",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get list user approver accounts",
        "tags": [
          "User"
        ]
      },
      "post": {
        "operationId": "User_AddUserApproverSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "account ids",
          "required": true,
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add user approver accounts",
        "tags": [
          "User"
        ]
      }
    },
    "/settings/user/second-approver": {
      "delete": {
        "operationId": "User_DeleteUserApproverSetting2",
        "parameters": [
          {
            "description": "account ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete user approver accounts",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "User_GetUserApproverSetting2",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get list user approver accounts",
        "tags": [
          "User"
        ]
      },
      "post": {
        "operationId": "User_AddUserApproverSetting2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "account ids",
          "required": true,
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add user approver accounts",
        "tags": [
          "User"
        ]
      }
    },
    "/settings/visit": {
      "get": {
        "operationId": "Visit_GetVisitSetting",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visit setting",
        "tags": [
          "Visit"
        ]
      },
      "put": {
        "operationId": "Visit_EditVisitSettingType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitSettingModel"
              }
            }
          },
          "description": "JSON model for Setting visit",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update visit setting",
        "tags": [
          "Visit"
        ]
      }
    },
    "/settings/visit-visible": {
      "get": {
        "operationId": "Company_GetVisibleFieldSettingVisit",
        "parameters": [
          {
            "description": "Company Id",
            "in": "query",
            "name": "companyId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get fields visible of visit setting",
        "tags": [
          "Company"
        ]
      },
      "put": {
        "operationId": "Company_UpdateVisibleFieldSettingVisit",
        "parameters": [
          {
            "description": "Company Id",
            "in": "query",
            "name": "companyId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update fields visible of visit setting",
        "tags": [
          "Company"
        ]
      }
    },
    "/settings/visit/check-manager": {
      "delete": {
        "operationId": "Visit_DeleteCheckManagerSetting",
        "parameters": [
          {
            "description": "account ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete visit check manager accounts",
        "tags": [
          "Visit"
        ]
      },
      "get": {
        "operationId": "Visit_GetCheckManagerSetting",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get list check manager accounts",
        "tags": [
          "Visit"
        ]
      },
      "post": {
        "operationId": "Visit_AddCheckManagerSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "account ids",
          "required": true,
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add visit check manager accounts",
        "tags": [
          "Visit"
        ]
      }
    },
    "/settings/visit/first-approver": {
      "delete": {
        "operationId": "Visit_DeleteFirstApproverSetting",
        "parameters": [
          {
            "description": "account ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete first approver accounts",
        "tags": [
          "Visit"
        ]
      },
      "get": {
        "operationId": "Visit_GetFirstApproverSetting",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get list first approver accounts",
        "tags": [
          "Visit"
        ]
      },
      "post": {
        "operationId": "Visit_AddFirstApproverSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "account ids",
          "required": true,
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add first approver accounts",
        "tags": [
          "Visit"
        ]
      }
    },
    "/settings/visit/second-approver": {
      "delete": {
        "operationId": "Visit_DeleteSecondApproverSetting",
        "parameters": [
          {
            "description": "account ids",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete second approver accounts",
        "tags": [
          "Visit"
        ]
      },
      "get": {
        "operationId": "Visit_GetSecondApproverSetting",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "UserName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get list second approver accounts",
        "tags": [
          "Visit"
        ]
      },
      "post": {
        "operationId": "Visit_AddSecondApproverSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "account ids",
          "required": true,
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add second approver accounts",
        "tags": [
          "Visit"
        ]
      }
    },
    "/settings/{id}": {
      "get": {
        "description": "Edward, 2020-01-29.",
        "operationId": "Setting_Get2",
        "parameters": [
          {
            "description": "The identifier. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the setting.",
        "tags": [
          "Setting"
        ]
      },
      "put": {
        "description": "Edward, 2020-01-29.",
        "operationId": "Setting_Edit",
        "parameters": [
          {
            "description": "The identifier. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingModel"
              }
            }
          },
          "description": "The model. ",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "(An Action that handles HTTP PUT requests) edits.",
        "tags": [
          "Setting"
        ]
      }
    },
    "/shorten-link/{pathname}": {
      "get": {
        "operationId": "WebhookAnonymous_GetFullPathByShortenLink",
        "parameters": [
          {
            "in": "path",
            "name": "pathname",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get full path by short path",
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/ssc-login": {
      "post": {
        "operationId": "Account_SscLoginByAccessToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SscLoginModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Login with ssc token",
        "tags": [
          "Account"
        ]
      }
    },
    "/static/{rootFolder}/{companyCode}/{date}/{fileName}": {
      "get": {
        "operationId": "WebhookAnonymous_GetFileFromPath",
        "parameters": [
          {
            "in": "path",
            "name": "rootFolder",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "path",
            "name": "companyCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "path",
            "name": "date",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "path",
            "name": "fileName",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get image static from link file local",
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/switch-company": {
      "get": {
        "operationId": "Account_SwitchCompany",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Switch company",
        "tags": [
          "Account"
        ]
      }
    },
    "/system-info/event-log/reset-link-image": {
      "patch": {
        "operationId": "SystemInfo_MigrationLinkImageEventLog",
        "parameters": [
          {
            "in": "query",
            "name": "oldUrl",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "newUrl",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Migrate url link image event-log",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/system-info/rabbitmq/reset-permission": {
      "patch": {
        "operationId": "SystemInfo_ResetAccountRabbitmq",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reset account rabbitmq",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/system-info/user-avatar/reset-link-domain": {
      "patch": {
        "operationId": "SystemInfo_MigrationAvatarUser",
        "parameters": [
          {
            "description": "Ex: https://xxx.xxx.xxx.xxx",
            "in": "query",
            "name": "oldUrl",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Ex: https://yyy.yyy.yyy.yyy",
            "in": "query",
            "name": "newUrl",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update link avatar",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/system-logs": {
      "get": {
        "operationId": "SystemLog_SystemLog",
        "parameters": [
          {
            "in": "query",
            "name": "OpeDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "OpeDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "OpeTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "OpeTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "StartDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "EndDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "type of object",
            "in": "query",
            "name": "objectType",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "company id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 8
          },
          {
            "description": "Query string that filter by user account",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "type of action",
            "in": "query",
            "name": "actionType",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 10
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 12
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "OperationTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of system logs with pagination. Filter by time model(StartDate - EndDate)",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/system-logs/action-list": {
      "get": {
        "operationId": "SystemLog_GetActionListItems",
        "parameters": [
          {
            "description": "type of log in system",
            "in": "query",
            "name": "systemLogType",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Action List items of System Log",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/system-logs/backup": {
      "get": {
        "operationId": "SystemLog_DownloadFileBackup",
        "parameters": [
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download file .zip backup",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/system-logs/backup/files": {
      "get": {
        "operationId": "SystemLog_GetAllFileBackup",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all files backup with company",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/system-logs/export": {
      "get": {
        "operationId": "SystemLog_Export",
        "parameters": [
          {
            "in": "query",
            "name": "OpeDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "OpeDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "OpeTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "OpeTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "StartDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "EndDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "type of object",
            "in": "query",
            "name": "objectType",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "type of action",
            "in": "query",
            "name": "action",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 8
          },
          {
            "description": "type of action",
            "in": "query",
            "name": "actionType",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "description": "company id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 10
          },
          {
            "description": "text data to filter ",
            "in": "query",
            "name": "filter",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "text data to filter ",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "type of file export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "OperationTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export file for system Logs. Filter by time model(StartDate - EndDate)",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/system-logs/exportpdf": {
      "get": {
        "operationId": "SystemLog_PdfView",
        "parameters": [
          {
            "in": "query",
            "name": "OpeDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "OpeDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "OpeTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "OpeTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "StartDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "EndDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "type of object",
            "in": "query",
            "name": "objectType",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "description": "type of action",
            "in": "query",
            "name": "action",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 10
          },
          {
            "description": "company id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 11
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "View the system log data through pdf file. Filter by time model(StartDate - EndDate)",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/system-logs/report/mqtt-error": {
      "get": {
        "operationId": "SystemLog_DownloadFileReportMqttError",
        "parameters": [
          {
            "description": "Device Address",
            "in": "query",
            "name": "deviceAddress",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "If you download all, you can set null",
            "in": "query",
            "name": "from",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "If you download all, you can set null",
            "in": "query",
            "name": "to",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download file report mqtt error",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/system-logs/type-list": {
      "get": {
        "operationId": "SystemLog_GetSystemLogTypes",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get SystemLogTypelistItems",
        "tags": [
          "SystemLog"
        ]
      }
    },
    "/test/dec": {
      "get": {
        "operationId": "Company_TEST_DEC",
        "parameters": [
          {
            "in": "query",
            "name": "encData",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "TEST for decryption.",
        "tags": [
          "Company"
        ]
      }
    },
    "/test/enc": {
      "get": {
        "operationId": "Company_TEST_ENC",
        "parameters": [
          {
            "in": "query",
            "name": "plainData",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "TEST for encryption.",
        "tags": [
          "Company"
        ]
      }
    },
    "/test/verify-license-key": {
      "get": {
        "operationId": "SystemInfo_VerifyLicenseTesting",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/transactions": {
      "get": {
        "operationId": "Transaction_Gets",
        "parameters": [
          {
            "description": "format: MM.dd.yyyy HH:mm:ss",
            "in": "query",
            "name": "from",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "format: MM.dd.yyyy HH:mm:ss",
            "in": "query",
            "name": "to",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "type transaction: 0-Add, 1-Delete, 2-Visit",
            "explode": true,
            "in": "query",
            "name": "typeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "credit id",
            "in": "query",
            "name": "creditId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Sort direction: 'desc' for descending , 'asc' for ascending ",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of transaction with pagination.",
        "tags": [
          "Transaction"
        ]
      }
    },
    "/transactions/init": {
      "get": {
        "operationId": "Transaction_GetInitTransactions",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init order page",
        "tags": [
          "Transaction"
        ]
      }
    },
    "/unassign-access-times-hvqy": {
      "post": {
        "operationId": "AccessTime_UnAssignAccessTimeHvqy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignAccessTime"
              }
            }
          },
          "description": "JSON model for Timezone (from-to are installed by minute). Ex: 0h00 - 23h59m --> from 0 - to 1439",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign a access time for user",
        "tags": [
          "AccessTime"
        ]
      }
    },
    "/unit-vehicle/status": {
      "get": {
        "operationId": "Vehicle_GetUnitVehicleStatus",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the latest event-logs and figure out the count by workType",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/unit-vehicles": {
      "delete": {
        "operationId": "Vehicle_DeleteUnitVehicleMulti",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetUnitVehicleList",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "post": {
        "operationId": "Vehicle_AddUnitVehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitVehicleModel"
              }
            }
          },
          "required": true,
          "x-name": "vehicleModel",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/unit-vehicles/{id}": {
      "delete": {
        "operationId": "Vehicle_DeleteUnitVehicle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetUnitVehicle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "put": {
        "operationId": "Vehicle_EditUnitVehicle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitVehicleModel"
              }
            }
          },
          "required": true,
          "x-name": "vehicleModel",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/unknown-persons": {
      "delete": {
        "operationId": "UnknownPerson_DeleteMulti",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multi unknown persons",
        "tags": [
          "UnknownPerson"
        ]
      },
      "get": {
        "operationId": "UnknownPerson_Gets",
        "parameters": [
          {
            "in": "query",
            "name": "accessTimeFrom",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "accessTimeTo",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list unknown person",
        "tags": [
          "UnknownPerson"
        ]
      }
    },
    "/unknown-persons/{id}/access-history": {
      "get": {
        "operationId": "UnknownPerson_GetHistories",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "get access history unknown person by id",
        "tags": [
          "UnknownPerson"
        ]
      }
    },
    "/update-multiple-notifications": {
      "put": {
        "operationId": "Notification_UpdateMultipleStatus",
        "parameters": [
          {
            "description": "boolean status read or unread",
            "in": "query",
            "name": "Status",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of notification ids to update status",
          "required": true,
          "x-name": "lstStatus",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update multiple status",
        "tags": [
          "Notification"
        ]
      }
    },
    "/user-vehicles": {
      "delete": {
        "operationId": "Vehicle_DeletePersonalVehicle",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetPersonalVehicles",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "explode": true,
            "in": "query",
            "name": "vehicleRuleList",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of personal vehicles",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/user-vehicles/init": {
      "get": {
        "operationId": "Vehicle_InitPersonalVehicles",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Init Personal Vehicle to return VehicleRuleOption",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/user-vehicles/{id}": {
      "delete": {
        "operationId": "Vehicle_DeletePersonalVehicle2",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetPersonalVehicles2",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get personal vehicle information.",
        "tags": [
          "Vehicle"
        ]
      },
      "post": {
        "operationId": "Vehicle_ApprovePersonalVehicle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "put": {
        "operationId": "Vehicle_EditPersonalVehicle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalVehicleModel"
              }
            }
          },
          "required": true,
          "x-name": "vehicleModel",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/users": {
      "delete": {
        "operationId": "User_DeleteMultiple",
        "parameters": [
          {
            "description": "List user id to delete",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete multiple user",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "User_Gets",
        "parameters": [
          {
            "description": "search all",
            "in": "query",
            "name": "searchAll",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter by user name, email, name of department or expired date",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Query string that filter by position",
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Query string that filter by cardId",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Query string that filter by empNumber",
            "in": "query",
            "name": "empNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Query string that filter by expiredDate - format: dd.MM.yyyy HH:mm:ss",
            "in": "query",
            "name": "expiredDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Query string tath filter by end of expiredDate - format : dd.MM.yyyy HH:mm:ss ",
            "in": "query",
            "name": "expiredDateEnd",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Query string that filter by departmentIds",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "Query string that filter by workTypeList",
            "explode": true,
            "in": "query",
            "name": "workTypeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "Category option Id list ",
            "explode": true,
            "in": "query",
            "name": "category",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 12
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 15
          },
          {
            "description": "identifier of department ",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 16
          },
          {
            "explode": true,
            "in": "query",
            "name": "faceAndIris",
            "schema": {
              "items": {
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 17
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user list with pagination",
        "tags": [
          "User"
        ]
      },
      "post": {
        "operationId": "User_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModel"
              }
            }
          },
          "description": "JSON model for User",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a user",
        "tags": [
          "User"
        ]
      }
    },
    "/users-dept-assign": {
      "get": {
        "operationId": "User_GetAssignUsers",
        "parameters": [
          {
            "description": "Query string that filter by user name, email, name of department or expired date",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "identifier of department ",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "filter option - category ",
            "explode": true,
            "in": "query",
            "name": "category",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get assigned user list in department.",
        "tags": [
          "User"
        ]
      }
    },
    "/users-dept-assign/export": {
      "get": {
        "operationId": "User_ExportAssignDeptUsers",
        "parameters": [
          {
            "description": "Query string that filter by user name, email, name of department or expired date",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Export type. (excel, etc.. ) ",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "identifier of department ",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export assigned user list in department.",
        "tags": [
          "User"
        ]
      }
    },
    "/users-dept-unassign": {
      "get": {
        "operationId": "User_GetUnassignUsers2",
        "parameters": [
          {
            "description": "Query string that filter by user name, email, name of department or expired date",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "identifier of department ",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get unassigned user list in department.",
        "tags": [
          "User"
        ]
      }
    },
    "/users-expired": {
      "post": {
        "operationId": "User_ConvertExpiredUser",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Convert expired users to Invalid",
        "tags": [
          "User"
        ]
      }
    },
    "/users-hvqy": {
      "post": {
        "operationId": "User_UpdateMultipleUserHVQY",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/UserHVQYModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "userHvqyModels",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update access group of user",
        "tags": [
          "User"
        ]
      }
    },
    "/users-multi": {
      "post": {
        "operationId": "User_AddMultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/UserModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of JSON model for User",
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new multiple users",
        "tags": [
          "User"
        ]
      },
      "put": {
        "operationId": "User_EditMultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/UserModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of JSON model for User",
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit multiple users",
        "tags": [
          "User"
        ]
      }
    },
    "/users-send": {
      "post": {
        "operationId": "User_SendUser",
        "parameters": [
          {
            "description": "true -> ADD user / false -> DELETE user ",
            "in": "query",
            "name": "isSend",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of users th send ",
          "required": true,
          "x-name": "ids",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Send specific user data to all devices.",
        "tags": [
          "User"
        ]
      }
    },
    "/users-sync": {
      "post": {
        "operationId": "User_SyncUserFromOtherCompany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/UserModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "list of JSON model for User",
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new multiple users",
        "tags": [
          "User"
        ]
      }
    },
    "/users-usercode": {
      "post": {
        "operationId": "User_GetsByUserCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "x-name": "usercodes",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user data by list of user code data",
        "tags": [
          "User"
        ]
      }
    },
    "/users/access-history": {
      "get": {
        "operationId": "User_AccessHistoryAttendanceEachUser",
        "parameters": [
          {
            "description": "String of date time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "String of date time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "event type",
            "in": "query",
            "name": "eventType",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "card type",
            "in": "query",
            "name": "cardType",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "String Antipass",
            "in": "query",
            "name": "inOut",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 6
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "AccessTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "View Access history Attendance Each user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/accessible-doors": {
      "get": {
        "operationId": "User_AccessibleDoorsWithUser",
        "parameters": [
          {
            "description": "Query string that filter by user name, address or type of device, mode of verify, passage or active",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "valid user or all user",
            "in": "query",
            "name": "isValid",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Door List for user current",
        "tags": [
          "User"
        ]
      }
    },
    "/users/add-account-to-user": {
      "put": {
        "operationId": "User_AddUserToAccount",
        "parameters": [
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "email account",
            "in": "query",
            "name": "emailAccount",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add account to user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/conditions": {
      "post": {
        "operationId": "User_GetsUsersByCondition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGetConditionModel"
              }
            }
          },
          "required": true,
          "x-name": "conditions",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user data by several conditions",
        "tags": [
          "User"
        ]
      }
    },
    "/users/count/{id}": {
      "get": {
        "operationId": "User_GetCardCount",
        "parameters": [
          {
            "description": "user identifier. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "IActionResult about card count that specific user has "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Card Count by accessGroup ID",
        "tags": [
          "User"
        ]
      }
    },
    "/users/create-test-data": {
      "post": {
        "operationId": "User_CreateTestData",
        "parameters": [
          {
            "description": "Number of list users",
            "in": "query",
            "name": "numberOfUser",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generate test data",
        "tags": [
          "User"
        ]
      }
    },
    "/users/create-test-face-data": {
      "post": {
        "operationId": "User_CreateTestFaceData",
        "parameters": [
          {
            "description": "Number of list users",
            "in": "query",
            "name": "numberOfUser",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "createAccount",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generate test data",
        "tags": [
          "User"
        ]
      }
    },
    "/users/export/projectd": {
      "get": {
        "operationId": "User_ExportUser",
        "parameters": [
          {
            "description": "search all",
            "in": "query",
            "name": "searchAll",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "category filter ",
            "explode": true,
            "in": "query",
            "name": "category",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          },
          {
            "description": "Query string that filter by position",
            "in": "query",
            "name": "position",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Query string that filter by cardId",
            "in": "query",
            "name": "cardId",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Query string that filter by empNumber",
            "in": "query",
            "name": "empNumber",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Query string that filter by expiredDate - format: dd.MM.yyyy HH:mm:ss",
            "in": "query",
            "name": "expiredDate",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Query string tath filter by end of expiredDate - format : dd.MM.yyyy HH:mm:ss ",
            "in": "query",
            "name": "expiredDateEnd",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Query string that filter by departmentIds",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "Query string that filter by workTypeList",
            "explode": true,
            "in": "query",
            "name": "workTypeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "type of file export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "only valid user or only invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "Query string that filter by user name, address or type of device, mode of verify, passage or active",
            "in": "query",
            "name": "search",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export user data",
        "tags": [
          "User"
        ]
      }
    },
    "/users/import": {
      "post": {
        "operationId": "User_ImportUser",
        "parameters": [
          {
            "description": "type of file",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import users data",
        "tags": [
          "User"
        ]
      }
    },
    "/users/init": {
      "get": {
        "operationId": "User_GetInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init user management page",
        "tags": [
          "User"
        ]
      }
    },
    "/users/qrcode": {
      "get": {
        "operationId": "User_GetDynamicQrByEmail",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get dynamic qr-code by email",
        "tags": [
          "User"
        ]
      }
    },
    "/users/return-user-model": {
      "get": {
        "operationId": "User_GetsReturnUserModel",
        "parameters": [
          {
            "description": "search all",
            "in": "query",
            "name": "searchAll",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter by user name, email, name of department or expired date",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Query string that filter by position",
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Query string that filter by cardId",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Query string that filter by empNumber",
            "in": "query",
            "name": "empNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Query string that filter by expiredDate - format: dd.MM.yyyy HH:mm:ss",
            "in": "query",
            "name": "expiredDate",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Query string tath filter by end of expiredDate - format : dd.MM.yyyy HH:mm:ss ",
            "in": "query",
            "name": "expiredDateEnd",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "Query string that filter by departmentIds",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "Query string that filter by workTypeList",
            "explode": true,
            "in": "query",
            "name": "workTypeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "Category option Id list ",
            "explode": true,
            "in": "query",
            "name": "category",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 11
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 12
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 15
          },
          {
            "description": "identifier of department ",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 16
          },
          {
            "explode": true,
            "in": "query",
            "name": "faceAndIris",
            "schema": {
              "items": {
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 17
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user list with pagination",
        "tags": [
          "User"
        ]
      }
    },
    "/users/ssc-school/sync-user": {
      "get": {
        "operationId": "User_SyncStudentFromSsc",
        "parameters": [
          {
            "description": "yyyy/MM/dd",
            "in": "query",
            "name": "dateFolder",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Sync students from ssc to dmpw",
        "tags": [
          "User"
        ]
      }
    },
    "/users/update-list-avatar": {
      "post": {
        "operationId": "User_UpdateListAvatarUser",
        "parameters": [
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "update list avatar user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/waiting-for-review": {
      "get": {
        "operationId": "User_GetLengthUsersReview",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get length of user's review",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "operationId": "User_Delete",
        "parameters": [
          {
            "description": "Id of UserLogin to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a user by Id",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "User_Get",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user by id. In the case id = 0 then just getting initial data.",
        "tags": [
          "User"
        ]
      },
      "put": {
        "operationId": "User_Edit",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModel"
              }
            }
          },
          "description": "JSON model for User",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit user by id",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/access-history": {
      "get": {
        "operationId": "User_AccessHistoryAttendance",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "String of date time start",
            "in": "query",
            "name": "start",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "String of date time end",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "event type",
            "in": "query",
            "name": "eventType",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "card type",
            "in": "query",
            "name": "cardType",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 5
          },
          {
            "description": "String Antipass",
            "in": "query",
            "name": "inOut",
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 8
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "AccessTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "View Access history Attendance by user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/accessible-doors": {
      "get": {
        "operationId": "User_AccessibleDoors",
        "parameters": [
          {
            "description": "User id to Accessible Doors",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter by user name, address or type of device, mode of verify, passage or active",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "valid user or all user",
            "in": "query",
            "name": "isValid",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Door List for 1 user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/accessible-doors/export": {
      "get": {
        "operationId": "User_ExportAccessibleDoors",
        "parameters": [
          {
            "description": "User id to Accessible Doors",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Query string that filter by user name, address or type of device, mode of verify, passage or active",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "type of file export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Json result object"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export Door List for 1 user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/approved": {
      "post": {
        "operationId": "User_ApproveUser",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedModel"
              }
            }
          },
          "description": "JSON model include approved boolean",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Approve User access",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/avatar": {
      "post": {
        "operationId": "User_AddAvatarForUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAvatarModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update avatar user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/identification": {
      "get": {
        "operationId": "User_GetCardsByUser",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get card by user",
        "tags": [
          "User"
        ]
      },
      "post": {
        "operationId": "User_AddNewIdentification",
        "parameters": [
          {
            "description": "exist user Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardModel"
              }
            }
          },
          "description": "card model",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add a new identification to exist user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/identification/{cardId}": {
      "delete": {
        "operationId": "User_DeleteCardByUser",
        "parameters": [
          {
            "description": "user index number",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "index number of card, not cardId",
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete identification",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "User_GetCardByUser",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Card Id",
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get card by user",
        "tags": [
          "User"
        ]
      },
      "put": {
        "operationId": "User_UpdateCardByUser",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Card Id",
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardModel"
              }
            }
          },
          "description": "JSON model for Card",
          "required": true,
          "x-name": "model",
          "x-position": 3
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update card by user",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/vehicles": {
      "delete": {
        "operationId": "Vehicle_DeleteByUser",
        "parameters": [
          {
            "description": "user id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "vehicle id",
            "in": "query",
            "name": "vehicleId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete vehicle by user id",
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetListVehiclesByUser",
        "parameters": [
          {
            "description": "user id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list vehicles by user id",
        "tags": [
          "Vehicle"
        ]
      },
      "post": {
        "operationId": "Vehicle_AddByUser",
        "parameters": [
          {
            "description": "user id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalVehicleModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add new vehicle of user id",
        "tags": [
          "Vehicle"
        ]
      },
      "put": {
        "operationId": "Vehicle_UpdateByUser",
        "parameters": [
          {
            "description": "user id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "vehicle id",
            "in": "query",
            "name": "vehicleId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalVehicleModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 3
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "update vehicle by user id",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/validations/qrcode": {
      "get": {
        "operationId": "User_ValidationDynamicQrByUser",
        "parameters": [
          {
            "description": "String of dynamic Qr-code",
            "in": "query",
            "name": "dynamicQr",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "String of RFid",
            "in": "query",
            "name": "rid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "Type of Action",
            "in": "query",
            "name": "actionType",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Validation Dynamic QR by user",
        "tags": [
          "User"
        ]
      }
    },
    "/vehicle-allocation": {
      "delete": {
        "operationId": "Vehicle_DeleteVehicleAllocationMulti",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetVehicleAllocationList",
        "parameters": [
          {
            "in": "query",
            "name": "startTime",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "endTime",
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "managerName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "driverName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "in": "query",
            "name": "unitVehicleName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "in": "query",
            "name": "plateNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "rfid",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "explode": true,
            "in": "query",
            "name": "statusList",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 9
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 10
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Vehicle Allocation List",
        "tags": [
          "Vehicle"
        ]
      },
      "post": {
        "operationId": "Vehicle_AddVehicleAllocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleAllocationModel"
              }
            }
          },
          "required": true,
          "x-name": "vehicleAllocationModel",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add Vehicle Allocation",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/vehicle-allocation/import": {
      "post": {
        "operationId": "Vehicle_ImportVehicleAllocation",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import Vehicle Allocation",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/vehicle-allocation/{id}": {
      "delete": {
        "operationId": "Vehicle_DeleteVehicleAllocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetVehicleAllocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Vehicle Allocation",
        "tags": [
          "Vehicle"
        ]
      },
      "put": {
        "operationId": "Vehicle_EditVehicleAllocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleAllocationModel"
              }
            }
          },
          "required": true,
          "x-name": "vehicleAllocationModel",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/vehicle-allocation/{id}/end-allocation-service": {
      "put": {
        "operationId": "Vehicle_EndVehicleAllocation",
        "parameters": [
          {
            "description": "vehicle allocation id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "datetime value to terminate ",
            "in": "query",
            "name": "date",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Terminate vehicle allocation service",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/vehicle-allocation/{id}/start-allocation-service": {
      "put": {
        "operationId": "Vehicle_StartVehicleAllocation",
        "parameters": [
          {
            "description": "vehicle allocation id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "datetime value to start ",
            "in": "query",
            "name": "date",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Start vehicle allocation service",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/vehicle-eventlog": {
      "get": {
        "operationId": "EventLog_GetVehicleEventLogsReport",
        "parameters": [
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "plateNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "explode": true,
            "in": "query",
            "name": "vehicleClassificationIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "explode": true,
            "in": "query",
            "name": "verifyModeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 14
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 15
          },
          {
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 16
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 17
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 18
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 19
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 20
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "EventLog"
        ]
      }
    },
    "/vehicle-eventlog/export": {
      "get": {
        "operationId": "EventLog_ExportVehicleReport",
        "parameters": [
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "[Integer (1~44)]This parameter can be filtered when searching for specific events. ex) General access: 1 (Refer to the manual for event type definition.)",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "[String]This parameter allows you to filter the username.",
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "plateNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "[Integer (0, 1)This parameter can filter the In/Out type of the door. ex) In : 0, Out : 1",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "[Integer]This parameter can filter the ID of the door.",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "[String]This parameter allows you to filter the building ids.",
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "[String]This parameter can filter the department ids.",
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "explode": true,
            "in": "query",
            "name": "vehicleClassificationIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "Type of card",
            "explode": true,
            "in": "query",
            "name": "cardType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 14
          },
          {
            "description": "Company Id",
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 15
          },
          {
            "description": "localization code ",
            "in": "query",
            "name": "culture",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "Type of file to export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          },
          {
            "description": "Only valid user or only invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 18
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 19
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 20
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export - Export file report vehicle event log. Filter by time model(AccessDateFrom - AccessDateTo, AccessTimeFrom - AccessTimeTo)",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/vehicle-eventlog/report/init": {
      "get": {
        "operationId": "EventLog_InitVehicleEventLogReportFilter",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get initial data about vehicle report data.",
        "tags": [
          "EventLog"
        ]
      }
    },
    "/vehicles-eventlog": {
      "get": {
        "operationId": "EventLog_GetVehicleEventLogs",
        "parameters": [
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "in": "query",
            "name": "plateNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "explode": true,
            "in": "query",
            "name": "vehicleClassificationIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "explode": true,
            "in": "query",
            "name": "buildingIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "explode": true,
            "in": "query",
            "name": "departmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "explode": true,
            "in": "query",
            "name": "verifyModeIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 14
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "x-position": 15
          },
          {
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 16
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 17
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 18
          },
          {
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 19
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 20
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "EventLog"
        ]
      }
    },
    "/verify-license-key": {
      "post": {
        "operationId": "SystemInfo_VerifyServerLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyLicenseModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Verify server license",
        "tags": [
          "SystemInfo"
        ]
      }
    },
    "/versions": {
      "get": {
        "operationId": "Account_GetVersionSystem",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get version of system",
        "tags": [
          "Account"
        ]
      }
    },
    "/video-intercom/get-receiver-info": {
      "get": {
        "operationId": "VideoIntercom_GetReceiverWithSession",
        "parameters": [
          {
            "description": "Session of video call",
            "in": "query",
            "name": "sessionId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Username",
            "in": "query",
            "name": "userName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get user info by session id and username",
        "tags": [
          "VideoIntercom"
        ]
      }
    },
    "/video-intercom/open-door": {
      "get": {
        "operationId": "VideoIntercom_OpenDoor",
        "parameters": [
          {
            "description": "Session ID of video intercom",
            "in": "query",
            "name": "sessionId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "- Hash MD5 (companyCode + HHmmddMMyyyy) \n\n- Use UTC time",
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get receiver information",
        "tags": [
          "VideoIntercom"
        ]
      }
    },
    "/video-intercom/{rid}/end-call": {
      "get": {
        "operationId": "VideoIntercom_EndCall",
        "parameters": [
          {
            "description": "1. Device A call Department manager => set rid = Device A \n\n2. Device A call Emergency => set rid = Device A \n\n3. User A call device B => set rid = Device B",
            "in": "path",
            "name": "rid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Session ID of video intercom",
            "in": "query",
            "name": "sessionId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "- Hash MD5 (companyCode + rid + HHmmddMMyyyy) \n\n- Use UTC time",
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get receiver information",
        "tags": [
          "VideoIntercom"
        ]
      }
    },
    "/video-intercom/{rid}/get-receiver-info": {
      "get": {
        "operationId": "VideoIntercom_GetReceiverInfo",
        "parameters": [
          {
            "description": "1. Device A call Department manager => set rid = Device A \n\n2. Device A call Emergency => set rid = Device A \n\n3. User A call device B => set rid = Device B",
            "in": "path",
            "name": "rid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "If department not null, receiver will be department manager",
            "in": "query",
            "name": "departmentNumber",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "- If department null, receiver will be device \n\n- If both departmentNumber and deviceAddress null, the receiver will be reception device or supporter",
            "in": "query",
            "name": "deviceAddress",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "- Hash MD5 (companyCode + rid + HHmmddMMyyyy) \n\n- Use UTC time",
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get receiver information",
        "tags": [
          "VideoIntercom"
        ]
      }
    },
    "/video-intercom/{rid}/start-call": {
      "get": {
        "operationId": "VideoIntercom_StartCall",
        "parameters": [
          {
            "description": "1. Device A call Department manager => set rid = Device A \n\n2. Device A call Emergency => set rid = Device A \n\n3. User A call device B => set rid = Device B",
            "in": "path",
            "name": "rid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Session ID of video intercom",
            "in": "query",
            "name": "sessionId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "- Hash MD5 (companyCode + rid + HHmmddMMyyyy) \n\n- Use UTC time",
            "in": "query",
            "name": "hash",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "the username will push notification",
            "in": "query",
            "name": "userReceiver",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get receiver information",
        "tags": [
          "VideoIntercom"
        ]
      }
    },
    "/visit-qrcode": {
      "get": {
        "operationId": "Visit_LinkQRCodeVisitor",
        "parameters": [
          {
            "description": "token include: company code and visitorId",
            "in": "query",
            "name": "tokenVisit",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get string base 64 qr-code",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits": {
      "delete": {
        "operationId": "Visit_DeleteRange",
        "parameters": [
          {
            "description": "Visit Id",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Visit by list of id",
        "tags": [
          "Visit"
        ]
      },
      "get": {
        "operationId": "Visit_Gets",
        "parameters": [
          {
            "in": "query",
            "name": "OpeDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "OpeDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "start filter open visit from",
            "in": "query",
            "name": "startDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "end filter open visit from",
            "in": "query",
            "name": "endDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "name of visit",
            "in": "query",
            "name": "visitorName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "date of birthday",
            "in": "query",
            "name": "birthDay",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "department of visit",
            "in": "query",
            "name": "visitorDepartment",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "position",
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "site of visit",
            "in": "query",
            "name": "visiteeSite",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "reason of visit",
            "in": "query",
            "name": "visitReason",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "name of visit",
            "in": "query",
            "name": "visiteeName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "phone number",
            "in": "query",
            "name": "phone",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "status of process",
            "explode": true,
            "in": "query",
            "name": "processStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "approve name 1",
            "in": "query",
            "name": "approverName1",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "approve name 2",
            "in": "query",
            "name": "approverName2",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          },
          {
            "description": "reason for reject",
            "in": "query",
            "name": "rejectReason",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "card id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          },
          {
            "description": "search general",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 18
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 19
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 20
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Status",
              "nullable": true,
              "type": "string"
            },
            "x-position": 21
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 22
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visit list. Filter by time model(OpeDateFrom - OpeDateTo, OpeTimeFrom - OpeTimeTo)",
        "tags": [
          "Visit"
        ]
      },
      "post": {
        "operationId": "Visit_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitModel"
              }
            }
          },
          "description": "JSON model for Visit",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a visit",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/all-info": {
      "get": {
        "operationId": "Visit_GetAllInfoVisitorByCardId",
        "parameters": [
          {
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all info visit card army",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/approved/multi": {
      "patch": {
        "operationId": "Visit_ApprovedMultipleVisitor",
        "parameters": [
          {
            "description": "a list of visitor identifier ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedModel"
              }
            }
          },
          "description": "JSON model include approved boolean",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Accept multiple visit approval",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/card": {
      "get": {
        "operationId": "Visit_GetVisitorCardByIds",
        "parameters": [
          {
            "description": "a list of visitor identifier ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get card information by visitId",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/cardids": {
      "get": {
        "operationId": "Visit_GetVisitorsByCardIds",
        "parameters": [
          {
            "description": "A list of cardId. ",
            "explode": true,
            "in": "query",
            "name": "cardIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visitors by cardIds",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/departments-target": {
      "get": {
        "operationId": "Visit_AnonymousGetDepartmentTarget",
        "parameters": [
          {
            "description": "code of company",
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Anonymous get departments target",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/export": {
      "get": {
        "operationId": "Visit_ExportVisitManage",
        "parameters": [
          {
            "in": "query",
            "name": "OpeDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "OpeDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "start filter open visit from",
            "in": "query",
            "name": "startDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "description": "end filter open visit from",
            "in": "query",
            "name": "endDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "name of visit",
            "in": "query",
            "name": "visitorName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "date of birthday",
            "in": "query",
            "name": "birthDay",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "department of visit",
            "in": "query",
            "name": "visitorDepartment",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "position",
            "in": "query",
            "name": "position",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "site of visit",
            "in": "query",
            "name": "visiteeSite",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "reason of visit",
            "in": "query",
            "name": "visitReason",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 10
          },
          {
            "description": "name of visit",
            "in": "query",
            "name": "visiteeName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "phone number",
            "in": "query",
            "name": "phone",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "status of card",
            "explode": true,
            "in": "query",
            "name": "cardStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "approve name 1",
            "in": "query",
            "name": "approverName1",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 14
          },
          {
            "description": "approve name 2",
            "in": "query",
            "name": "approverName2",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          },
          {
            "description": "reason for reject",
            "in": "query",
            "name": "rejectReason",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "card id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          },
          {
            "description": "search general",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 18
          },
          {
            "description": "type of file export",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 19
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "VisitorName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 20
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 21
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export visits to file",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/export/card-qr": {
      "get": {
        "operationId": "Visit_DownloadFileExportCardQr",
        "parameters": [
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download file pdf",
        "tags": [
          "Visit"
        ]
      },
      "post": {
        "operationId": "Visit_ExportFileCardQr",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "idVisitList",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export file qr card",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/forced": {
      "delete": {
        "operationId": "Visit_DeleteRangeForced",
        "parameters": [
          {
            "description": "List of visitor identifier ",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Visit by list of id (No option(condition))",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/forced/{id}": {
      "delete": {
        "operationId": "Visit_DeleteForced",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Visit by id (No option(condition))",
        "tags": [
          "Visit"
        ]
      },
      "put": {
        "operationId": "Visit_EditForced",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitModel"
              }
            }
          },
          "description": "JSON model for Visit",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit visitor by id (No option(condition))",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/get-by-phone": {
      "get": {
        "operationId": "Visit_AnonymousGetVisitorByPhone",
        "parameters": [
          {
            "in": "query",
            "name": "companyCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Anonymous get visitor by phone (page register visit)",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/identification/multi": {
      "post": {
        "operationId": "Visit_AddIdentificationMultiVisitor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/MultipleVisitorCardModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "JSON model for identification of multiple visitor",
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add identification to multiple visitor",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/import": {
      "post": {
        "operationId": "Visit_ImportVisitor",
        "parameters": [
          {
            "description": "type of file",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import visitors data",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/import-multi": {
      "post": {
        "operationId": "Visit_ImportMultiVisitors",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ImportMultiVisitModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "required": true,
          "x-name": "models",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import multi visitors",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/import-template": {
      "get": {
        "operationId": "Visit_GetFileImportVisitTemplate",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get file template import visit",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/init": {
      "get": {
        "operationId": "Visit_VisitManageInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get init visit management page",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/ocr/info-identity": {
      "post": {
        "operationId": "Visit_GetInfoIdentityByImage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OcrImageModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get data of National Identity Number by image front, back",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/pre-register": {
      "post": {
        "operationId": "Visit_VisitPreRegister",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitModel"
              }
            }
          },
          "description": "JSON model for Visit",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a visit",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/pre-register/init": {
      "get": {
        "operationId": "Visit_VisitPreRegisterInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "init pre-register visit",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/qrcode": {
      "get": {
        "operationId": "Visit_GetVisitorByQrCode",
        "parameters": [
          {
            "in": "query",
            "name": "qrCode",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visitor by qrcode",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/report": {
      "get": {
        "operationId": "Visit_VisitReport",
        "parameters": [
          {
            "in": "query",
            "name": "AccessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "in": "query",
            "name": "AccessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "in": "query",
            "name": "AccessTimeFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 3
          },
          {
            "in": "query",
            "name": "AccessTimeTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "list of door ids",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 5
          },
          {
            "description": "name of visitor",
            "in": "query",
            "name": "visitorName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "card id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 7
          },
          {
            "description": "search general",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 8
          },
          {
            "description": "type of visit(in/out)",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 9
          },
          {
            "description": "list of event types",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "visit of website",
            "in": "query",
            "name": "visiteeSite",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 11
          },
          {
            "description": "status of card",
            "explode": true,
            "in": "query",
            "name": "cardStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 12
          },
          {
            "description": "list of card types",
            "explode": true,
            "in": "query",
            "name": "cardTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 13
          },
          {
            "description": "list of visit types ",
            "explode": true,
            "in": "query",
            "name": "visitorTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 14
          },
          {
            "description": "date of birthday",
            "in": "query",
            "name": "birthDay",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          },
          {
            "description": "visitor department",
            "in": "query",
            "name": "visitorDepartment",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "building of icu",
            "explode": true,
            "in": "query",
            "name": "building",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 17
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 18
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 19
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 20
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 21
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visit list with report. Filter by time model(OpeDateFrom - OpeDateTo, OpeTimeFrom - OpeTimeTo)",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/report/export": {
      "get": {
        "operationId": "Visit_ExportVisitReportManage",
        "parameters": [
          {
            "description": "Date Access Start",
            "in": "query",
            "name": "accessDateFrom",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Date Access End",
            "in": "query",
            "name": "accessDateTo",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "list of door ids",
            "explode": true,
            "in": "query",
            "name": "doorIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 3
          },
          {
            "description": "name of visitor",
            "in": "query",
            "name": "visitorName",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "card id",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "search general",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 6
          },
          {
            "description": "type of visit(in/out)",
            "explode": true,
            "in": "query",
            "name": "inOutType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 7
          },
          {
            "description": "list of event types",
            "explode": true,
            "in": "query",
            "name": "eventType",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 8
          },
          {
            "description": "visit of website",
            "in": "query",
            "name": "visiteeSite",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 9
          },
          {
            "description": "status of card",
            "explode": true,
            "in": "query",
            "name": "cardStatus",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 10
          },
          {
            "description": "list of card types",
            "explode": true,
            "in": "query",
            "name": "cardTypes",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 11
          },
          {
            "description": "date of birthday",
            "in": "query",
            "name": "birthDay",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 12
          },
          {
            "description": "visitor department",
            "in": "query",
            "name": "visitorDepartment",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 13
          },
          {
            "description": "building of icu",
            "explode": true,
            "in": "query",
            "name": "building",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 14
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "default": "excel",
              "nullable": true,
              "type": "string"
            },
            "x-position": 15
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "EventTime",
              "nullable": true,
              "type": "string"
            },
            "x-position": 16
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 17
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export visit with report to file",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/report/init": {
      "get": {
        "operationId": "Visit_VisitReportInit",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Visit Report Init",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/return": {
      "post": {
        "operationId": "Visit_ReturnCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBackVisit"
              }
            }
          },
          "description": "JSON model include cardId, reason of visit and list of visit ids",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return visitor's card.",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/return/multi": {
      "post": {
        "operationId": "Visit_ReturnMultipleCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/VisitCardReturnModel"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "JSON model include cardId, reason of visit and list of visit ids",
          "required": true,
          "x-name": "models",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return multiple visitor's card.",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/send-mail-invite": {
      "post": {
        "operationId": "Visit_SendMailInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitEmailInvite"
              }
            }
          },
          "description": "JSON model of Visit Email Invite",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Send link form register to list of email visitor",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/users-target": {
      "get": {
        "operationId": "Visit_GetUsersTarget",
        "parameters": [
          {
            "description": "Query string that filter by user name, email, name of department or expired date",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string of the column.",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "FirstName",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          },
          {
            "description": "valid user or invalid user or all user ",
            "explode": true,
            "in": "query",
            "name": "isValid",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 6
          },
          {
            "description": "identifier of department ",
            "in": "query",
            "name": "departmentId",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user list with pagination",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/waiting-for-review": {
      "get": {
        "operationId": "Visit_GetLengthVisitNeedToReview",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get count of visitor that need to review",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/webhook-data": {
      "post": {
        "operationId": "WebhookAnonymous_WebhookBluzone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitWebhookData"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Webhook receive data from bkav (app bluzone)",
        "tags": [
          "WebhookAnonymous"
        ]
      }
    },
    "/visits/{id}": {
      "delete": {
        "operationId": "Visit_Delete",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Visit by id",
        "tags": [
          "Visit"
        ]
      },
      "get": {
        "operationId": "Visit_Get",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visit by id.",
        "tags": [
          "Visit"
        ]
      },
      "put": {
        "operationId": "Visit_Edit",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitModel"
              }
            }
          },
          "description": "JSON model for Visit",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Edit visitor by id",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/access-history": {
      "get": {
        "operationId": "Visit_GetHistoryVisitor",
        "parameters": [
          {
            "description": "VisitId",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "current page number",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items to show on a page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return History of Visitor",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/accident-type": {
      "post": {
        "operationId": "Visit_AccidentHandlingByCardId",
        "parameters": [
          {
            "description": "Visitor Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "CardId",
            "in": "query",
            "name": "cardId",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          },
          {
            "description": "accident type",
            "in": "query",
            "name": "accidentType",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Visit Card Accident Handling",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/approved": {
      "patch": {
        "operationId": "Visit_ApprovedVisitor",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedModel"
              }
            }
          },
          "description": "JSON model include approved boolean",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Accept visit approval",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/assign-doors": {
      "post": {
        "operationId": "Visit_AssignDoors",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupAssignDoor"
              }
            }
          },
          "description": "JSON model for (doorId, timezoneId and companyId)",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign doors to an access group with visitor",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/assigned-door": {
      "post": {
        "operationId": "Visit_AssingedDoorVisitor",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "List of door ids",
            "explode": true,
            "in": "query",
            "name": "door",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "nullable": true,
              "type": "array",
              "maxItems": 1000
            },
            "style": "form",
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign doors to visitor ( AccessGroup )",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/history": {
      "get": {
        "operationId": "Visit_VisitHistoryLog",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get visit history",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/identification": {
      "get": {
        "operationId": "Visit_GetIdentificationVisitor",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get identification of visitor",
        "tags": [
          "Visit"
        ]
      },
      "post": {
        "operationId": "Visit_AddIdentificationVisitor",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardModel"
              }
            }
          },
          "description": "JSON model for identification of visitor",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add identification to visitor",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/reject": {
      "patch": {
        "operationId": "Visit_RejectVisitor",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectedModel"
              }
            }
          },
          "description": "JSON model include reason reject",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reject visit approval",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/send-qrcode": {
      "post": {
        "operationId": "Visit_AddQRVisitor",
        "parameters": [
          {
            "description": "Visit Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "Email for visitor",
            "in": "query",
            "name": "email",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add and send QR to visitor",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/unassign-doors": {
      "delete": {
        "operationId": "Visit_UnAssignDoors",
        "parameters": [
          {
            "description": "Visitor Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 1000
              }
            }
          },
          "description": "List of ids with doors",
          "required": true,
          "x-name": "doorIds",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Remove doors from an access group with visitors",
        "tags": [
          "Visit"
        ]
      }
    },
    "/visits/{id}/vehicles": {
      "delete": {
        "operationId": "Vehicle_DeleteByVisit",
        "parameters": [
          {
            "description": "visit id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "vehicle id",
            "in": "query",
            "name": "vehicleId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "delete vehicle by visit id",
        "tags": [
          "Vehicle"
        ]
      },
      "get": {
        "operationId": "Vehicle_GetListVehiclesByVisit",
        "parameters": [
          {
            "description": "visitor id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list vehicles by visitor id",
        "tags": [
          "Vehicle"
        ]
      },
      "post": {
        "operationId": "Vehicle_AddByVisit",
        "parameters": [
          {
            "description": "visitor id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalVehicleModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "add new vehicle of visitor id",
        "tags": [
          "Vehicle"
        ]
      },
      "put": {
        "operationId": "Vehicle_UpdateByVisit",
        "parameters": [
          {
            "description": "visitor id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "vehicle id",
            "in": "query",
            "name": "vehicleId",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalVehicleModel"
              }
            }
          },
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "update vehicle by visitor id",
        "tags": [
          "Vehicle"
        ]
      }
    },
    "/working-types": {
      "get": {
        "operationId": "WorkingType_Get",
        "parameters": [
          {
            "description": "Not use",
            "in": "query",
            "name": "search",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 1
          },
          {
            "description": "Page number start from 1.",
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "description": "Sort Column by string name of the column. Example ",
            "in": "query",
            "name": "sortColumn",
            "schema": {
              "default": "Id",
              "nullable": true,
              "type": "string"
            },
            "x-position": 4
          },
          {
            "description": "Sort direction: ‘desc’ for descending , ‘asc’ for ascending",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get WorkingType(s)",
        "tags": [
          "WorkingType"
        ]
      },
      "post": {
        "operationId": "WorkingType_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingModel"
              }
            }
          },
          "description": "JSON model for WorkingType",
          "required": true,
          "x-name": "model",
          "x-position": 1
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add new a working type",
        "tags": [
          "WorkingType"
        ]
      }
    },
    "/working-types/{id}": {
      "delete": {
        "operationId": "WorkingType_DeletedWorkingType",
        "parameters": [
          {
            "description": "Working type id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deleted Working Type",
        "tags": [
          "WorkingType"
        ]
      },
      "get": {
        "operationId": "WorkingType_GetDetail",
        "parameters": [
          {
            "description": "Working type id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Working Type by id",
        "tags": [
          "WorkingType"
        ]
      },
      "put": {
        "description": "Edward, 2020-03-11.",
        "operationId": "WorkingType_Edit",
        "parameters": [
          {
            "description": "The identifier of working type. ",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingModel"
              }
            }
          },
          "description": "workingTime model. ",
          "required": true,
          "x-name": "model",
          "x-position": 2
        },
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "An IActionResult. "
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "updates working type.",
        "tags": [
          "WorkingType"
        ]
      }
    },
    "/working-types/{id}/users": {
      "patch": {
        "operationId": "WorkingType_AssignMultipleUserToDefaultWorkingTime",
        "parameters": [
          {
            "description": "Working type id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-position": 1
          },
          {
            "description": "List of User",
            "in": "query",
            "name": "listUser",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Assign Multiple User to Default working time",
        "tags": [
          "WorkingType"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api3.demasterpro.com"
    },
    {
      "url": "https://api3.demasterpro.com"
    }
  ],
  "x-generator": "NSwag v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))"
}
