<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleDoorExport" xml:space="preserve">
    <value>Accessible Door Export</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="ActiveDoor" xml:space="preserve">
    <value>Active door</value>
    <comment>현재 사용X</comment>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
    <comment>시스템 로그 라벨로 사용</comment>
  </data>
  <data name="AnalysisExport" xml:space="preserve">
    <value>Analysis Export</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="AssignDoor" xml:space="preserve">
    <value>Assign Door(s)</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="AssignUser" xml:space="preserve">
    <value>Assign User</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="AssignUsersToDoor" xml:space="preserve">
    <value>Assign user(s) to the door</value>
    <comment>현재 사용 X</comment>
  </data>
  <data name="AutoRegister" xml:space="preserve">
    <value>Auto Register</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="BasicInfoTransmit" xml:space="preserve">
    <value>Basic Info Transmit</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="ChangePassword" xml:space="preserve">
    <value>Change password</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="ChangeTimezone" xml:space="preserve">
    <value>Change timezone</value>
    <comment>현재 사용 X</comment>
  </data>
  <data name="Command" xml:space="preserve">
    <value>Command</value>
    <comment>현재 사용 X</comment>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copy Door Setting</value>
    <comment>현재 사용 X</comment>
  </data>
  <data name="CopyDoorSetting" xml:space="preserve">
    <value>Copy Door Setting</value>
    
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="DeleteMultiple" xml:space="preserve">
    <value>Delete multiple</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="DeleteMultipleType" xml:space="preserve">
    <value>Delete multiple {0}</value>
    <comment>시스템 로그에서 사용</comment>
  </data>
  <data name="DoorDeleteMultiple" xml:space="preserve">
    <value>Door Delete Multiple</value>
    <comment>현재 사용 X</comment>
  </data>
  <data name="DoorOpen" xml:space="preserve">
    <value>Door Open</value>
    <comment>현재 사용 X</comment>
  </data>
  <data name="DoorUpdate" xml:space="preserve">
    <value>Door Update</value>
    
    <comment>현재 사용 X</comment>
  </data>
  <data name="EventExport" xml:space="preserve">
    <value>Event Export</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Export</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="Fail" xml:space="preserve">
    <value>Fail</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="ForcedClose" xml:space="preserve">
    <value>Emergency close</value>
    <comment>시스템 로그의 액션 타입으로 사용(기존 Forced의 개념이 Emergency가 되었고 모니터링에서의 문열기 버튼 이 Forced Open으로 변경됨)</comment>
  </data>
  <data name="ForcedOpen" xml:space="preserve">
    <value>Emergency open</value>
    <comment>시스템 로그의 액션 타입으로 사용(기존 Forced의 개념이 Emergency가 되었고 모니터링에서의 문열기 버튼 이 Forced Open으로 변경됨)</comment>
  </data>
  <data name="HolidayTransmit" xml:space="preserve">
    <value>Holiday Transmit</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="Import" xml:space="preserve">
    <value>Import</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="InactiveDoor" xml:space="preserve">
    <value>Inactive Door</value>
    
    <comment>현재 사용 X</comment>
  </data>
  <data name="InvalidDoor" xml:space="preserve">
    <value>Invalid Door</value>
    <comment>시스템 로그의 액션 타입으로 사용</comment>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="MoveDepartment" xml:space="preserve">
    <value>Change department of user</value>
  </data>
  <data name="Recovery" xml:space="preserve">
    <value>Recovery</value>
  </data>
  <data name="RegisteredUserExport" xml:space="preserve">
    <value>Registered User Export</value>
  </data>
  <data name="Reinstall" xml:space="preserve">
    <value>Reinstall door setting</value>
  </data>
  <data name="Release" xml:space="preserve">
    <value>Emergency Release</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reboot</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="Sync" xml:space="preserve">
    <value>Sync</value>
  </data>
  <data name="SystemLogExport" xml:space="preserve">
    <value>System Log Export</value>
  </data>
  <data name="TimezoneTransmit" xml:space="preserve">
    <value>Timezone Transmit</value>
  </data>
  <data name="Transmit" xml:space="preserve">
    <value>Transmit</value>
  </data>
  <data name="UnassignDoor" xml:space="preserve">
    <value>Unassign Door</value>
  </data>
  <data name="UnassignUser" xml:space="preserve">
    <value>Unassign User</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="UpdateDoor" xml:space="preserve">
    <value>Update Door</value>
  </data>
  <data name="UpdateMultipleUser" xml:space="preserve">
    <value>Update Multiple User</value>
  </data>
  <data name="UserAdd" xml:space="preserve">
    <value>User Add</value>
  </data>
  <data name="UserDelete" xml:space="preserve">
    <value>User Delete</value>
  </data>
  <data name="UserDeleteMultiple" xml:space="preserve">
    <value>User Delete Multiple</value>
  </data>
  <data name="ValidDoor" xml:space="preserve">
    <value>Valid Door</value>
  </data>
  <data name="UpdateMealServicePrice" xml:space="preserve">
    <value>Update Meal Service Price</value>
  </data>
  <data name="AddMaster" xml:space="preserve">
    <value>Add new master</value>
  </data>
  <data name="DeleteMaster" xml:space="preserve">
    <value>Delete existing master</value>
  </data>
  <data name="SetTime" xml:space="preserve">
    <value>Sync time</value>
  </data>
  <data name="ExportMaster" xml:space="preserve">
    <value>Export building masters</value>
  </data>
  <data name="ExportDoor" xml:space="preserve">
    <value>Export doors</value>
  </data>
</root>