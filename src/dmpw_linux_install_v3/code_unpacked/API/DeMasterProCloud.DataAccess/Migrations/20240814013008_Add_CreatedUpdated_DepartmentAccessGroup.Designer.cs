// <auto-generated />
using System;
using DeMasterProCloud.DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DeMasterProCloud.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240814013008_Add_CreatedUpdated_DepartmentAccessGroup")]
    partial class Add_CreatedUpdated_DepartmentAccessGroup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentId");

                    b.ToTable("AccessGroup");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessGroupDevice", b =>
                {
                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("IcuId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FloorIds")
                        .HasColumnType("text");

                    b.Property<int>("TzId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AccessGroupId", "IcuId");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("IcuId");

                    b.HasIndex("TzId");

                    b.ToTable("AccessGroupDevice");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AllLocationWarning")
                        .HasColumnType("text");

                    b.Property<bool>("AllowDeleteRecord")
                        .HasColumnType("boolean");

                    b.Property<int>("ApprovalStepNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceIdCheckIn")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableAutoApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstApproverAccounts")
                        .HasColumnType("jsonb");

                    b.Property<string>("ListFieldsEnable")
                        .HasColumnType("text");

                    b.Property<string>("SecondApproverAccounts")
                        .HasColumnType("jsonb");

                    b.Property<string>("VisibleFields")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("AccessSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FriTime1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FriTime2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FriTime3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FriTime4")
                        .HasColumnType("text");

                    b.Property<string>("HolType1Time1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType1Time2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType1Time3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType1Time4")
                        .HasColumnType("text");

                    b.Property<string>("HolType2Time1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType2Time2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType2Time3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType2Time4")
                        .HasColumnType("text");

                    b.Property<string>("HolType3Time1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType3Time2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType3Time3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HolType3Time4")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MonTime1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MonTime2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MonTime3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MonTime4")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<string>("SatTime1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SatTime2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SatTime3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SatTime4")
                        .HasColumnType("text");

                    b.Property<string>("SunTime1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SunTime2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SunTime3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SunTime4")
                        .HasColumnType("text");

                    b.Property<string>("ThurTime1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThurTime2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThurTime3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThurTime4")
                        .HasColumnType("text");

                    b.Property<string>("TueTime1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TueTime2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TueTime3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TueTime4")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WedTime1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WedTime2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WedTime3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WedTime4")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccessTime");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccidentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("AccidentType");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDateRefreshToken")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentLoginInfo")
                        .HasColumnType("text");

                    b.Property<int?>("DynamicRoleId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PreferredSystem")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("RootFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatePasswordOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreateDateRefreshToken");

                    b.HasIndex("DynamicRoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApprovalType")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NewStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("OldStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ApprovalHistory");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ClockInD")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClockOutD")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EditedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndD")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartD")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<double>("TotalWorkingTime")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkingTime")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AttendanceLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EditedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("RejectReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceLeave");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AttendanceLeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttendanceId")
                        .HasColumnType("integer");

                    b.Property<int>("AttendanceLeaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("AttendanceLeaveId");

                    b.HasIndex("Id");

                    b.ToTable("AttendanceLeaveRequest");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AttendanceSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApproverAccounts")
                        .HasColumnType("jsonb");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("DayStartTime")
                        .HasColumnType("text");

                    b.Property<bool>("EnableNotifyCheckinLate")
                        .HasColumnType("boolean");

                    b.Property<string>("InReaders")
                        .HasColumnType("jsonb");

                    b.Property<string>("OutReaders")
                        .HasColumnType("jsonb");

                    b.Property<int>("TimeFormatId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("AttendanceSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BookAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IsbnNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookAreaId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.BookArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("BookArea");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.BookBorrowTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("integer");

                    b.Property<int>("CountOfExtend")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("Id");

                    b.ToTable("BookBorrowTicket");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.BuildingMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BuildingMaster");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CameraId")
                        .HasColumnType("text");

                    b.Property<bool>("CheckEventFromWebHook")
                        .HasColumnType("boolean");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<short>("ConnectionStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IcuDeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PlaceID")
                        .HasColumnType("integer");

                    b.Property<int>("RoleReader")
                        .HasColumnType("integer");

                    b.Property<bool>("SaveEventCommunication")
                        .HasColumnType("boolean");

                    b.Property<bool>("SaveEventUnknownFace")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VideoLength")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CameraId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("IcuDeviceId");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("CardId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CardName")
                        .HasColumnType("text");

                    b.Property<short>("CardRole")
                        .HasColumnType("smallint");

                    b.Property<short>("CardRoleType")
                        .HasColumnType("smallint");

                    b.Property<short>("CardStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("CardType")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Etc")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMasterCard")
                        .HasColumnType("boolean");

                    b.Property<int>("IssueCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IssuedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ManagementNumber")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int?>("UnknownPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("VisitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UnknownPersonId");

                    b.HasIndex("UserId");

                    b.HasIndex("VisitId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CardHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccidentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<string>("CardName")
                        .HasColumnType("text");

                    b.Property<string>("CardNo")
                        .HasColumnType("text");

                    b.Property<short>("CardRoleType")
                        .HasColumnType("smallint");

                    b.Property<short>("CardStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("IssueCount")
                        .HasColumnType("integer");

                    b.Property<string>("ManagementNumber")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccidentTypeId");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VisitId");

                    b.ToTable("CardHistory");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CardLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AlignmentBack")
                        .HasColumnType("integer");

                    b.Property<int>("AlignmentFont")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LayoutBack")
                        .HasColumnType("text");

                    b.Property<string>("LayoutFont")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("CardLayout");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CategoryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryOption");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AutoSyncUserData")
                        .HasColumnType("boolean");

                    b.Property<int>("CardBit")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Contact")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactWEmail")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreditId")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableReCheckImageCamera")
                        .HasColumnType("boolean");

                    b.Property<int>("EventLogStorageDurationInDb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(24);

                    b.Property<int>("EventLogStorageDurationInFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(24);

                    b.Property<DateTime>("ExpiredFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiredTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Industries")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LimitCountOfUser")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("MiniLogo")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("PwValidPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<bool>("RootFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("SecretCode")
                        .HasColumnType("text");

                    b.Property<int>("TimeLimitCheckImageCamera")
                        .HasColumnType("integer");

                    b.Property<int>("TimeLimitStoredImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(365);

                    b.Property<int>("TimeLimitStoredVideo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(365);

                    b.Property<int>("TimeRecheckAttendance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<bool>("UpdateAttendanceRealTime")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAttendanceOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("UseDataEncrypt")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseExpiredPW")
                        .HasColumnType("boolean");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CompanyAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DynamicRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PreferredSystem")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DynamicRoleId");

                    b.HasIndex("CompanyId", "AccountId")
                        .IsUnique();

                    b.ToTable("CompanyAccount");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ControllerDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("ControllerAddress")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<short>("ControllerType")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("IpAddress")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MacAddress")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("ControllerDevice");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CornerSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CornerSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<double>("CurrentPoint")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<double>("TotalPoint")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DataListSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("DataList")
                        .HasColumnType("text");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("DataListSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DebugMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceAddress")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("MsgId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("DebugMessage");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DepartNo")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("DepartmentManagerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentManagerId");

                    b.HasIndex("ParentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DepartmentAccessGroup", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DepartmentId");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentAccessGroup");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DeviceMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DeviceMessage");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DynamicRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableDepartmentLevel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PermissionList")
                        .HasColumnType("text");

                    b.Property<bool>("RoleSettingDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DynamicRole");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Elevator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Elevator");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ElevatorFloor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ElevatorId")
                        .HasColumnType("integer");

                    b.Property<int>("FloorIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.ToTable("ElevatorFloor");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<string>("ModelName")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int?>("VisitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Culture")
                        .HasColumnType("integer");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<int>("EventNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Antipass")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double>("BodyTemperature")
                        .HasColumnType("double precision");

                    b.Property<int?>("CameraId")
                        .HasColumnType("integer");

                    b.Property<string>("CardId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short>("CardStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("CardType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DelayOpenDoorByCamera")
                        .HasColumnType("double precision");

                    b.Property<int?>("DeptId")
                        .HasColumnType("integer");

                    b.Property<string>("DoorName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<int>("IcuId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageCamera")
                        .HasColumnType("jsonb");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsVisit")
                        .HasColumnType("boolean");

                    b.Property<int>("IssueCount")
                        .HasColumnType("integer");

                    b.Property<string>("KeyPadPw")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ResultCheckIn")
                        .HasColumnType("text");

                    b.Property<int?>("UnknownPersonId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("Videos")
                        .HasColumnType("text");

                    b.Property<int?>("VisitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IcuId");

                    b.HasIndex("Id");

                    b.HasIndex("UnknownPersonId");

                    b.HasIndex("UserId");

                    b.HasIndex("VisitId");

                    b.HasIndex("CompanyId", "IcuId", "EventTime", "CardId")
                        .IsUnique();

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.EventMemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EventLogId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventLogId");

                    b.HasIndex("Id");

                    b.ToTable("EventMemo");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ExceptionalMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FromMealTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ToMealTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("icuDeviceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("End");

                    b.HasIndex("FromMealTypeId");

                    b.HasIndex("Id");

                    b.HasIndex("Start");

                    b.HasIndex("ToMealTypeId");

                    b.HasIndex("icuDeviceId");

                    b.ToTable("ExceptionalMeal");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Face", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("FaceCode")
                        .HasColumnType("text");

                    b.Property<string>("FaceImage")
                        .HasColumnType("text");

                    b.Property<string>("FaceSmallImage")
                        .HasColumnType("text");

                    b.Property<string>("LeftIrisCode")
                        .HasColumnType("text");

                    b.Property<string>("LeftIrisImage")
                        .HasColumnType("text");

                    b.Property<string>("RightIrisCode")
                        .HasColumnType("text");

                    b.Property<string>("RightIrisImage")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Face");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.FingerPrint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Templates")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.ToTable("FingerPrint");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.FirmwareVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("DeviceType")
                        .HasColumnType("smallint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("FirmwareVersion");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.HeaderSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("HeaderList")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("HeaderSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Recursive")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.IcuDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("ActiveTzId")
                        .HasColumnType("integer");

                    b.Property<short>("AlarmStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("AliasId")
                        .HasColumnType("text");

                    b.Property<int>("BackupPeriod")
                        .HasColumnType("integer");

                    b.Property<short>("BioStationMode")
                        .HasColumnType("smallint");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<short?>("BuzzerReader0")
                        .HasColumnType("smallint");

                    b.Property<short?>("BuzzerReader1")
                        .HasColumnType("smallint");

                    b.Property<bool>("CloseReverseLockFlag")
                        .HasColumnType("boolean");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<short>("ConnectionStatus")
                        .HasColumnType("smallint");

                    b.Property<int?>("ControllerId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateTimeOnlineDevice")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DependentDoors")
                        .HasColumnType("text");

                    b.Property<string>("DeviceAddress")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<short>("DeviceBuzzer")
                        .HasColumnType("smallint");

                    b.Property<string>("DeviceManagerIds")
                        .HasColumnType("text");

                    b.Property<short>("DeviceType")
                        .HasColumnType("smallint");

                    b.Property<string>("DoorStatus")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("DoorStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ElevatorId")
                        .HasColumnType("integer");

                    b.Property<int>("EventCount")
                        .HasColumnType("integer");

                    b.Property<string>("ExtraVersion")
                        .HasColumnType("text");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastCommunicationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short?>("LedReader0")
                        .HasColumnType("smallint");

                    b.Property<short?>("LedReader1")
                        .HasColumnType("smallint");

                    b.Property<int>("MPRCount")
                        .HasColumnType("integer");

                    b.Property<int>("MPRInterval")
                        .HasColumnType("integer");

                    b.Property<string>("MacAddress")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("MaxOpenDuration")
                        .HasColumnType("integer");

                    b.Property<int?>("MealServiceTimeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NfcModuleVersion")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfNotTransmittingEvent")
                        .HasColumnType("integer");

                    b.Property<int?>("OpenDuration")
                        .HasColumnType("integer");

                    b.Property<short>("OperationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("PassageTzId")
                        .HasColumnType("integer");

                    b.Property<short>("PassbackRule")
                        .HasColumnType("smallint");

                    b.Property<int>("RegisterIdNumber")
                        .HasColumnType("integer");

                    b.Property<short?>("RoleReader0")
                        .HasColumnType("smallint");

                    b.Property<short?>("RoleReader1")
                        .HasColumnType("smallint");

                    b.Property<bool>("SensorAlarm")
                        .HasColumnType("boolean");

                    b.Property<int?>("SensorDuration")
                        .HasColumnType("integer");

                    b.Property<short>("SensorType")
                        .HasColumnType("smallint");

                    b.Property<string>("ServerIp")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ServerPort")
                        .HasColumnType("integer")
                        .HasMaxLength(8);

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int?>("TwoPartSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("UpTimeOnlineDevice")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("UseAlarmRelay")
                        .HasColumnType("boolean");

                    b.Property<int?>("UseCardReader")
                        .HasColumnType("integer");

                    b.Property<short>("VerifyMode")
                        .HasColumnType("smallint");

                    b.Property<string>("VersionReader0")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("VersionReader1")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ActiveTzId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("MealServiceTimeId");

                    b.HasIndex("PassageTzId");

                    b.HasIndex("TwoPartSystemId");

                    b.ToTable("IcuDevice");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.IssuingDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<short>("ConnectionStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceAddress")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<int>("DevicePort")
                        .HasColumnType("integer");

                    b.Property<short>("DeviceType")
                        .HasColumnType("smallint");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("IssuingDevice");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.LeaveRequestSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberDayOffPreviousYear")
                        .HasColumnType("integer");

                    b.Property<int>("NumberDayOffYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("LeaveRequestSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Variables")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("MailTemplate");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealEventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("AppliedDiscount")
                        .HasColumnType("integer");

                    b.Property<int>("CornerId")
                        .HasColumnType("integer");

                    b.Property<int>("EventLogId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ExceptionalMealAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExceptionalUserAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<int>("MealCode")
                        .HasColumnType("integer");

                    b.Property<string>("MealType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventLogId");

                    b.ToTable("MealEventLog");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealServiceTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FriTime")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MonTime")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<string>("SatTime")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SunTime")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ThuTime")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("TueTime")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WedTime")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MealServiceTime");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CornerId")
                        .HasColumnType("integer");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CornerId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("MealSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PopUpMessage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MealType");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoorIds")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogInstruction")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("StatusInstruction")
                        .HasColumnType("boolean");

                    b.Property<int>("TimeoutAllowed")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserIds")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MessageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupMsgId")
                        .HasColumnType("text");

                    b.Property<bool>("IsNotify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStopped")
                        .HasColumnType("boolean");

                    b.Property<string>("MsgId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PayLoad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProcessId")
                        .HasColumnType("text");

                    b.Property<int>("ProgressIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("MessageLog");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReceiveId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedUrl")
                        .HasColumnType("text");

                    b.Property<string>("ResourceName")
                        .HasColumnType("text");

                    b.Property<string>("ResourceParam")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.PartTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountHolder")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("Bank")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HourlyWage")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("PartTime");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.PersonCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("PersonCardType");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.PlugIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("PlugIns")
                        .HasColumnType("jsonb");

                    b.Property<string>("PlugInsDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PlugIn");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ReportProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CameraId")
                        .HasColumnType("integer");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<int?>("IcuDeviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("IcuDeviceId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportProblem");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ShortenLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FullPath")
                        .HasColumnType("text");

                    b.Property<string>("LocationOrigin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortPath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FullPath")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("ShortPath")
                        .IsUnique();

                    b.ToTable("ShortenLink");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.SymptomCovid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Symptoms")
                        .HasColumnType("jsonb");

                    b.Property<int>("VisitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("SymptomCovid");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.SystemInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LicenseInfo")
                        .HasColumnType("text");

                    b.Property<string>("SecretCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("SystemInfo");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.SystemLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("character varying");

                    b.Property<string>("ContentDetails")
                        .HasColumnType("character varying");

                    b.Property<string>("ContentIds")
                        .HasColumnType("character varying");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OpeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreditId")
                        .HasColumnType("integer");

                    b.Property<double>("CurrentPoint")
                        .HasColumnType("double precision");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<double>("Point")
                        .HasColumnType("double precision");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.HasIndex("Id");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.TwoPartSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TimeFrom")
                        .HasColumnType("text");

                    b.Property<string>("TimeTo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("TwoPartSystem");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UnknownPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("UnknownPerson");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UnregistedDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceAddress")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<int>("RegisterType")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.ToTable("UnregistedDevice");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ApproverId1")
                        .HasColumnType("integer");

                    b.Property<int>("ApproverId2")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("City")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmpNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<string>("HomePhone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsAccountLock")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMasterCard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUseApply")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUseApproval")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IssuedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Job")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("KeyPadPw")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NationalIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OfficePhone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<short>("PassType")
                        .HasColumnType("smallint");

                    b.Property<short>("PermissionType")
                        .HasColumnType("smallint");

                    b.Property<string>("Position")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<string>("Responsibility")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Rfu")
                        .HasColumnType("text");

                    b.Property<bool>("Sex")
                        .HasColumnType("boolean");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("SystemAuth")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SystemUseApplyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SystemUseApplyReason")
                        .HasColumnType("text");

                    b.Property<string>("SystemUsePassword")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserCode")
                        .HasColumnType("text");

                    b.Property<short?>("WorkType")
                        .HasColumnType("smallint");

                    b.Property<int?>("WorkingTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("WorkingTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UserCategoryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCategoryOption");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UserDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiscount");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("ExistBlackBox")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("text");

                    b.Property<string>("PlateRFID")
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleClass")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.Property<int>("VehicleRule")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleType")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VisitId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.VehicleAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<string>("DispatchType")
                        .HasColumnType("text");

                    b.Property<string>("DriverIds")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ServiceEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ServiceStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("SupportType")
                        .HasColumnType("text");

                    b.Property<int>("UnitVehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UnitVehicleId");

                    b.ToTable("VehicleAllocation");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AliasId")
                        .HasColumnType("text");

                    b.Property<string>("AllowedBelonging")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApplyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ApprovDate1")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ApprovDate2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ApproverId1")
                        .HasColumnType("integer");

                    b.Property<int>("ApproverId2")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CardId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short>("CardStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateIssueIdNumber")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("ImageCardIdBack")
                        .HasColumnType("text");

                    b.Property<string>("ImageCardIdFont")
                        .HasColumnType("text");

                    b.Property<bool>("IsDecision")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("IssueCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IssuerId")
                        .HasColumnType("integer");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("integer");

                    b.Property<string>("LeaderName")
                        .HasColumnType("text");

                    b.Property<string>("NationalIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PlaceIssueIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ReclaimerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RejectDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectReason")
                        .HasColumnType("text");

                    b.Property<string>("RejectorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoomDoorCode")
                        .HasColumnType("text");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("UnitName")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserCode")
                        .HasColumnType("text");

                    b.Property<string>("VisitPlace")
                        .HasColumnType("text");

                    b.Property<string>("VisitReason")
                        .HasColumnType("text");

                    b.Property<string>("VisitType")
                        .HasColumnType("text");

                    b.Property<string>("VisiteeDepartment")
                        .HasColumnType("text");

                    b.Property<int?>("VisiteeDepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("VisiteeEmpNumber")
                        .HasColumnType("text");

                    b.Property<int?>("VisiteeId")
                        .HasColumnType("integer");

                    b.Property<string>("VisiteeName")
                        .HasColumnType("text");

                    b.Property<string>("VisiteeSite")
                        .HasColumnType("text");

                    b.Property<short>("VisitingCardState")
                        .HasColumnType("smallint");

                    b.Property<string>("VisitorDepartment")
                        .HasColumnType("text");

                    b.Property<string>("VisitorEmpNumber")
                        .HasColumnType("text");

                    b.Property<string>("VisitorName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.VisitHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NewStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("OldStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VisitorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("VisitHistory");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.VisitSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("AccessTimeId")
                        .HasColumnType("integer");

                    b.Property<string>("AllLocationWarning")
                        .HasColumnType("text");

                    b.Property<bool>("AllowDeleteRecord")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowEditRecord")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowEmployeeInvite")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowGetUserTarget")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSelectDoorWhenCreateNew")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSendKakao")
                        .HasColumnType("boolean");

                    b.Property<int>("ApprovalStepNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultDoors")
                        .HasColumnType("jsonb");

                    b.Property<int>("DeviceIdCheckIn")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableAutoApproval")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCaptCha")
                        .HasColumnType("boolean");

                    b.Property<string>("FieldRegisterLeft")
                        .HasColumnType("text");

                    b.Property<string>("FieldRegisterRight")
                        .HasColumnType("text");

                    b.Property<string>("FieldRequired")
                        .HasColumnType("text");

                    b.Property<string>("FirstApproverAccounts")
                        .HasColumnType("jsonb");

                    b.Property<string>("GroupDevices")
                        .HasColumnType("jsonb");

                    b.Property<bool>("InsiderAutoApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("ListFieldsEnable")
                        .HasColumnType("text");

                    b.Property<bool>("OnlyAccessSingleBuilding")
                        .HasColumnType("boolean");

                    b.Property<bool>("OutSide")
                        .HasColumnType("boolean");

                    b.Property<string>("PersonalInvitationLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("register-visit");

                    b.Property<string>("SecondsApproverAccounts")
                        .HasColumnType("jsonb");

                    b.Property<string>("VisibleFields")
                        .HasColumnType("text");

                    b.Property<string>("VisitCheckManagerAccounts")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccessTimeId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("VisitSetting");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.WorkingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CheckClockOut")
                        .HasColumnType("boolean");

                    b.Property<bool>("CheckLunchTime")
                        .HasColumnType("boolean");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LunchTime")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("UseClockOutDevice")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkingDay")
                        .HasColumnType("jsonb");

                    b.Property<int>("WorkingHourType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("WorkingType");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessGroup", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("AccessGroup")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_AccessGroup_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessGroup", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_AccessGroup_AccessGroup");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessGroupDevice", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessGroup", "AccessGroup")
                        .WithMany("AccessGroupDevice")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("FK_AccessGroupDevice_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.IcuDevice", "Icu")
                        .WithMany("AccessGroupDevice")
                        .HasForeignKey("IcuId")
                        .HasConstraintName("FK_AccessGroupDevice_IcuDevice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessTime", "Tz")
                        .WithMany("AccessGroupDevice")
                        .HasForeignKey("TzId")
                        .HasConstraintName("FK_AccessGroupDevice_AccessTime")
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithOne("AccessSetting")
                        .HasForeignKey("DeMasterProCloud.DataAccess.Models.AccessSetting", "CompanyId")
                        .HasConstraintName("FK_AccessSetting_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccessTime", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("AccessTime")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_AccessTime_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AccidentType", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("AccidentType")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_AccidentType_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Account", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Account")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.DynamicRole", "DynamicRole")
                        .WithMany("Account")
                        .HasForeignKey("DynamicRoleId")
                        .HasConstraintName("FK_Account_DynamicRole");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ApprovalHistory", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_ApprovalHistory_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Attendance", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("Attendance")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Attendance_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AttendanceLeave", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("AttendanceLeave")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AttendanceLeave_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AttendanceLeaveRequest", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Attendance", "Attendance")
                        .WithMany("AttendanceLeaveRequest")
                        .HasForeignKey("AttendanceId")
                        .HasConstraintName("FK_AttendanceLeaveRequest_Attendance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.AttendanceLeave", "AttendanceLeave")
                        .WithMany("AttendanceLeaveRequest")
                        .HasForeignKey("AttendanceLeaveId")
                        .HasConstraintName("FK_AttendanceLeaveRequest_AttendanceLeave")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.AttendanceSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithOne("AttendanceSetting")
                        .HasForeignKey("DeMasterProCloud.DataAccess.Models.AttendanceSetting", "CompanyId")
                        .HasConstraintName("FK_AttendanceSetting_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Book", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.BookArea", "BookArea")
                        .WithMany("Book")
                        .HasForeignKey("BookAreaId")
                        .HasConstraintName("FK_Book_BookArea")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Book")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Book_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.BookArea", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("BookArea")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_BookArea_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.BookBorrowTicket", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Book", "Book")
                        .WithMany("BookBorrowTicket")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_BookBorrowTicket_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "Borrower")
                        .WithMany("BookBorrowTicket")
                        .HasForeignKey("BorrowerId")
                        .HasConstraintName("FK_BookBorrowTicket_Borrower")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Building", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Building")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Building_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Building", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Building_Building");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.BuildingMaster", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Building", "Building")
                        .WithMany("BuildingMaster")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_BuildingMaster_Building")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("BuildingMaster")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BuildingMaster_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Camera", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.IcuDevice", "IcuDevice")
                        .WithMany()
                        .HasForeignKey("IcuDeviceId");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Card", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Card")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Card_Company")
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.UnknownPerson", "UnknownPerson")
                        .WithMany("Card")
                        .HasForeignKey("UnknownPersonId")
                        .HasConstraintName("FK_Card_UnknownPerson")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("Card")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Card_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Visit", "Visit")
                        .WithMany("Card")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_Card_Visit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CardHistory", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccidentType", "AccidentType")
                        .WithMany("CardHistory")
                        .HasForeignKey("AccidentTypeId")
                        .HasConstraintName("FK_CardHistory_AccidentType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Card", "Card")
                        .WithMany("CardHistory")
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK_CardHistory_Card")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "AccountUpdated")
                        .WithMany("CardHistory")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_CardHistory_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("CardHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CardHistory_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Visit", "Visit")
                        .WithMany("CardHistory")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_CardHistory_Visit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CardLayout", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("CardLayout")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CardLayout_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Category", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Category")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Category_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CategoryOption", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Category", "Category")
                        .WithMany("CategoryOption")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CategoryOption_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CompanyAccount", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "Account")
                        .WithMany("CompanyAccount")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_CompanyAccount_Account")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("CompanyAccount")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyAccount_Company")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.DynamicRole", "DynamicRole")
                        .WithMany("CompanyAccount")
                        .HasForeignKey("DynamicRoleId")
                        .HasConstraintName("FK_CompanyAccount_DynamicRole")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ControllerDevice", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("ControllerDevice")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_ControllerDevice_Company")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.CornerSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("CornerSetting")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CornerSetting_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Credit", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithOne("Credit")
                        .HasForeignKey("DeMasterProCloud.DataAccess.Models.Credit", "CompanyId")
                        .HasConstraintName("FK_Credit_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DataListSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "Account")
                        .WithMany("DataListSetting")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Header_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("DataListSetting")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Header_Company")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Department", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Department")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Department_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "DepartmentManager")
                        .WithMany("Department")
                        .HasForeignKey("DepartmentManagerId")
                        .HasConstraintName("FK_Department_Account");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Department", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Department_Department");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DepartmentAccessGroup", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessGroup", "AccessGroup")
                        .WithMany("DepartmentAccessGroups")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("FK_DepartmentAccessGroup_AccessGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Department", "Department")
                        .WithOne("DepartmentAccessGroup")
                        .HasForeignKey("DeMasterProCloud.DataAccess.Models.DepartmentAccessGroup", "DepartmentId")
                        .HasConstraintName("FK_DepartmentAccessGroup_Department")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DeviceMessage", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("DeviceMessage")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_DeviceMessage_Company")
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.DynamicRole", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("DynamicRole")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Role_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Elevator", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Building", "Building")
                        .WithMany("Elevator")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_Elevator_Building")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ElevatorFloor", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Elevator", "Elevator")
                        .WithMany("ElevatorFloor")
                        .HasForeignKey("ElevatorId")
                        .HasConstraintName("FK_ElevatorFloor_Elevator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Equipment", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Visit", "Visit")
                        .WithMany("Equipment")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_Equipment_Visit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.EventLog", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Camera", "Camera")
                        .WithMany("EventLog")
                        .HasForeignKey("CameraId")
                        .HasConstraintName("FK_EventLog_Camera")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("EventLog")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_EventLog_Company");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.IcuDevice", "Icu")
                        .WithMany("EventLog")
                        .HasForeignKey("IcuId")
                        .HasConstraintName("FK_EventLog_IcuDevice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.UnknownPerson", "UnknownPerson")
                        .WithMany("EventLog")
                        .HasForeignKey("UnknownPersonId")
                        .HasConstraintName("FK_EventLog_UnknownPerson")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("EventLog")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EventLog_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Visit", "Visit")
                        .WithMany("EventLog")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_EventLog_Visit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.EventMemo", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.EventLog", "EventLog")
                        .WithMany("EventMemo")
                        .HasForeignKey("EventLogId")
                        .HasConstraintName("FK_EventMemo_EventLog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ExceptionalMeal", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.MealType", "FromMealType")
                        .WithMany()
                        .HasForeignKey("FromMealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.MealType", "ToMealType")
                        .WithMany()
                        .HasForeignKey("ToMealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.IcuDevice", "icuDevice")
                        .WithMany()
                        .HasForeignKey("icuDeviceId");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Face", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Face")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Face_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("Face")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Face_User")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.FingerPrint", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Card", "Card")
                        .WithMany("FingerPrint")
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK_FingerPrint_Card")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.HeaderSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "Account")
                        .WithMany("HeaderSetting")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Header_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("HeaderSetting")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Header_Company")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Holiday", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Holiday")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Holiday_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.IcuDevice", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", null)
                        .WithMany("IcuDevice")
                        .HasForeignKey("AccountId");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessTime", "ActiveTz")
                        .WithMany("DoorActive")
                        .HasForeignKey("ActiveTzId")
                        .HasConstraintName("FK_IcuDevice_AccessTime1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Building", "Building")
                        .WithMany("IcuDevice")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_IcuDevice_Building")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("IcuDevice")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_IcuDevice_Company")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.ControllerDevice", "ControllerDevice")
                        .WithMany("Reader")
                        .HasForeignKey("ControllerId")
                        .HasConstraintName("FK_IcuDevice_ControllerDevice")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Elevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.MealServiceTime", "MealServiceTime")
                        .WithMany("Devices")
                        .HasForeignKey("MealServiceTimeId");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessTime", "PassageTz")
                        .WithMany("DoorPassage")
                        .HasForeignKey("PassageTzId")
                        .HasConstraintName("FK_IcuDevice_AccessTime")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.TwoPartSystem", "TwoPartSystem")
                        .WithMany("IcuDevice")
                        .HasForeignKey("TwoPartSystemId")
                        .HasConstraintName("FK_IcuDevice_TwoPartSystem")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.IssuingDevice", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("IssuingDevice")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_IssuingDevice_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.LeaveRequestSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithOne("LeaveRequestSetting")
                        .HasForeignKey("DeMasterProCloud.DataAccess.Models.LeaveRequestSetting", "CompanyId")
                        .HasConstraintName("FK_LeaveRequestSetting_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MailTemplate", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("MailTemplate")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealEventLog", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.EventLog", "EventLog")
                        .WithMany("MealEventLog")
                        .HasForeignKey("EventLogId")
                        .HasConstraintName("FK_MealEventLog_EventLog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealServiceTime", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("MealServiceTime")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_MealServiceTime_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.CornerSetting", "CornerSetting")
                        .WithMany("MealSetting")
                        .HasForeignKey("CornerId")
                        .HasConstraintName("FK_MealSetting_CornerSetting")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.MealType", "MealType")
                        .WithMany("MealSetting")
                        .HasForeignKey("MealTypeId")
                        .HasConstraintName("FK_MealSetting_MealType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MealType", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("MealType")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_MealType_company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Meeting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.MessageLog", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.PartTime", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("PartTime")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_PartTime_Company")
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("PartTime")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PartTime_User")
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.PersonCardType", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("PersonCardType")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_PersonCardType_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.PlugIn", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("PlugIn")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Solution_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.ReportProblem", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Camera", "Camera")
                        .WithMany("ReportProblem")
                        .HasForeignKey("CameraId")
                        .HasConstraintName("FK_ReportProblem_Camera")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.IcuDevice", "IcuDevice")
                        .WithMany("ReportProblem")
                        .HasForeignKey("IcuDeviceId")
                        .HasConstraintName("FK_ReportProblem_IcuDevice")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("ReportProblem")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ReportProblem_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.SymptomCovid", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.SystemLog", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("SystemLog")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_SystemLog_Company");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("SystemLog")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_SystemLog_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Transaction", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Credit", "Credit")
                        .WithMany("Transaction")
                        .HasForeignKey("CreditId")
                        .HasConstraintName("FK_Transaction_Credit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UnknownPerson", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("UnknownPerson")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_UnknownPerson_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UnregistedDevice", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("UnregistedDevice")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_UnregistedDevice_Company");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.User", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessGroup", "AccessGroup")
                        .WithMany("User")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("FK_User_AccessGroup")
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Account", "Account")
                        .WithMany("User")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_User_Account");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("User")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_User_Company1")
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Department", "Department")
                        .WithMany("User")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_User_Department")
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.WorkingType", "WorkingType")
                        .WithMany("User")
                        .HasForeignKey("WorkingTypeId")
                        .HasConstraintName("FK_User_WorkingType");
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UserCategoryOption", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.CategoryOption", "CategoryOption")
                        .WithMany("UserCategoryOption")
                        .HasForeignKey("CategoryOptionId")
                        .HasConstraintName("FK_UserCategoryOption_CategoryOption")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("UserCategoryOption")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserCategoryOption_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.UserDiscount", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("CornerSetting")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CornerSetting_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Vehicle", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Department", "Department")
                        .WithMany("Vehicle")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Vehicle_Department")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("Vehicle")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Vehicle_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Visit", "Visit")
                        .WithMany("Vehicle")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_Vehicle_Visit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.VehicleAllocation", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("VehicleAllocation")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_VehicleAllocation_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.User", "User")
                        .WithMany("VehicleAllocation")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_VehicleAllocation_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleAllocation")
                        .HasForeignKey("UnitVehicleId")
                        .HasConstraintName("FK_VehicleAllocation_Vehicle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.Visit", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessGroup", "AccessGroup")
                        .WithMany("Visit")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("FK_Visit_AccessGroup")
                        .IsRequired();

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("Visit")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Visit_Company")
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.VisitHistory", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("VisitHistory")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_VisitHistory_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.VisitSetting", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.AccessTime", "AccessTime")
                        .WithMany()
                        .HasForeignKey("AccessTimeId");

                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithOne("VisitSetting")
                        .HasForeignKey("DeMasterProCloud.DataAccess.Models.VisitSetting", "CompanyId")
                        .HasConstraintName("FK_VisitSetting_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeMasterProCloud.DataAccess.Models.WorkingType", b =>
                {
                    b.HasOne("DeMasterProCloud.DataAccess.Models.Company", "Company")
                        .WithMany("WorkingType")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_WorkingType_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
